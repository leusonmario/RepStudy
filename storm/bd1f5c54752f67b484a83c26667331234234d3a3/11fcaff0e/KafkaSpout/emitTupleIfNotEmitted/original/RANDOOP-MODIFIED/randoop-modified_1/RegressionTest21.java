import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        int int15 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) 'a', (long) (-1), (long) 97, timestampType16, (long) (short) 100, (int) (byte) -1, (int) (byte) -1, serializable20, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str33 = serializableConsumerRecord32.toString();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord32.headers();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType39, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int46 = serializableConsumerRecord45.serializedValueSize();
        int int47 = serializableConsumerRecord45.serializedValueSize();
        long long48 = serializableConsumerRecord45.offset();
        int int49 = serializableConsumerRecord45.serializedValueSize();
        long long50 = serializableConsumerRecord45.offset();
        long long51 = serializableConsumerRecord45.timestamp();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord45.headers();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        long long67 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord63.headers();
        java.lang.String str69 = serializableConsumerRecord63.topic();
        long long70 = serializableConsumerRecord63.checksum();
        java.lang.String str71 = serializableConsumerRecord63.topic();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) '#', (long) 0, (long) (short) 0, timestampType16, (java.lang.Long) 97L, (int) '#', 52, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = 100, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers34, headers52, intOptional72);
        java.lang.Class<?> wildcardClass74 = strConsumerRecord73.getClass();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str33, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        java.lang.CharSequence charSequence10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) 52, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", charSequence10);
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long26 = serializableConsumerRecord25.checksum();
        long long27 = serializableConsumerRecord25.checksum();
        long long28 = serializableConsumerRecord25.checksum();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable44 = serializableConsumerRecord43.key();
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 97, (long) 100, (long) '#', timestampType29, (long) 97, (int) '4', 0, (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeEnumConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) 0, (long) (byte) 100, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType12, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) 100, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.io.Serializable serializable53 = serializableConsumerRecord52.key();
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + 100.0f + "'", serializable44, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (byte) 100 + "'", serializable53, (byte) 100);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str25 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long40 = serializableConsumerRecord39.checksum();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) (byte) 10, (long) (byte) 10, timestampType26, (java.lang.Long) (-1L), (int) (byte) 100, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", headers41);
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable57 = serializableConsumerRecord56.key();
        int int58 = serializableConsumerRecord56.serializedKeySize();
        int int59 = serializableConsumerRecord56.serializedValueSize();
        java.io.Serializable serializable60 = serializableConsumerRecord56.key();
        int int61 = serializableConsumerRecord56.partition();
        long long62 = serializableConsumerRecord56.timestamp();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord56.leaderEpoch();
        int int64 = serializableConsumerRecord56.serializedValueSize();
        java.io.Serializable serializable65 = serializableConsumerRecord56.key();
        int int66 = serializableConsumerRecord56.partition();
        java.lang.Class<?> wildcardClass67 = serializableConsumerRecord56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) 10, (long) (byte) -1, timestampType26, (long) 35, 10, (int) (short) -1, (java.io.Serializable) wildcardClass67, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) 100, 0L, timestampType4, 0L, 0, 100, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 97, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 1 + "'", serializable57, (short) 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        long long12 = serializableConsumerRecord9.checksum();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long24 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord23.headers();
        long long26 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', (long) '#', 0L, timestampType14, (long) (-1), (int) (byte) 1, (int) ' ', (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long30 = serializableConsumerRecord29.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 100, (long) 100, (java.io.Serializable) wildcardClass10, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 97, (long) (short) 10, (java.io.Serializable) wildcardClass10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (short) 0, 1L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '#', (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence6, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        java.io.Serializable serializable94 = serializableConsumerRecord88.key();
        java.lang.Class<?> wildcardClass95 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + "hi!" + "'", serializable94, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType32, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int39 = serializableConsumerRecord38.serializedValueSize();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        int int41 = serializableConsumerRecord38.serializedKeySize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable54 = serializableConsumerRecord53.key();
        long long55 = serializableConsumerRecord53.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType22, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers42, intOptional56);
        long long58 = serializableConsumerRecord57.timestamp();
        java.io.Serializable serializable59 = serializableConsumerRecord57.key();
        long long60 = serializableConsumerRecord57.offset();
        long long61 = serializableConsumerRecord57.offset();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 10L + "'", long58 == 10L);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 100 + "'", serializable59, (short) 100);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 32, (long) ' ', (java.io.Serializable) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType47, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional65);
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType72, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = serializableConsumerRecord78.value();
        int int80 = serializableConsumerRecord78.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord78.leaderEpoch();
        java.io.Serializable serializable82 = serializableConsumerRecord78.key();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType33, (java.lang.Long) 10L, (int) '#', 35, timestampType47, "hi!", headers83);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType33, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType16, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType33, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass89 = timestampType16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) -1, (long) (short) 10, (java.io.Serializable) wildcardClass89, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord91.headers();
        int int93 = serializableConsumerRecord91.partition();
        long long94 = serializableConsumerRecord91.offset();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord91.value();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 1.0f + "'", serializable15, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 1 + "'", serializable82, (short) 1);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 10L + "'", long94 == 10L);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)" + "'", charSequence95, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord58.leaderEpoch();
        int int79 = serializableConsumerRecord58.partition();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.io.Serializable serializable8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str28 = serializableConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        java.lang.CharSequence charSequence34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType29, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence34);
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType49, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType36, (long) '#', 1, 0, (java.io.Serializable) timestampType49, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        int int70 = serializableConsumerRecord68.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType49, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord68);
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord68.headers();
        org.apache.kafka.common.record.TimestampType timestampType77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType77, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int84 = serializableConsumerRecord83.serializedValueSize();
        int int85 = serializableConsumerRecord83.serializedValueSize();
        long long86 = serializableConsumerRecord83.offset();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord83.value();
        java.io.Serializable serializable88 = serializableConsumerRecord83.key();
        java.lang.String str89 = serializableConsumerRecord83.toString();
        long long90 = serializableConsumerRecord83.offset();
        java.lang.String str91 = serializableConsumerRecord83.topic();
        int int92 = serializableConsumerRecord83.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord83.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) 'a', (long) 10, 100L, timestampType4, (java.lang.Long) 35L, 100, 10, serializable8, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers72, intOptional93);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + 10.0f + "'", serializable88, 10.0f);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str89, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intOptional93);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        int int29 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType18, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord46.value();
        long long50 = serializableConsumerRecord46.offset();
        java.io.Serializable serializable51 = serializableConsumerRecord46.key();
        java.lang.String str52 = serializableConsumerRecord46.toString();
        java.lang.Class<?> wildcardClass53 = serializableConsumerRecord46.getClass();
        java.lang.CharSequence charSequence54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, 0L, (long) 35, timestampType18, 0L, (int) (byte) 100, 1, (java.io.Serializable) wildcardClass53, charSequence54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', (long) (short) 0, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 1 + "'", serializable51, (short) 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str52, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        long long7 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        long long11 = serializableConsumerRecord5.offset();
        long long12 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        int int19 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) -1, (long) '#', timestampType22, (long) 10, (-1), (int) (short) 0, (java.io.Serializable) 100.0d, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord40.headers();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType59, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) (byte) 10, (long) 1, timestampType22, (long) (-1), 0, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) -1, (long) (short) 0, (long) 10, timestampType59, 97L, 52, (int) (short) 1, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str73 = serializableConsumerRecord72.topic();
        int int74 = serializableConsumerRecord72.partition();
        int int75 = serializableConsumerRecord72.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + 1.0f + "'", serializable43, 1.0f);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str73, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        long long79 = serializableConsumerRecord58.offset();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord58.leaderEpoch();
        int int81 = serializableConsumerRecord58.partition();
        long long82 = serializableConsumerRecord58.timestamp();
        int int83 = serializableConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord58.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intOptional84);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.partition();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord8.headers();
        java.io.Serializable serializable13 = serializableConsumerRecord8.key();
        long long14 = serializableConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable27 = serializableConsumerRecord26.key();
        long long28 = serializableConsumerRecord26.offset();
        int int29 = serializableConsumerRecord26.partition();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord26.timestampType();
        java.lang.String str31 = serializableConsumerRecord26.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> intOptionalConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) 35, intOptional15, serializableConsumerRecord26);
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord26.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 1 + "'", serializable27, (short) 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNull(timestampType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(timestampType33);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long49 = serializableConsumerRecord48.offset();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        java.lang.String str52 = serializableConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord48.timestampType();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass61, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord63.timestampType();
        java.lang.String str65 = serializableConsumerRecord63.topic();
        java.lang.String str66 = serializableConsumerRecord63.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.CharSequence> objConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )", (int) 'a', (long) 35, (long) 32, timestampType53, 35L, 0, 0, (java.lang.Object) serializableConsumerRecord63, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + 100 + "'", serializable50, 100);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str52, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str66, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass9 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 0, 97L, (java.io.Serializable) wildcardClass9, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord11.toString();
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))" + "'", str13, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        int int15 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 32L, (long) (short) -1, timestampType18, 10L, (int) (byte) 100, 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 32, 0L, 32L, timestampType25, (long) 52, (-1), (int) '#', (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord31.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional32);
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 52, (long) 100, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        long long32 = serializableConsumerRecord30.checksum();
        java.lang.CharSequence charSequence33 = serializableConsumerRecord30.value();
        long long34 = serializableConsumerRecord30.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, (long) (byte) 10, (long) '4', timestampType14, (long) (short) 0, 10, (int) (byte) -1, serializableConsumerRecord30, "");
        int int37 = serializableConsumerRecord30.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        int int18 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        long long20 = serializableConsumerRecord13.timestamp();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord13.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord32.headers();
        java.lang.String str38 = serializableConsumerRecord32.toString();
        java.lang.String str39 = serializableConsumerRecord32.toString();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord32.timestampType();
        int int42 = serializableConsumerRecord32.serializedKeySize();
        int int43 = serializableConsumerRecord32.serializedKeySize();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement> typeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", 1, (long) 97, (java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.AnnotatedElement) wildcardClass44);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str38, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str39, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNull(timestampType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.partition();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        int int18 = serializableConsumerRecord16.partition();
        java.lang.String str19 = serializableConsumerRecord16.topic();
        long long20 = serializableConsumerRecord16.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 1, (long) 32, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable38 = serializableConsumerRecord37.key();
        long long39 = serializableConsumerRecord37.offset();
        long long40 = serializableConsumerRecord37.timestamp();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord37.headers();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord37.leaderEpoch();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String> genericDeclarationConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null))", 35, 0L, (long) (short) -1, timestampType21, (long) (short) 1, 52, (int) 'a', (java.lang.reflect.GenericDeclaration) wildcardClass43, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.io.Serializable serializable49 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str60 = serializableConsumerRecord59.topic();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType61, (java.lang.CharSequence) "hi!");
        int int64 = serializableConsumerRecord63.serializedKeySize();
        long long65 = serializableConsumerRecord63.checksum();
        java.lang.String str66 = serializableConsumerRecord63.toString();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType72, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = serializableConsumerRecord78.value();
        java.io.Serializable serializable80 = serializableConsumerRecord78.key();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord78.timestampType();
        long long82 = serializableConsumerRecord78.offset();
        long long83 = serializableConsumerRecord78.checksum();
        long long84 = serializableConsumerRecord78.checksum();
        int int85 = serializableConsumerRecord78.partition();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord78.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!), partition = 100, leaderEpoch = null, offset = 32, null = 0, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) (short) 0, (long) 52, (long) ' ', timestampType21, (java.lang.Long) (-1L), 0, 10, serializable49, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!))", headers67, intOptional86);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", str66, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNull(timestampType81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(intOptional86);
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str40 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord39.headers();
        java.lang.String str42 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord39.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hi!" + "'", str42, "hi!");
        org.junit.Assert.assertNotNull(headers43);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType30, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass20, timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int36 = serializableConsumerRecord35.serializedKeySize();
        java.lang.String str37 = serializableConsumerRecord35.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord35.timestampType();
        java.io.Serializable serializable39 = serializableConsumerRecord35.key();
        long long40 = serializableConsumerRecord35.checksum();
        long long41 = serializableConsumerRecord35.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str37, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable39, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = serializableConsumerRecord8.value();
        int int10 = serializableConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)", 0, (long) (short) 100, (java.io.Serializable) timestampType11, (java.lang.CharSequence) "");
        int int14 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord13.headers();
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "hi!" + "'", charSequence9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) ' ', (long) (byte) 0, (java.io.Serializable) 100L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.partition();
        int int43 = serializableConsumerRecord39.serializedKeySize();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord39.value();
        long long45 = serializableConsumerRecord39.timestamp();
        java.lang.String str46 = serializableConsumerRecord39.topic();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10L + "'", long45 == 10L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        long long19 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        long long22 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord10.leaderEpoch();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str21, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.io.Serializable serializable14 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (-1.0d) + "'", serializable14, (-1.0d));
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        java.lang.reflect.GenericDeclaration genericDeclaration3 = null;
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType8, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int15 = serializableConsumerRecord14.serializedValueSize();
        int int16 = serializableConsumerRecord14.serializedKeySize();
        int int17 = serializableConsumerRecord14.serializedKeySize();
        int int18 = serializableConsumerRecord14.serializedKeySize();
        int int19 = serializableConsumerRecord14.partition();
        long long20 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord14.headers();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>> genericDeclarationConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", (int) (byte) 10, (long) '4', genericDeclaration3, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers22);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        java.lang.String str63 = serializableConsumerRecord59.topic();
        int int64 = serializableConsumerRecord59.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long13 = serializableConsumerRecord12.offset();
        long long14 = serializableConsumerRecord12.checksum();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord12.headers();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence8);
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str29 = serializableConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord28.timestampType();
        java.lang.CharSequence charSequence35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType30, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence35);
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        int int72 = serializableConsumerRecord70.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional73 = serializableConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType55, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional73);
        java.io.Serializable serializable78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType55, (long) 0, 0, 0, serializable78, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass81 = timestampType55.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.partition();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, (long) 'a', (long) (byte) -1, timestampType37, (java.lang.Long) 52L, 35, 52, (java.lang.reflect.GenericDeclaration) wildcardClass81, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, (long) 10, 0L, timestampType11, (long) (-1), (int) ' ', (int) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "hi!");
        long long95 = serializableConsumerRecord94.offset();
        int int96 = serializableConsumerRecord94.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 10 + "'", serializable10, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str90, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 10L + "'", long95 == 10L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        long long26 = serializableConsumerRecord23.timestamp();
        long long27 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        long long30 = serializableConsumerRecord23.checksum();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.partition();
        java.lang.String str26 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType15, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType59, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional77);
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        int int92 = serializableConsumerRecord90.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord90.leaderEpoch();
        java.io.Serializable serializable94 = serializableConsumerRecord90.key();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType45, (java.lang.Long) 10L, (int) '#', 35, timestampType59, "hi!", headers95);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 10, (long) (short) 1, timestampType27, (java.lang.Long) 35L, (int) (short) 0, 1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", headers95);
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord97.timestampType();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 1 + "'", serializable94, (short) 1);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.partition();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord58.headers();
        long long80 = serializableConsumerRecord58.timestamp();
        long long81 = serializableConsumerRecord58.offset();
        int int82 = serializableConsumerRecord58.partition();
        java.lang.String str83 = serializableConsumerRecord58.topic();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord84.leaderEpoch();
        int int87 = serializableConsumerRecord84.partition();
        int int88 = serializableConsumerRecord84.serializedKeySize();
        int int89 = serializableConsumerRecord84.partition();
        java.lang.String str90 = serializableConsumerRecord84.toString();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str90, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType16, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = serializableConsumerRecord22.value();
        java.io.Serializable serializable24 = serializableConsumerRecord22.key();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord22.timestampType();
        java.lang.Class<?> wildcardClass26 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType36, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass26, timestampType36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 100, 1L, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass42 = serializableConsumerRecord41.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) '#', (long) (byte) 0, (java.io.Serializable) wildcardClass42, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 52, (long) '#', (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 1 + "'", serializable24, (short) 1);
        org.junit.Assert.assertNull(timestampType25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNull(timestampType16);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord64.headers();
        java.io.Serializable serializable69 = serializableConsumerRecord64.key();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord64.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 10 + "'", serializable69, (byte) 10);
        org.junit.Assert.assertNotNull(intOptional70);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.io.Serializable serializable25 = serializableConsumerRecord22.key();
        int int26 = serializableConsumerRecord22.partition();
        int int27 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType43, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int89 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, (long) (byte) 100, (long) 1, timestampType13, (java.lang.Long) 10L, (-1), 100, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers79, intOptional91);
        long long93 = serializableConsumerRecord92.timestamp();
        long long94 = serializableConsumerRecord92.offset();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord92.timestampType();
        java.io.Serializable serializable96 = serializableConsumerRecord92.key();
        int int97 = serializableConsumerRecord92.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (-1.0d) + "'", serializable25, (-1.0d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 1.0f + "'", serializable42, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long14 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.partition();
        java.lang.String str29 = serializableConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 10L, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.lang.CharSequence charSequence33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) 35, (long) (short) 100, timestampType15, (long) 32, 10, (int) '4', (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", charSequence33);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        long long50 = serializableConsumerRecord48.checksum();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord48.value();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord48.value();
        int int53 = serializableConsumerRecord48.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord64.leaderEpoch();
        java.io.Serializable serializable68 = serializableConsumerRecord64.key();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord64.timestampType();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord64.leaderEpoch();
        java.lang.Class<?> wildcardClass72 = intOptional71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement> objConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 1, 97L, (long) (byte) -1, timestampType15, (long) (byte) 1, (int) (byte) -1, (int) (byte) -1, (java.lang.Object) serializableConsumerRecord48, (java.lang.reflect.AnnotatedElement) wildcardClass72);
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord48.headers();
        java.lang.CharSequence charSequence75 = serializableConsumerRecord48.value();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str29, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.timestamp();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        java.lang.String str24 = serializableConsumerRecord23.toString();
        int int25 = serializableConsumerRecord23.serializedValueSize();
        long long26 = serializableConsumerRecord23.checksum();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        int int30 = serializableConsumerRecord23.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNull(timestampType17);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 52, (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))" + "'", charSequence6, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        long long12 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long47 = serializableConsumerRecord46.checksum();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord46.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) (byte) 10, (long) (byte) 10, timestampType33, (java.lang.Long) (-1L), (int) (byte) 100, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", headers48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) '#', (long) 'a', (java.io.Serializable) timestampType33, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.String str52 = serializableConsumerRecord51.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, 0L, serializableConsumerRecord13, (java.lang.Object) str52);
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord13.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", str52, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.junit.Assert.assertNotNull(intOptional54);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        long long92 = serializableConsumerRecord88.checksum();
        int int93 = serializableConsumerRecord88.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional45, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass49 = intOptionalConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType10, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int52 = serializableConsumerRecord51.partition();
        int int53 = serializableConsumerRecord51.serializedKeySize();
        int int54 = serializableConsumerRecord51.partition();
        long long55 = serializableConsumerRecord51.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 35L + "'", long55 == 35L);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (short) 10, serializable3, (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        int int9 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertNull(serializable8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.toString();
        long long94 = serializableConsumerRecord88.checksum();
        int int95 = serializableConsumerRecord88.partition();
        java.lang.String str96 = serializableConsumerRecord88.topic();
        long long97 = serializableConsumerRecord88.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 32L + "'", long97 == 32L);
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence8);
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        java.lang.reflect.Type type16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str27 = serializableConsumerRecord26.topic();
        int int28 = serializableConsumerRecord26.partition();
        java.lang.String str29 = serializableConsumerRecord26.topic();
        java.lang.String str30 = serializableConsumerRecord26.topic();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType62, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass52, timestampType62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 0, (long) 52, (long) (short) 1, timestampType31, 100L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration> typeConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (-1L), 52L, timestampType12, (long) (byte) 1, 97, 10, type16, (java.lang.reflect.GenericDeclaration) wildcardClass52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null))", (int) (byte) 1, 52L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", intOptional13);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.lang.Class<?> wildcardClass21 = headers20.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        int int43 = serializableConsumerRecord42.serializedKeySize();
        int int44 = serializableConsumerRecord42.partition();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 10, 32L, (java.io.Serializable) wildcardClass45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord12.headers();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable19 = null;
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType25, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int32 = serializableConsumerRecord31.serializedValueSize();
        int int33 = serializableConsumerRecord31.serializedValueSize();
        long long34 = serializableConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord31.headers();
        long long36 = serializableConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) 'a', (long) '4', (long) 100, timestampType15, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 100, serializable19, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers37);
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", 0, 32L, (java.io.Serializable) wildcardClass40, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        long long44 = serializableConsumerRecord42.offset();
        long long45 = serializableConsumerRecord42.timestamp();
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        long long18 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence26 = serializableConsumerRecord23.value();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.partition();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        long long11 = serializableConsumerRecord5.checksum();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        int int13 = serializableConsumerRecord5.partition();
        long long14 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        int int15 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 32L, (long) (short) -1, timestampType18, 10L, (int) (byte) 100, 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long42 = serializableConsumerRecord41.offset();
        int int43 = serializableConsumerRecord41.partition();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        java.io.Serializable serializable48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) ' ', (long) (short) -1, (long) (byte) 0, timestampType44, 32L, 1, 97, serializable48, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        long long69 = serializableConsumerRecord67.checksum();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord67.value();
        java.lang.String str71 = serializableConsumerRecord67.toString();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord67.leaderEpoch();
        java.lang.Class<?> wildcardClass73 = intOptional72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long80 = serializableConsumerRecord79.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>> typeConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 1, 35L, (java.lang.reflect.Type) wildcardClass73, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> annotatedElementConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (short) -1, (long) '4', 35L, timestampType44, (long) 10, (int) (short) 10, (int) (short) 0, (java.lang.reflect.AnnotatedElement) wildcardClass73, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 10, (long) 35, (long) (short) 10, timestampType18, (long) 1, (int) (short) 10, (int) ' ', (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        java.io.Serializable serializable88 = serializableConsumerRecord87.key();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord87.timestampType();
        int int90 = serializableConsumerRecord87.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str71, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + (short) 10 + "'", serializable88, (short) 10);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        long long90 = serializableConsumerRecord88.checksum();
        int int91 = serializableConsumerRecord88.serializedValueSize();
        int int92 = serializableConsumerRecord88.partition();
        long long93 = serializableConsumerRecord88.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str15 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        long long13 = serializableConsumerRecord5.checksum();
        int int14 = serializableConsumerRecord5.partition();
        java.lang.String str15 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord5.value();
        long long17 = serializableConsumerRecord5.timestamp();
        int int18 = serializableConsumerRecord5.serializedValueSize();
        int int19 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 1.0f + "'", serializable10, 1.0f);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str15, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable19 = serializableConsumerRecord18.key();
        long long20 = serializableConsumerRecord18.checksum();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass22 = charSequence21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        long long55 = serializableConsumerRecord51.offset();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord51.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers56, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass59 = headerIterableConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord65.timestampType();
        int int67 = serializableConsumerRecord65.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord65.timestampType();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType74, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence81 = serializableConsumerRecord80.value();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord80.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) (short) 1, (long) (byte) -1, timestampType34, (java.lang.Long) 32L, (int) (byte) 10, (int) 'a', (java.lang.reflect.Type) wildcardClass59, intOptional69, headers82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 97, 0L, (long) 52, timestampType4, (java.lang.Long) 0L, (int) (byte) -1, (int) (short) 1, (java.io.Serializable) wildcardClass22, serializableConsumerRecord23, headers82);
        java.lang.Class<?> wildcardClass85 = headers82.getClass();
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str10, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str11, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 100L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        long long70 = serializableConsumerRecord64.offset();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.partition();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord8.headers();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord8.leaderEpoch();
        java.io.Serializable serializable13 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 10, (long) (byte) 100, (java.io.Serializable) timestampType15, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        int int18 = serializableConsumerRecord17.partition();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.io.Serializable serializable27 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord25.timestampType();
        java.lang.Class<?> wildcardClass29 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType39, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass29, timestampType39);
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        java.io.Serializable serializable58 = serializableConsumerRecord56.key();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord56.timestampType();
        java.lang.Class<?> wildcardClass60 = serializableConsumerRecord56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType39, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass60, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str70 = serializableConsumerRecord69.topic();
        int int71 = serializableConsumerRecord69.partition();
        java.lang.String str72 = serializableConsumerRecord69.topic();
        java.lang.String str73 = serializableConsumerRecord69.topic();
        int int74 = serializableConsumerRecord69.serializedValueSize();
        int int75 = serializableConsumerRecord69.partition();
        int int76 = serializableConsumerRecord69.serializedValueSize();
        java.lang.String str77 = serializableConsumerRecord69.toString();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 10, (long) 35, 1L, timestampType4, (java.lang.Long) 100L, 97, (int) '#', (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", headers78);
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 1 + "'", serializable27, (short) 1);
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 1 + "'", serializable58, (short) 1);
        org.junit.Assert.assertNull(timestampType59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str77, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers78);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable29 = serializableConsumerRecord23.key();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        java.io.Serializable serializable32 = serializableConsumerRecord23.key();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord23.headers();
        long long34 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 10 + "'", serializable29, 10);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 10 + "'", serializable32, 10);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.timestamp();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        long long11 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.partition();
        long long43 = serializableConsumerRecord39.offset();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord39.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) -1, (java.io.Serializable) 0.0f, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        java.lang.Class<?> wildcardClass10 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) ' ', 0L, (java.io.Serializable) wildcardClass10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        java.io.Serializable serializable31 = serializableConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord29.timestampType();
        long long33 = serializableConsumerRecord29.offset();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord29.headers();
        java.lang.String str35 = serializableConsumerRecord29.toString();
        java.lang.String str36 = serializableConsumerRecord29.toString();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 100, 32L, (long) 'a', timestampType15, (long) (short) -1, 0, (int) (byte) 100, (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        java.io.Serializable serializable58 = serializableConsumerRecord56.key();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord56.timestampType();
        long long60 = serializableConsumerRecord56.offset();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord56.headers();
        java.lang.String str62 = serializableConsumerRecord56.toString();
        java.lang.String str63 = serializableConsumerRecord56.toString();
        java.lang.Class<?> wildcardClass64 = serializableConsumerRecord56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) (short) -1, (java.io.Serializable) wildcardClass64, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        java.lang.Class<?> wildcardClass67 = serializableConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (short) 0, 97L, 35L, timestampType15, (long) (short) -1, 35, (int) (short) 100, (java.io.Serializable) wildcardClass67, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str70 = serializableConsumerRecord69.topic();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord69.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertNull(timestampType32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 1 + "'", serializable58, (short) 1);
        org.junit.Assert.assertNull(timestampType59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str62, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.junit.Assert.assertNotNull(intOptional71);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 10 + "'", serializable10, (byte) 10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (byte) 10 + "'", serializable11, (byte) 10);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence4);
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        long long7 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 10 + "'", serializable6, (byte) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNull(charSequence9);
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord15.timestampType();
        int int17 = serializableConsumerRecord15.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType23, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        int int31 = serializableConsumerRecord29.serializedValueSize();
        long long32 = serializableConsumerRecord29.offset();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord29.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType18, serializableConsumerRecord29);
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord51.headers();
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord67.value();
        long long70 = serializableConsumerRecord67.timestamp();
        java.io.Serializable serializable71 = serializableConsumerRecord67.key();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers72, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>> headerIterableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', (long) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers53, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers72);
        java.lang.Class<?> wildcardClass76 = headers72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 35L, 0L, timestampType18, (long) '#', 1, 0, (java.io.Serializable) wildcardClass76, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable79 = serializableConsumerRecord78.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 97, (long) 1, serializable79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.io.Serializable serializable82 = serializableConsumerRecord81.key();
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable71 + "' != '" + (short) 1 + "'", serializable71, (short) 1);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(serializable79);
        org.junit.Assert.assertNotNull(serializable82);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        long long10 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.serializedValueSize();
        long long81 = serializableConsumerRecord58.checksum();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord58.headers();
        int int83 = serializableConsumerRecord58.serializedValueSize();
        long long84 = serializableConsumerRecord58.offset();
        int int85 = serializableConsumerRecord58.serializedValueSize();
        int int86 = serializableConsumerRecord58.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        int int26 = serializableConsumerRecord23.serializedValueSize();
        int int27 = serializableConsumerRecord23.partition();
        java.io.Serializable serializable28 = serializableConsumerRecord23.key();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + 10 + "'", serializable28, 10);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord13.value();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        long long18 = serializableConsumerRecord13.timestamp();
        java.lang.String str19 = serializableConsumerRecord13.toString();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass21 = headers20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 10, (long) 97, (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        long long24 = serializableConsumerRecord23.timestamp();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable26 = serializableConsumerRecord23.key();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(serializable26);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        java.lang.String str63 = serializableConsumerRecord59.topic();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord59.value();
        int int65 = serializableConsumerRecord59.serializedKeySize();
        int int66 = serializableConsumerRecord59.serializedKeySize();
        int int67 = serializableConsumerRecord59.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        long long21 = serializableConsumerRecord10.checksum();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str49 = serializableConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord48.timestampType();
        java.lang.CharSequence charSequence55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType50, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence55);
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType70, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType57, (long) '#', 1, 0, (java.io.Serializable) timestampType70, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str89 = serializableConsumerRecord88.topic();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord88.timestampType();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>> timestampTypeEnumConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) (-1), (long) (short) 1, timestampType28, (java.lang.Long) 0L, (int) (short) 1, 0, timestampTypeEnum34, intOptional75, headers82, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) (-1), (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord94.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNotNull(intOptional95);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        int int12 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord42.value();
        long long45 = serializableConsumerRecord42.timestamp();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 0, 97L, timestampType31, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47);
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        java.lang.String str67 = serializableConsumerRecord64.toString();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        long long69 = serializableConsumerRecord64.timestamp();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) ' ', (long) '4', timestampType13, (java.lang.Long) (-1L), (int) (byte) 10, (int) (short) 0, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers70);
        java.lang.String str73 = serializableConsumerRecord72.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str73, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        long long90 = serializableConsumerRecord88.checksum();
        int int91 = serializableConsumerRecord88.serializedValueSize();
        java.io.Serializable serializable92 = serializableConsumerRecord88.key();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord88.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + "hi!" + "'", serializable92, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        long long93 = serializableConsumerRecord88.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        long long95 = serializableConsumerRecord88.checksum();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord88.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 32L + "'", long93 == 32L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        long long10 = serializableConsumerRecord5.checksum();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord5.timestampType();
        long long15 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        java.io.Serializable serializable31 = serializableConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord29.timestampType();
        long long33 = serializableConsumerRecord29.offset();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord29.headers();
        java.lang.String str35 = serializableConsumerRecord29.toString();
        java.lang.String str36 = serializableConsumerRecord29.toString();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 100, 32L, (long) 'a', timestampType15, (long) (short) -1, 0, (int) (byte) 100, (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord56.timestampType();
        int int60 = serializableConsumerRecord56.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType61, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType61, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType79, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord85.leaderEpoch();
        int int87 = serializableConsumerRecord85.partition();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (-1), (long) (-1), 35L, timestampType15, (java.lang.Long) 35L, (int) (short) -1, (int) (short) -1, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers88);
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord89.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord89.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertNull(timestampType32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertNotNull(intOptional91);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord17.value();
        long long20 = serializableConsumerRecord17.timestamp();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', (long) 52, (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord23.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long48 = serializableConsumerRecord47.timestamp();
        int int49 = serializableConsumerRecord47.serializedKeySize();
        long long50 = serializableConsumerRecord47.timestamp();
        long long51 = serializableConsumerRecord47.timestamp();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        java.lang.Class<?> wildcardClass53 = headers52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", 0, (long) 32, (long) '4', timestampType33, (long) (byte) 0, (int) (byte) 100, (int) (short) 1, (java.lang.reflect.AnnotatedElement) wildcardClass53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        int int69 = serializableConsumerRecord67.serializedKeySize();
        int int70 = serializableConsumerRecord67.serializedKeySize();
        int int71 = serializableConsumerRecord67.serializedKeySize();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, 0L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) 0, (int) (short) -1, (java.io.Serializable) wildcardClass53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )", headers73);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNotNull(headers73);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.partition();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        java.lang.String str15 = serializableConsumerRecord12.toString();
        long long16 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (byte) 1, 32L, (java.io.Serializable) timestampType17, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int33 = serializableConsumerRecord32.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord48.getClass();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord62.leaderEpoch();
        java.io.Serializable serializable66 = serializableConsumerRecord62.key();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType73, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int80 = serializableConsumerRecord79.partition();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType34, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers68, intOptional81);
        long long83 = serializableConsumerRecord82.offset();
        java.lang.String str84 = serializableConsumerRecord82.topic();
        long long85 = serializableConsumerRecord82.checksum();
        long long86 = serializableConsumerRecord82.offset();
        java.lang.String str87 = serializableConsumerRecord82.topic();
        long long88 = serializableConsumerRecord82.timestamp();
        java.lang.String str89 = serializableConsumerRecord82.topic();
        int int90 = serializableConsumerRecord82.partition();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord82.headers();
        java.lang.String str92 = serializableConsumerRecord82.topic();
        java.lang.CharSequence charSequence93 = serializableConsumerRecord82.value();
        int int94 = serializableConsumerRecord82.serializedKeySize();
        java.lang.Class<?> wildcardClass95 = serializableConsumerRecord82.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) 10, (long) ' ', timestampType17, (long) 10, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass95, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        java.lang.CharSequence charSequence98 = serializableConsumerRecord97.value();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L + "'", long83 == 100L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str84, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L + "'", long86 == 100L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str87, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str89, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence93, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)" + "'", charSequence98, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.checksum();
        long long23 = serializableConsumerRecord10.timestamp();
        long long24 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long40 = serializableConsumerRecord39.checksum();
        java.util.Optional<java.lang.Integer> intOptional41 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        int int43 = serializableConsumerRecord39.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 10L + "'", serializable42, 10L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 100 + "'", int43 == 100);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.io.Serializable serializable24 = serializableConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (-1), (long) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord44.headers();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord44.value();
        java.lang.CharSequence charSequence50 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers51 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) -1, (long) 10, (long) (byte) -1, timestampType30, (long) ' ', 97, (int) (byte) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers51, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 0, 100L, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 10, (long) (byte) 10, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + 1.0f + "'", serializable24, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNull(timestampType47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertNotNull(headers51);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.partition();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord5.timestampType();
        int int15 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 97, 32L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.timestamp();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        int int26 = serializableConsumerRecord23.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord23.topic();
        java.lang.String str28 = serializableConsumerRecord23.topic();
        long long29 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        long long15 = serializableConsumerRecord10.offset();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 100, (long) 100, (java.io.Serializable) wildcardClass7, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 97, (long) (short) 10, (java.io.Serializable) wildcardClass7, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int12 = serializableConsumerRecord11.serializedKeySize();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.partition();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        java.lang.String str32 = serializableConsumerRecord30.topic();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord30.getClass();
        java.lang.CharSequence charSequence34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType14, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass33, charSequence34);
        int int36 = serializableConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord35.leaderEpoch();
        int int38 = serializableConsumerRecord35.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord35.timestampType();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        long long21 = serializableConsumerRecord10.offset();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord16.key();
        long long20 = serializableConsumerRecord16.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long46 = serializableConsumerRecord45.timestamp();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        long long48 = serializableConsumerRecord45.timestamp();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord45.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        java.io.Serializable serializable62 = serializableConsumerRecord60.key();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord60.timestampType();
        long long64 = serializableConsumerRecord60.offset();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord60.headers();
        java.lang.String str66 = serializableConsumerRecord60.toString();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord60.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 32, 0L, (long) 32, timestampType21, (java.lang.Long) 0L, (int) (short) -1, 52, serializableConsumerRecord25, intOptional34, headers49, intOptional68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) 1, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long80 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable88 = serializableConsumerRecord87.key();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord87.headers();
        java.lang.String str90 = serializableConsumerRecord87.topic();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord87.timestampType();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object> strComparableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 100, 10L, (long) '4', timestampType21, (java.lang.Long) 0L, (int) (byte) 1, 35, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (java.lang.Object) serializableConsumerRecord79, headers92);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) (short) 100, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        long long96 = serializableConsumerRecord95.checksum();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (-1.0d) + "'", serializable19, (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNull(timestampType63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + 100.0f + "'", serializable88, 100.0f);
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str90, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        int int96 = serializableConsumerRecord92.serializedKeySize();
        int int97 = serializableConsumerRecord92.serializedValueSize();
        org.apache.kafka.common.header.Headers headers98 = serializableConsumerRecord92.headers();
        long long99 = serializableConsumerRecord92.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(headers98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long17 = serializableConsumerRecord16.checksum();
        long long18 = serializableConsumerRecord16.checksum();
        long long19 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable35 = serializableConsumerRecord34.key();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType36, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 97, (long) 100, (long) '#', timestampType20, (long) 97, (int) '4', 0, (java.io.Serializable) timestampType36, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        java.lang.Class<?> wildcardClass52 = timestampType51.getClass();
        org.apache.kafka.common.header.Headers headers54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 1, 32L, 52L, timestampType20, (java.lang.Long) 0L, 0, 1, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", headers54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + 100.0f + "'", serializable35, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        long long20 = serializableConsumerRecord10.checksum();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        long long21 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType22, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int74 = serializableConsumerRecord73.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord73.leaderEpoch();
        int int76 = serializableConsumerRecord73.partition();
        long long77 = serializableConsumerRecord73.checksum();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        long long12 = serializableConsumerRecord5.checksum();
        long long13 = serializableConsumerRecord5.offset();
        long long14 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        java.lang.String str32 = serializableConsumerRecord25.toString();
        java.lang.String str33 = serializableConsumerRecord25.toString();
        long long34 = serializableConsumerRecord25.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord25.timestampType();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str32, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str33, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNull(timestampType35);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        int int14 = serializableConsumerRecord12.partition();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord12.headers();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord12.value();
        java.io.Serializable serializable18 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord25.timestampType();
        long long33 = serializableConsumerRecord25.offset();
        long long34 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, 10L, timestampType19, headers35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str46 = serializableConsumerRecord45.topic();
        int int47 = serializableConsumerRecord45.partition();
        long long48 = serializableConsumerRecord45.timestamp();
        long long49 = serializableConsumerRecord45.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord62.value();
        int int66 = serializableConsumerRecord62.serializedKeySize();
        long long67 = serializableConsumerRecord62.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord62.timestampType();
        long long69 = serializableConsumerRecord62.timestamp();
        int int70 = serializableConsumerRecord62.serializedKeySize();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) (byte) 1, (long) (short) -1, (long) (short) 1, timestampType19, (java.lang.Long) 97L, (int) (byte) 10, (int) (short) 0, (java.io.Serializable) timestampType50, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers71);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (-1.0d) + "'", serializable18, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNull(timestampType68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        int int23 = serializableConsumerRecord10.serializedValueSize();
        int int24 = serializableConsumerRecord10.serializedValueSize();
        long long25 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass12, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord14.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType23, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long30 = serializableConsumerRecord29.timestamp();
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord64.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType49, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional67);
        java.io.Serializable serializable72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType49, (long) 0, 0, 0, serializable72, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass75 = timestampType49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement> intOptionalConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 10, 10L, (long) (-1), timestampType15, (long) (byte) 1, (int) (byte) -1, (int) (short) -1, intOptional31, (java.lang.reflect.AnnotatedElement) wildcardClass75);
        org.apache.kafka.common.record.TimestampType timestampType86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType86, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence93 = serializableConsumerRecord92.value();
        java.io.Serializable serializable94 = serializableConsumerRecord92.key();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord92.timestampType();
        java.lang.Class<?> wildcardClass96 = serializableConsumerRecord92.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 100, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 1, (-1L), (long) 97, timestampType15, (long) 0, (int) (byte) 10, (int) (byte) -1, (java.io.Serializable) wildcardClass96, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "hi!" + "'", charSequence93, "hi!");
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 1 + "'", serializable94, (short) 1);
        org.junit.Assert.assertNull(timestampType95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass94 = serializableConsumerRecord93.getClass();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.partition();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence10 = serializableConsumerRecord9.value();
        int int11 = serializableConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int29 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord44.getClass();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType69, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int76 = serializableConsumerRecord75.partition();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord75.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType30, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers64, intOptional77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 52, (long) 10, (long) 0, timestampType13, (java.lang.Long) 35L, (int) (short) -1, 35, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers64);
        java.lang.String str80 = serializableConsumerRecord79.topic();
        int int81 = serializableConsumerRecord79.serializedValueSize();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord79.headers();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )" + "'", str80, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", serializable83, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        long long60 = serializableConsumerRecord57.checksum();
        long long61 = serializableConsumerRecord57.offset();
        java.io.Serializable serializable62 = serializableConsumerRecord57.key();
        long long63 = serializableConsumerRecord57.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord57.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(serializable62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str6, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.timestamp();
        long long11 = serializableConsumerRecord5.offset();
        java.lang.Class<?> wildcardClass12 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + false + "'", serializable9, false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable31 = serializableConsumerRecord30.key();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord30.headers();
        java.lang.String str33 = serializableConsumerRecord30.topic();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        long long57 = serializableConsumerRecord54.offset();
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) -1, (long) (byte) 100, (java.io.Serializable) wildcardClass58, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, (long) 1, (java.lang.reflect.AnnotatedElement) wildcardClass58, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (short) 0, 97L, (long) (short) -1, timestampType34, 97L, (int) (byte) 1, (int) (byte) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', (long) '4', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType78, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str85 = serializableConsumerRecord84.toString();
        java.io.Serializable serializable86 = serializableConsumerRecord84.key();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord84.value();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord84.leaderEpoch();
        int int89 = serializableConsumerRecord84.serializedKeySize();
        java.lang.Class<?> wildcardClass90 = serializableConsumerRecord84.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) (byte) 0, (java.io.Serializable) wildcardClass90, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type> charSequenceConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) (byte) 10, 97L, (long) (short) 100, timestampType34, 0L, 35, (int) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.Type) wildcardClass90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (-1L), (long) 52, timestampType10, 52L, 97, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int96 = serializableConsumerRecord95.serializedValueSize();
        java.io.Serializable serializable97 = serializableConsumerRecord95.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + 100.0f + "'", serializable31, 100.0f);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str85, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable86 + "' != '" + 10.0f + "'", serializable86, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
        org.junit.Assert.assertTrue("'" + serializable97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        long long12 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        long long72 = serializableConsumerRecord71.offset();
        java.lang.String str73 = serializableConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str84 = serializableConsumerRecord83.topic();
        int int85 = serializableConsumerRecord83.partition();
        java.lang.String str86 = serializableConsumerRecord83.topic();
        java.lang.String str87 = serializableConsumerRecord83.topic();
        int int88 = serializableConsumerRecord83.serializedValueSize();
        java.lang.Class<?> wildcardClass89 = serializableConsumerRecord83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 35, (long) (short) 1, 52L, timestampType74, 35L, 0, 52, (java.io.Serializable) wildcardClass89, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) 97, (java.io.Serializable) 35L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        long long94 = serializableConsumerRecord93.timestamp();
        java.io.Serializable serializable95 = serializableConsumerRecord93.key();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L + "'", long72 == 100L);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable95 + "' != '" + 35L + "'", serializable95, 35L);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType15, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 97, (long) 10, timestampType15, 0L, 1, (int) (byte) 0, (java.io.Serializable) timestampType60, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        java.lang.Class<?> wildcardClass66 = timestampType65.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + 100.0f + "'", serializable59, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord54.leaderEpoch();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        java.lang.String str57 = serializableConsumerRecord54.toString();
        int int58 = serializableConsumerRecord54.serializedValueSize();
        long long59 = serializableConsumerRecord54.offset();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord54.headers();
        int int61 = serializableConsumerRecord54.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)" + "'", str57, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        java.io.Serializable serializable40 = serializableConsumerRecord39.key();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        java.io.Serializable serializable17 = serializableConsumerRecord13.key();
        long long18 = serializableConsumerRecord13.checksum();
        java.lang.Class<?> wildcardClass19 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord25.headers();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 35, (-1L), (java.lang.reflect.AnnotatedElement) wildcardClass19, headers29);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers29);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.partition();
        java.lang.String str29 = serializableConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType18, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord41.headers();
        java.lang.String str43 = serializableConsumerRecord41.topic();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType50, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers68);
        long long70 = serializableConsumerRecord69.timestamp();
        long long71 = serializableConsumerRecord69.timestamp();
        long long72 = serializableConsumerRecord69.offset();
        java.lang.CharSequence charSequence73 = serializableConsumerRecord69.value();
        int int74 = serializableConsumerRecord69.serializedKeySize();
        java.io.Serializable serializable75 = serializableConsumerRecord69.key();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord69.value();
        org.apache.kafka.common.header.Headers headers77 = serializableConsumerRecord69.headers();
        java.io.Serializable serializable78 = serializableConsumerRecord69.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord85.headers();
        java.lang.String str87 = serializableConsumerRecord85.topic();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord85.timestampType();
        long long89 = serializableConsumerRecord85.timestamp();
        int int90 = serializableConsumerRecord85.serializedValueSize();
        int int91 = serializableConsumerRecord85.serializedKeySize();
        java.io.Serializable serializable92 = serializableConsumerRecord85.key();
        int int93 = serializableConsumerRecord85.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord85.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 32, (long) (byte) -1, (long) 52, timestampType30, (java.lang.Long) 0L, (int) '4', (int) (byte) 1, (java.io.Serializable) timestampType44, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", headers79, intOptional94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ))", 0, (long) ' ', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str29, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str43, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "hi!" + "'", charSequence73, "hi!");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + 10 + "'", serializable75, 10);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + 10 + "'", serializable78, 10);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + (byte) 10 + "'", serializable92, (byte) 10);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(intOptional94);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.partition();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence24 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.partition();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.io.Serializable serializable20 = serializableConsumerRecord17.key();
        long long21 = serializableConsumerRecord17.timestamp();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord17.headers();
        java.io.Serializable serializable23 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType32, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers50);
        long long52 = serializableConsumerRecord51.timestamp();
        java.lang.Class<?> wildcardClass53 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) ' ', (long) (short) 100, (long) (byte) -1, timestampType24, (long) 'a', 35, (-1), (java.io.Serializable) wildcardClass53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        long long72 = serializableConsumerRecord69.offset();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord69.timestampType();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord69.headers();
        int int75 = serializableConsumerRecord69.partition();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord69.leaderEpoch();
        java.lang.CharSequence charSequence77 = serializableConsumerRecord69.value();
        java.lang.Class<?> wildcardClass78 = serializableConsumerRecord69.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) ' ', 0L, (long) (byte) 1, timestampType24, (long) (short) 10, 10, (int) (short) 10, (java.io.Serializable) wildcardClass78, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 97, (long) 'a', (long) 52, timestampType24, 100L, (int) '#', (int) 'a', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null))");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (-1.0d) + "'", serializable20, (-1.0d));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (-1.0d) + "'", serializable23, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.offset();
        long long16 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 1, (long) 1, (java.io.Serializable) wildcardClass18, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable21 = serializableConsumerRecord20.key();
        int int22 = serializableConsumerRecord20.serializedKeySize();
        long long23 = serializableConsumerRecord20.offset();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(serializable21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        long long66 = serializableConsumerRecord64.checksum();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        java.lang.String str68 = serializableConsumerRecord64.toString();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        int int71 = serializableConsumerRecord64.partition();
        java.lang.String str72 = serializableConsumerRecord64.toString();
        int int73 = serializableConsumerRecord64.serializedValueSize();
        java.lang.Class<?> wildcardClass74 = serializableConsumerRecord64.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str68, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str72, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 32 + "'", int73 == 32);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long85 = serializableConsumerRecord84.checksum();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        int int87 = serializableConsumerRecord84.serializedValueSize();
        java.lang.CharSequence charSequence88 = serializableConsumerRecord84.value();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord84.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence88, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 10 + "'", serializable7, (byte) 10);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )" + "'", str11, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        long long12 = serializableConsumerRecord5.offset();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType17, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "");
        int int28 = serializableConsumerRecord27.partition();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord27.headers();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) 0, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.io.Serializable serializable49 = serializableConsumerRecord46.key();
        long long50 = serializableConsumerRecord46.offset();
        int int51 = serializableConsumerRecord46.partition();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        java.lang.Class<?> wildcardClass53 = serializableConsumerRecord46.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord63.headers();
        java.lang.String str65 = serializableConsumerRecord63.topic();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        java.io.Serializable serializable70 = null;
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType76, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int83 = serializableConsumerRecord82.serializedValueSize();
        int int84 = serializableConsumerRecord82.serializedValueSize();
        long long85 = serializableConsumerRecord82.offset();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord82.headers();
        long long87 = serializableConsumerRecord82.offset();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) 'a', (long) '4', (long) 100, timestampType66, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 100, serializable70, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers88);
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord89.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 1, (long) ' ', (long) (short) -1, timestampType30, (long) 97, (int) (short) 1, (int) (byte) 100, (java.lang.reflect.Type) wildcardClass53, (java.lang.Object) timestampType90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) (short) 0, 0L, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 100 + "'", int28 == 100);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1L + "'", long85 == 1L);
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        long long10 = serializableConsumerRecord5.checksum();
        int int11 = serializableConsumerRecord5.partition();
        long long12 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        long long14 = serializableConsumerRecord5.offset();
        java.lang.String str15 = serializableConsumerRecord5.toString();
        java.io.Serializable serializable16 = serializableConsumerRecord5.key();
        long long17 = serializableConsumerRecord5.checksum();
        int int18 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (-1.0d) + "'", serializable16, (-1.0d));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.partition();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord9.headers();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        java.io.Serializable serializable13 = serializableConsumerRecord9.key();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long25 = serializableConsumerRecord24.offset();
        long long26 = serializableConsumerRecord24.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.lang.CharSequence charSequence41 = serializableConsumerRecord39.value();
        long long42 = serializableConsumerRecord39.timestamp();
        long long43 = serializableConsumerRecord39.offset();
        long long44 = serializableConsumerRecord39.checksum();
        long long45 = serializableConsumerRecord39.offset();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord39.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, 32L, timestampType15, (java.lang.Long) 10L, 97, (int) (byte) 100, (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", headers47);
        java.lang.String str49 = serializableConsumerRecord48.topic();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str49, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        long long8 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        long long7 = serializableConsumerRecord5.offset();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(headers9);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType11, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence16);
        java.io.Serializable serializable18 = serializableConsumerRecord17.key();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord17.headers();
        java.io.Serializable serializable20 = serializableConsumerRecord17.key();
        java.io.Serializable serializable21 = serializableConsumerRecord17.key();
        long long22 = serializableConsumerRecord17.offset();
        long long23 = serializableConsumerRecord17.timestamp();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 100 + "'", serializable18, 100);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + 100 + "'", serializable20, 100);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 100 + "'", serializable21, 100);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        long long13 = serializableConsumerRecord9.timestamp();
        long long14 = serializableConsumerRecord9.checksum();
        java.io.Serializable serializable15 = serializableConsumerRecord9.key();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        int int52 = serializableConsumerRecord50.serializedKeySize();
        int int53 = serializableConsumerRecord50.serializedKeySize();
        int int54 = serializableConsumerRecord50.partition();
        java.io.Serializable serializable55 = serializableConsumerRecord50.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType35, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord50);
        java.lang.Class<?> wildcardClass57 = serializableConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 10, (long) 1, (java.io.Serializable) wildcardClass57, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.lang.CharSequence charSequence72 = serializableConsumerRecord70.value();
        long long73 = serializableConsumerRecord70.timestamp();
        int int74 = serializableConsumerRecord70.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord70.leaderEpoch();
        long long76 = serializableConsumerRecord70.offset();
        java.lang.String str77 = serializableConsumerRecord70.toString();
        int int78 = serializableConsumerRecord70.serializedKeySize();
        int int79 = serializableConsumerRecord70.partition();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord70.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>> typeConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) (short) 100, 97L, timestampType17, (long) (byte) 100, (int) '#', (int) (byte) 100, (java.lang.reflect.Type) wildcardClass57, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers80);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 1.0f + "'", serializable15, 1.0f);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str77, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(headers80);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(timestampType21);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType20, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int46 = serializableConsumerRecord45.serializedKeySize();
        java.lang.Class<?> wildcardClass47 = serializableConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (byte) 10, (long) (short) 100, (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        long long62 = serializableConsumerRecord60.checksum();
        java.lang.String str63 = serializableConsumerRecord60.topic();
        java.lang.String str64 = serializableConsumerRecord60.topic();
        java.lang.String str65 = serializableConsumerRecord60.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) '#', (long) (short) 1, serializableConsumerRecord49, serializableConsumerRecord60);
        long long67 = serializableConsumerRecord60.checksum();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        long long18 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        int int9 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (-1.0d) + "'", serializable7, (-1.0d));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long85 = serializableConsumerRecord84.checksum();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord84.leaderEpoch();
        long long87 = serializableConsumerRecord84.checksum();
        java.lang.CharSequence charSequence88 = serializableConsumerRecord84.value();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence88, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.serializedValueSize();
        int int29 = serializableConsumerRecord23.serializedKeySize();
        long long30 = serializableConsumerRecord23.offset();
        long long31 = serializableConsumerRecord23.timestamp();
        long long32 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        long long24 = serializableConsumerRecord10.offset();
        long long25 = serializableConsumerRecord10.timestamp();
        long long26 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass19 = serializable18.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        java.lang.String str66 = serializableConsumerRecord62.topic();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord62.value();
        java.lang.Class<?> wildcardClass68 = charSequence67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("", 10, (long) 35, (java.lang.reflect.GenericDeclaration) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 10.0f + "'", serializable16, 10.0f);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.timestamp();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass17 = intOptional16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) (short) 100, (java.io.Serializable) wildcardClass17, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence20 = serializableConsumerRecord19.value();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord19.headers();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord19.leaderEpoch();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord19.headers();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence20, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable24 = serializableConsumerRecord10.key();
        int int25 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 1 + "'", serializable24, (short) 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 100L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord64.value();
        int int68 = serializableConsumerRecord64.serializedKeySize();
        long long69 = serializableConsumerRecord64.offset();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord64.leaderEpoch();
        long long72 = serializableConsumerRecord64.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", charSequence67, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = serializableConsumerRecord26.value();
        int int28 = serializableConsumerRecord26.serializedKeySize();
        int int29 = serializableConsumerRecord26.serializedKeySize();
        int int30 = serializableConsumerRecord26.partition();
        java.io.Serializable serializable31 = serializableConsumerRecord26.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType11, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord26);
        java.io.Serializable serializable33 = serializableConsumerRecord26.key();
        long long34 = serializableConsumerRecord26.timestamp();
        java.lang.String str35 = serializableConsumerRecord26.topic();
        long long36 = serializableConsumerRecord26.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.partition();
        int int43 = serializableConsumerRecord39.serializedKeySize();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord39.value();
        long long45 = serializableConsumerRecord39.checksum();
        int int46 = serializableConsumerRecord39.serializedValueSize();
        java.io.Serializable serializable47 = serializableConsumerRecord39.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "" + "'", charSequence44, "");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(serializable47);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 10.0f + "'", serializable21, 10.0f);
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        int int21 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 0, (long) 32, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional6 = serializableConsumerRecord5.leaderEpoch();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(intOptional6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        long long18 = serializableConsumerRecord16.offset();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord16.headers();
        java.lang.String str20 = serializableConsumerRecord16.topic();
        java.lang.String str21 = serializableConsumerRecord16.topic();
        long long22 = serializableConsumerRecord16.offset();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long33 = serializableConsumerRecord32.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord32.timestampType();
        java.lang.Class<?> wildcardClass35 = timestampType34.getClass();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable48 = serializableConsumerRecord47.key();
        long long49 = serializableConsumerRecord47.offset();
        int int50 = serializableConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.header.Headers headers51 = serializableConsumerRecord47.headers();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) '4', (long) 1, (long) (byte) -1, timestampType23, (java.lang.Long) 52L, (-1), (int) (short) -1, (java.io.Serializable) timestampType34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers52);
        java.lang.CharSequence charSequence57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int75 = serializableConsumerRecord74.partition();
        int int76 = serializableConsumerRecord74.partition();
        long long77 = serializableConsumerRecord74.timestamp();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord74.leaderEpoch();
        long long79 = serializableConsumerRecord74.checksum();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 10, 0L, timestampType80, (long) 52, 0, (int) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable90 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) 'a', (long) 1, timestampType80, (long) 10, 97, 0, serializable90, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord92.leaderEpoch();
        java.lang.Class<?> wildcardClass94 = intOptional93.getClass();
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum95 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> annotatedElementConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (short) 10, 1L, (java.lang.reflect.AnnotatedElement) wildcardClass94, timestampTypeEnum95);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement> charSequenceConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", (int) (byte) -1, (long) '4', 0L, timestampType34, 0L, (int) (byte) 0, (int) '#', charSequence57, (java.lang.reflect.AnnotatedElement) wildcardClass94);
        java.lang.CharSequence charSequence98 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) 'a', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", charSequence98);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 52L + "'", long22 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.io.Serializable serializable13 = serializableConsumerRecord9.key();
        int int14 = serializableConsumerRecord9.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord9.topic();
        int int16 = serializableConsumerRecord9.serializedKeySize();
        int int17 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional41 = serializableConsumerRecord38.leaderEpoch();
        java.io.Serializable serializable42 = serializableConsumerRecord38.key();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord38.leaderEpoch();
        java.lang.String str44 = serializableConsumerRecord38.topic();
        long long45 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord38.timestampType();
        long long47 = serializableConsumerRecord38.checksum();
        java.lang.String str48 = serializableConsumerRecord38.toString();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord38.headers();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) 52, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        long long67 = serializableConsumerRecord63.offset();
        java.lang.String str68 = serializableConsumerRecord63.topic();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord63.value();
        long long70 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass50, headers71);
        java.lang.Class<?> wildcardClass73 = headers71.getClass();
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        int int87 = serializableConsumerRecord85.serializedKeySize();
        java.io.Serializable serializable88 = serializableConsumerRecord85.key();
        long long89 = serializableConsumerRecord85.offset();
        int int90 = serializableConsumerRecord85.partition();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", (int) (byte) -1, 1L, 52L, timestampType18, (java.lang.Long) 1L, 32, (int) (short) 0, (java.io.Serializable) wildcardClass73, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers91);
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord92.headers();
        java.lang.String str94 = serializableConsumerRecord92.topic();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(timestampType46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + (short) 1 + "'", serializable88, (short) 1);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)" + "'", str94, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)");
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        long long14 = serializableConsumerRecord10.timestamp();
        long long15 = serializableConsumerRecord10.timestamp();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) '4', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long71 = serializableConsumerRecord70.offset();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord70.headers();
        java.lang.String str73 = serializableConsumerRecord70.topic();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        long long15 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        long long9 = serializableConsumerRecord5.offset();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.lang.String str25 = serializableConsumerRecord22.topic();
        int int26 = serializableConsumerRecord22.partition();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int35 = serializableConsumerRecord34.partition();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord34.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord34.timestampType();
        int int38 = serializableConsumerRecord34.serializedValueSize();
        java.lang.String str39 = serializableConsumerRecord34.toString();
        long long40 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) (short) 0, (long) (short) -1, timestampType13, (java.lang.Long) (-1L), (int) '#', 35, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers41);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str39, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(headers41);
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord84.headers();
        java.io.Serializable serializable86 = serializableConsumerRecord84.key();
        java.io.Serializable serializable87 = serializableConsumerRecord84.key();
        java.lang.Class<?> wildcardClass88 = serializableConsumerRecord84.getClass();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + serializable86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable87 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable87.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord23.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        long long30 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord23.timestampType();
        java.lang.String str32 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str32, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.lang.String str22 = serializableConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType11, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long26 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord25.headers();
        int int28 = serializableConsumerRecord25.partition();
        int int29 = serializableConsumerRecord25.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "hi!" + "'", charSequence7, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        int int10 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str13, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long14 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum19 = null;
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable31 = serializableConsumerRecord30.key();
        long long32 = serializableConsumerRecord30.offset();
        int int33 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers> timestampTypeEnumConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) ' ', 0L, (long) (short) -1, timestampType15, (long) 35, 10, (int) (byte) -1, timestampTypeEnum19, headers34);
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType43, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        long long51 = serializableConsumerRecord49.offset();
        int int52 = serializableConsumerRecord49.serializedKeySize();
        java.lang.String str53 = serializableConsumerRecord49.toString();
        long long54 = serializableConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long63 = serializableConsumerRecord62.offset();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        int int66 = serializableConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 100, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 0, (long) (short) 10, (-1L), timestampType15, (java.lang.Long) 35L, (int) (byte) 0, 10, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", headers67);
        long long69 = serializableConsumerRecord68.offset();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord68.value();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str53, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 10L + "'", long69 == 10L);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)" + "'", charSequence70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str23 = serializableConsumerRecord10.toString();
        long long24 = serializableConsumerRecord10.checksum();
        long long25 = serializableConsumerRecord10.timestamp();
        long long26 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 10.0f + "'", serializable21, 10.0f);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str23, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        java.lang.String str24 = serializableConsumerRecord23.toString();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        java.util.Optional<java.lang.Integer> intOptional27 = serializableConsumerRecord23.leaderEpoch();
        long long28 = serializableConsumerRecord23.checksum();
        long long29 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(intOptional27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType11, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        int int19 = serializableConsumerRecord17.serializedKeySize();
        long long20 = serializableConsumerRecord17.timestamp();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 10, (long) '#', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers21);
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable34 = serializableConsumerRecord33.key();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.io.Serializable serializable36 = serializableConsumerRecord33.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) -1, (long) (-1), (java.lang.Object) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Object) serializableConsumerRecord33);
        java.lang.String str38 = serializableConsumerRecord33.topic();
        java.lang.String str39 = serializableConsumerRecord33.topic();
        int int40 = serializableConsumerRecord33.serializedKeySize();
        int int41 = serializableConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord33.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(intOptional42);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.timestamp();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        long long28 = serializableConsumerRecord23.timestamp();
        long long29 = serializableConsumerRecord23.offset();
        int int30 = serializableConsumerRecord23.partition();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        long long32 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNotNull(intOptional24);
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 0, (long) 97, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType22, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int29 = serializableConsumerRecord28.serializedValueSize();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        long long31 = serializableConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord28.headers();
        long long33 = serializableConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord28.headers();
        int int35 = serializableConsumerRecord28.partition();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType40, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int47 = serializableConsumerRecord46.serializedValueSize();
        int int48 = serializableConsumerRecord46.serializedValueSize();
        long long49 = serializableConsumerRecord46.offset();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord46.headers();
        long long51 = serializableConsumerRecord46.offset();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord46.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Iterable<org.apache.kafka.common.header.Header>> objConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 100, (long) 35, 100L, timestampType14, (long) (byte) 1, 52, (-1), (java.lang.Object) int35, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers53);
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType62, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int69 = serializableConsumerRecord68.partition();
        long long70 = serializableConsumerRecord68.checksum();
        long long71 = serializableConsumerRecord68.timestamp();
        java.lang.String str72 = serializableConsumerRecord68.toString();
        long long73 = serializableConsumerRecord68.timestamp();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord68.leaderEpoch();
        java.lang.Class<?> wildcardClass75 = intOptional74.getClass();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord87.headers();
        java.lang.String str90 = serializableConsumerRecord87.topic();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) ' ', (long) 'a', (long) (byte) 100, timestampType14, (java.lang.Long) 97L, (int) '#', (int) 'a', (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers91);
        int int93 = serializableConsumerRecord92.partition();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord92.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str72, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 32 + "'", int93 == 32);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.checksum();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 10 + "'", serializable10, (byte) 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        int int20 = serializableConsumerRecord10.partition();
        long long21 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        int int31 = serializableConsumerRecord29.serializedValueSize();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord29.headers();
        java.lang.String str33 = serializableConsumerRecord29.toString();
        int int34 = serializableConsumerRecord29.partition();
        java.lang.String str35 = serializableConsumerRecord29.topic();
        java.lang.CharSequence charSequence36 = serializableConsumerRecord29.value();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType43, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers61);
        long long63 = serializableConsumerRecord62.timestamp();
        long long64 = serializableConsumerRecord62.timestamp();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord62.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) -1, (long) 'a', (long) (short) -1, timestampType18, (java.lang.Long) 97L, (-1), 32, (java.io.Serializable) timestampType37, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers66);
        java.io.Serializable serializable71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 100, (long) (byte) -1, (long) ' ', timestampType18, (long) '#', (int) '4', (int) (short) 1, serializable71, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        int int74 = serializableConsumerRecord73.partition();
        java.io.Serializable serializable75 = serializableConsumerRecord73.key();
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 100.0f + "'", serializable17, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str33, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertNull(serializable75);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        int int96 = serializableConsumerRecord95.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional97 = serializableConsumerRecord95.leaderEpoch();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord95.value();
        java.io.Serializable serializable99 = serializableConsumerRecord95.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(intOptional97);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", charSequence98, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable99 + "' != '" + (byte) 0 + "'", serializable99, (byte) 0);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        java.io.Serializable serializable17 = serializableConsumerRecord14.key();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + serializable17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        java.io.Serializable serializable26 = serializableConsumerRecord23.key();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        java.lang.String str28 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNull(timestampType25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + 10 + "'", serializable26, 10);
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        int int43 = serializableConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType26, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType26, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType26, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType26, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord78.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord78.key();
        java.lang.String str81 = serializableConsumerRecord78.toString();
        long long82 = serializableConsumerRecord78.offset();
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord78.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 0, (long) 97, (long) (byte) 100, timestampType83, (long) 35, (int) (byte) 0, (int) ' ', (java.io.Serializable) 35L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + 1.0f + "'", serializable80, 1.0f);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", str81, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 35L + "'", long82 == 35L);
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord92.headers();
        long long97 = serializableConsumerRecord92.checksum();
        int int98 = serializableConsumerRecord92.partition();
        int int99 = serializableConsumerRecord92.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 10L + "'", long97 == 10L);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord16.leaderEpoch();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord16.value();
        long long21 = serializableConsumerRecord16.checksum();
        long long22 = serializableConsumerRecord16.timestamp();
        long long23 = serializableConsumerRecord16.timestamp();
        int int24 = serializableConsumerRecord16.serializedKeySize();
        java.lang.String str25 = serializableConsumerRecord16.topic();
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord16.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int33 = serializableConsumerRecord32.partition();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord32.headers();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.Type> intOptionalConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (byte) 0, (long) (byte) 0, intOptional26, (java.lang.reflect.Type) wildcardClass36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 1, (long) 32, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        int int16 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.partition();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intOptional20);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.timestamp();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        long long11 = serializableConsumerRecord5.timestamp();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        int int13 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long14 = serializableConsumerRecord13.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass44, timestampType54);
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType54, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) 100, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord79.headers();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) 1, (long) '4', timestampType16, (long) 1, 32, (int) 'a', (java.io.Serializable) timestampType81, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))");
        java.io.Serializable serializable87 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long95 = serializableConsumerRecord94.checksum();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord94.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (byte) 10, 32L, (long) (short) 10, timestampType81, (java.lang.Long) 1L, (int) (short) 0, 1, serializable87, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers96);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.String str19 = serializableConsumerRecord13.toString();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType32, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int39 = serializableConsumerRecord38.serializedValueSize();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        long long41 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 10, (long) '#', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers42);
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable55 = serializableConsumerRecord54.key();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.io.Serializable serializable57 = serializableConsumerRecord54.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) -1, (long) (-1), (java.lang.Object) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Object) serializableConsumerRecord54);
        java.lang.String str59 = serializableConsumerRecord54.topic();
        long long60 = serializableConsumerRecord54.checksum();
        int int61 = serializableConsumerRecord54.serializedValueSize();
        long long62 = serializableConsumerRecord54.timestamp();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.util.Optional<java.lang.Integer>> intOptionalConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (short) -1, (long) '4', intOptional20, intOptional63);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (short) 1 + "'", serializable57, (short) 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(intOptional63);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        int int12 = serializableConsumerRecord8.partition();
        int int13 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord8.timestampType();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '#', (long) (byte) 10, (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        long long17 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord14.headers();
        long long19 = serializableConsumerRecord14.timestamp();
        long long20 = serializableConsumerRecord14.offset();
        int int21 = serializableConsumerRecord14.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str91 = serializableConsumerRecord88.topic();
        int int92 = serializableConsumerRecord88.serializedValueSize();
        long long93 = serializableConsumerRecord88.offset();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        long long95 = serializableConsumerRecord88.timestamp();
        int int96 = serializableConsumerRecord88.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 32L + "'", long95 == 32L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType31, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType31, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType66, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence73 = serializableConsumerRecord72.value();
        java.io.Serializable serializable74 = serializableConsumerRecord72.key();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType31, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers76);
        java.lang.CharSequence charSequence78 = serializableConsumerRecord77.value();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) 100, (long) (byte) 1, timestampType8, (long) (short) 100, (-1), (int) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", timestampType79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int90 = serializableConsumerRecord89.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord89.timestampType();
        java.io.Serializable serializable92 = serializableConsumerRecord89.key();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord89.timestampType();
        long long94 = serializableConsumerRecord89.offset();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord89.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, 100L, 1L, timestampType79, (long) (short) 100, (int) ' ', (int) 'a', (java.io.Serializable) timestampType95, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord97.timestampType();
        java.lang.CharSequence charSequence99 = serializableConsumerRecord97.value();
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "hi!" + "'", charSequence73, "hi!");
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 1 + "'", serializable74, (short) 1);
        org.junit.Assert.assertNull(timestampType75);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence78, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + 1.0f + "'", serializable92, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence99 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence99, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable29 = serializableConsumerRecord23.key();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        java.io.Serializable serializable32 = serializableConsumerRecord23.key();
        java.lang.String str33 = serializableConsumerRecord23.topic();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 10 + "'", serializable29, 10);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 10 + "'", serializable32, 10);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int9 = serializableConsumerRecord8.partition();
        int int10 = serializableConsumerRecord8.partition();
        long long11 = serializableConsumerRecord8.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord8.leaderEpoch();
        java.lang.String str13 = serializableConsumerRecord8.topic();
        long long14 = serializableConsumerRecord8.checksum();
        int int15 = serializableConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (short) 1, (long) (byte) 0, (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        java.io.Serializable serializable32 = serializableConsumerRecord25.key();
        java.lang.CharSequence charSequence33 = serializableConsumerRecord25.value();
        long long34 = serializableConsumerRecord25.offset();
        java.lang.CharSequence charSequence35 = serializableConsumerRecord25.value();
        java.lang.String str36 = serializableConsumerRecord25.toString();
        long long37 = serializableConsumerRecord25.offset();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType31, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers49);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord61.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.common.record.TimestampType timestampType78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType78, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence85 = serializableConsumerRecord84.value();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType68, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers86);
        java.util.Optional<java.lang.Integer> intOptional88 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType23, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, headers63, headers86, intOptional88);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord16, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers63);
        long long91 = serializableConsumerRecord16.checksum();
        java.lang.Class<?> wildcardClass92 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) -1, (long) 10, (java.io.Serializable) wildcardClass92, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long95 = serializableConsumerRecord94.timestamp();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord94.headers();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        java.io.Serializable serializable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType24, (long) 0, 0, 0, serializable47, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord51.leaderEpoch();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int65 = serializableConsumerRecord64.partition();
        int int66 = serializableConsumerRecord64.partition();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord64.value();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord64.timestampType();
        java.lang.CharSequence charSequence73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) (byte) 0, 100L, timestampType68, 52L, (int) 'a', (int) (short) 100, (java.io.Serializable) 1, charSequence73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.record.TimestampType> objConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, 52L, (java.lang.Object) serializableConsumerRecord51, timestampType68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long88 = serializableConsumerRecord87.checksum();
        long long89 = serializableConsumerRecord87.checksum();
        long long90 = serializableConsumerRecord87.checksum();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord87.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType91, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        java.lang.Class<?> wildcardClass94 = timestampType91.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 100, 35L, (long) 52, timestampType68, (long) (short) 1, (int) (short) 10, (int) (byte) 1, (java.io.Serializable) wildcardClass94, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional97 = serializableConsumerRecord96.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + 100 + "'", serializable53, 100);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(intOptional97);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType21, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType21, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "hi!", headers59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 32L, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.String str63 = serializableConsumerRecord62.toString();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))" + "'", str63, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.timestamp();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.checksum();
        int int25 = serializableConsumerRecord23.serializedValueSize();
        int int26 = serializableConsumerRecord23.serializedKeySize();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord13.timestampType();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord13.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertNull(timestampType90);
        org.junit.Assert.assertNotNull(intOptional91);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        long long21 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedKeySize();
        java.lang.Class<?> wildcardClass67 = serializableConsumerRecord59.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType15, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 97, (long) 10, timestampType15, 0L, 1, (int) (byte) 0, (java.io.Serializable) timestampType60, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord62.timestampType();
        java.io.Serializable serializable65 = serializableConsumerRecord62.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + 100.0f + "'", serializable59, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType17, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord23.timestampType();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType37, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass27, timestampType37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int43 = serializableConsumerRecord42.serializedKeySize();
        java.lang.String str44 = serializableConsumerRecord42.topic();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, (long) (byte) 100, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        long long67 = serializableConsumerRecord63.offset();
        java.lang.String str68 = serializableConsumerRecord63.topic();
        long long69 = serializableConsumerRecord63.offset();
        int int70 = serializableConsumerRecord63.partition();
        int int71 = serializableConsumerRecord63.serializedValueSize();
        long long72 = serializableConsumerRecord63.checksum();
        java.lang.Class<?> wildcardClass73 = serializableConsumerRecord63.getClass();
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        int int87 = serializableConsumerRecord85.serializedKeySize();
        long long88 = serializableConsumerRecord85.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord85.timestampType();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord85.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) (byte) 100, (long) ' ', timestampType49, (java.lang.Long) 35L, 100, (int) (byte) 1, (java.io.Serializable) wildcardClass73, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers90, intOptional91);
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord92.leaderEpoch();
        long long94 = serializableConsumerRecord92.timestamp();
        java.io.Serializable serializable95 = serializableConsumerRecord92.key();
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 1 + "'", serializable25, (short) 1);
        org.junit.Assert.assertNull(timestampType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str44, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable45, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNull(intOptional93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 32L + "'", long94 == 32L);
        org.junit.Assert.assertNotNull(serializable95);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord20.timestampType();
        java.io.Serializable serializable23 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType24, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        long long44 = serializableConsumerRecord40.offset();
        int int45 = serializableConsumerRecord40.partition();
        java.lang.String str46 = serializableConsumerRecord40.topic();
        java.lang.Class<?> wildcardClass47 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 32, 97L, (long) 0, timestampType24, (long) '#', (int) (short) 100, (int) 'a', (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.Type> strConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.Type>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) (short) 1, (long) (byte) -1, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.reflect.Type) wildcardClass47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Object> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) 10, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!))", (java.lang.Object) strConsumerRecord50);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + 1.0f + "'", serializable23, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord23.timestampType();
        int int29 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType18, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence32);
        java.io.Serializable serializable34 = serializableConsumerRecord33.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        int int36 = serializableConsumerRecord33.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.String str50 = serializableConsumerRecord47.toString();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord47.value();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>> objConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 0, (long) '#', (long) (short) 10, timestampType18, 97L, (int) 'a', (-1), (java.lang.Object) serializableConsumerRecord33, intOptional52);
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord33.timestampType();
        long long55 = serializableConsumerRecord33.offset();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord33.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 10 + "'", serializable34, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertNotNull(intOptional23);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        long long16 = serializableConsumerRecord13.offset();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, (-1L), (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int23 = serializableConsumerRecord22.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        long long10 = serializableConsumerRecord5.checksum();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) -1 + "'", serializable12, (byte) -1);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.timestamp();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        long long10 = serializableConsumerRecord5.offset();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        int int93 = serializableConsumerRecord88.serializedValueSize();
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord88.headers();
        long long95 = serializableConsumerRecord88.timestamp();
        int int96 = serializableConsumerRecord88.serializedValueSize();
        org.apache.kafka.common.header.Headers headers97 = serializableConsumerRecord88.headers();
        long long98 = serializableConsumerRecord88.timestamp();
        int int99 = serializableConsumerRecord88.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 32L + "'", long95 == 32L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertNotNull(headers97);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 32L + "'", long98 == 32L);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, (long) (short) 100, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        int int27 = serializableConsumerRecord25.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable29 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord25.timestampType();
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord25.leaderEpoch();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord25.headers();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", (int) (short) -1, (-1L), 0L, timestampType11, (long) 35, (int) (byte) 10, 100, (java.io.Serializable) wildcardClass33, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers36 = serializableConsumerRecord35.headers();
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 1 + "'", serializable29, (short) 1);
        org.junit.Assert.assertNull(timestampType30);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(headers36);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        long long12 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        int int14 = serializableConsumerRecord5.partition();
        long long15 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        int int32 = serializableConsumerRecord25.serializedValueSize();
        long long33 = serializableConsumerRecord25.checksum();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord25.headers();
        long long35 = serializableConsumerRecord25.timestamp();
        java.lang.String str36 = serializableConsumerRecord25.topic();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 100, (long) '#', (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord18.timestampType();
        long long20 = serializableConsumerRecord18.timestamp();
        java.lang.String str21 = serializableConsumerRecord18.topic();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)" + "'", str21, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int18 = serializableConsumerRecord17.partition();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord17.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        int int21 = serializableConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType22, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord37.leaderEpoch();
        long long40 = serializableConsumerRecord37.checksum();
        int int41 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord37.leaderEpoch();
        long long43 = serializableConsumerRecord37.timestamp();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord37.getClass();
        org.apache.kafka.common.header.Headers headers45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', (-1L), (long) 35, timestampType22, (long) 32, (int) (byte) 10, (int) (byte) 10, (java.lang.reflect.AnnotatedElement) wildcardClass44, headers45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 35, (long) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", timestampType22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional6 = serializableConsumerRecord5.leaderEpoch();
        int int7 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertNotNull(intOptional6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.io.Serializable serializable93 = serializableConsumerRecord88.key();
        int int94 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord88.value();
        java.io.Serializable serializable96 = serializableConsumerRecord88.key();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + "hi!" + "'", serializable93, "hi!");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence95, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable96 + "' != '" + "hi!" + "'", serializable96, "hi!");
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        long long86 = serializableConsumerRecord84.timestamp();
        long long87 = serializableConsumerRecord84.offset();
        java.lang.String str88 = serializableConsumerRecord84.toString();
        long long89 = serializableConsumerRecord84.offset();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord84.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str88, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(intOptional90);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        java.io.Serializable serializable7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) -1, serializable7, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long26 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (byte) 0, (long) (short) -1, timestampType27, (long) 52, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) timestampType38, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType45, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers63);
        long long65 = serializableConsumerRecord64.timestamp();
        long long66 = serializableConsumerRecord64.offset();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        int int68 = serializableConsumerRecord64.serializedKeySize();
        java.io.Serializable serializable69 = serializableConsumerRecord64.key();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) (short) 10, (long) '#', (long) 35, timestampType11, (java.lang.Long) 35L, (int) (short) 0, (int) (byte) -1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType38, headers70);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + 10 + "'", serializable69, 10);
        org.junit.Assert.assertNotNull(headers70);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long40 = serializableConsumerRecord39.offset();
        java.lang.String str41 = serializableConsumerRecord39.toString();
        int int42 = serializableConsumerRecord39.partition();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord39.headers();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str41, "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(headers43);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.partition();
        int int14 = serializableConsumerRecord12.serializedKeySize();
        long long15 = serializableConsumerRecord12.checksum();
        long long16 = serializableConsumerRecord12.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord12.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long9 = serializableConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.io.Serializable serializable23 = serializableConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord21.timestampType();
        long long25 = serializableConsumerRecord21.offset();
        java.lang.String str26 = serializableConsumerRecord21.topic();
        long long27 = serializableConsumerRecord21.offset();
        int int28 = serializableConsumerRecord21.serializedValueSize();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord21.value();
        long long30 = serializableConsumerRecord21.checksum();
        java.lang.String str31 = serializableConsumerRecord21.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> intOptionalConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) ' ', (long) 0, intOptional10, serializableConsumerRecord21);
        long long33 = serializableConsumerRecord21.offset();
        int int34 = serializableConsumerRecord21.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        long long8 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        int int11 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str29 = serializableConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord28.timestampType();
        java.lang.CharSequence charSequence35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType30, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence35);
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType50, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType37, (long) '#', 1, 0, (java.io.Serializable) timestampType50, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType50, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord69);
        java.io.Serializable serializable76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str84 = serializableConsumerRecord83.topic();
        int int85 = serializableConsumerRecord83.partition();
        java.lang.String str86 = serializableConsumerRecord83.topic();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord83.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 10, (long) (short) 0, (long) (byte) 1, timestampType50, (java.lang.Long) 10L, 0, (int) (short) 0, serializable76, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers87);
        java.io.Serializable serializable92 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '4', (long) (short) 1, (long) 1, timestampType50, (long) '4', (int) (short) 0, (int) (byte) 10, serializable92, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 100, 52L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(headers87);
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        long long8 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "hi!" + "'", charSequence6, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "hi!" + "'", charSequence7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        long long21 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        int int23 = serializableConsumerRecord10.partition();
        long long24 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional25 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertNotNull(headers26);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        long long19 = serializableConsumerRecord16.offset();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord16.headers();
        long long22 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord16.headers();
        java.lang.Class<?> wildcardClass24 = headers23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, 32L, (java.io.Serializable) wildcardClass24, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) (byte) 0, (java.io.Serializable) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))");
        java.lang.String str29 = serializableConsumerRecord28.topic();
        int int30 = serializableConsumerRecord28.partition();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord28.headers();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str29, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(headers31);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        java.io.Serializable serializable30 = serializableConsumerRecord28.key();
        java.lang.String str31 = serializableConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType40, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int47 = serializableConsumerRecord46.serializedValueSize();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        long long49 = serializableConsumerRecord46.checksum();
        int int50 = serializableConsumerRecord46.partition();
        java.lang.Class<?> wildcardClass51 = serializableConsumerRecord46.getClass();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        long long66 = serializableConsumerRecord63.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord63.headers();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord79.headers();
        java.lang.String str82 = serializableConsumerRecord79.toString();
        java.lang.CharSequence charSequence83 = serializableConsumerRecord79.value();
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord79.timestampType();
        int int85 = serializableConsumerRecord79.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 0, (long) 97, 0L, timestampType32, (java.lang.Long) 35L, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", headers68, intOptional86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) 0, (long) (short) 1, 32L, timestampType15, (long) 97, (int) (byte) 10, (int) (short) 100, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) ' ', (long) 32, (long) 1, timestampType15, (long) (short) -1, 0, (int) (short) 0, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.lang.CharSequence charSequence96 = serializableConsumerRecord95.value();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNull(timestampType67);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str82, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNull(timestampType84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", charSequence96, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(headers10);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 1.0f + "'", serializable9, 1.0f);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 1.0f + "'", serializable13, 1.0f);
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedKeySize();
        int int67 = serializableConsumerRecord59.serializedValueSize();
        long long68 = serializableConsumerRecord59.offset();
        int int69 = serializableConsumerRecord59.partition();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord59.value();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord59.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional71);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        java.lang.CharSequence charSequence38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType33, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence38);
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType40, (java.lang.CharSequence) "");
        long long43 = serializableConsumerRecord42.timestamp();
        java.io.Serializable serializable44 = serializableConsumerRecord42.key();
        long long45 = serializableConsumerRecord42.checksum();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        java.io.Serializable serializable50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', 100L, (long) 32, timestampType46, (long) ' ', 52, (int) (byte) 1, serializable50, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (int) (short) 0, (long) 52, (long) (short) 0, timestampType11, (long) ' ', (int) (byte) 0, 0, (java.io.Serializable) 100L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.lang.String str55 = serializableConsumerRecord54.topic();
        java.lang.String str56 = serializableConsumerRecord54.topic();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)" + "'", str56, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 100, (long) 100, (java.io.Serializable) wildcardClass7, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        java.lang.reflect.GenericDeclaration genericDeclaration11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration> serializableConsumerRecordConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (short) 1, 10L, serializableConsumerRecord9, genericDeclaration11);
        java.lang.CharSequence charSequence13 = serializableConsumerRecord9.value();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(serializable10);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "" + "'", charSequence13, "");
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord17.value();
        long long20 = serializableConsumerRecord17.timestamp();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', (long) 52, (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord23.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord37.timestampType();
        java.io.Serializable serializable40 = serializableConsumerRecord37.key();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord37.headers();
        int int42 = serializableConsumerRecord37.serializedValueSize();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long46 = serializableConsumerRecord45.offset();
        java.lang.CharSequence charSequence47 = serializableConsumerRecord45.value();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        long long60 = serializableConsumerRecord58.checksum();
        java.lang.CharSequence charSequence61 = serializableConsumerRecord58.value();
        long long62 = serializableConsumerRecord58.checksum();
        int int63 = serializableConsumerRecord58.serializedKeySize();
        long long64 = serializableConsumerRecord58.timestamp();
        int int65 = serializableConsumerRecord58.serializedValueSize();
        java.lang.Class<?> wildcardClass66 = serializableConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.io.Serializable> serializableConsumerRecordConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) 1, (long) (byte) 10, timestampType25, (long) (-1), 100, (-1), serializableConsumerRecord45, (java.io.Serializable) wildcardClass66);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + 1.0f + "'", serializable40, 1.0f);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence47, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        int int16 = serializableConsumerRecord14.serializedKeySize();
        int int17 = serializableConsumerRecord14.serializedKeySize();
        int int18 = serializableConsumerRecord14.partition();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord14.leaderEpoch();
        long long20 = serializableConsumerRecord14.checksum();
        long long21 = serializableConsumerRecord14.timestamp();
        int int22 = serializableConsumerRecord14.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord14.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = hi!)", (int) (byte) 1, (long) '4', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", intOptional24);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertNotNull(intOptional24);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        long long68 = serializableConsumerRecord62.timestamp();
        java.lang.String str69 = serializableConsumerRecord62.topic();
        int int70 = serializableConsumerRecord62.partition();
        java.io.Serializable serializable71 = serializableConsumerRecord62.key();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) 'a', (long) (byte) -1, (java.io.Serializable) wildcardClass72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int75 = serializableConsumerRecord74.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(serializable71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        int int22 = serializableConsumerRecord20.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord20.leaderEpoch();
        java.io.Serializable serializable24 = serializableConsumerRecord20.key();
        java.util.Optional<java.lang.Integer> intOptional25 = serializableConsumerRecord20.leaderEpoch();
        java.lang.String str26 = serializableConsumerRecord20.topic();
        long long27 = serializableConsumerRecord20.timestamp();
        java.lang.String str28 = serializableConsumerRecord20.toString();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord20.headers();
        java.lang.String str30 = serializableConsumerRecord20.topic();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord20.headers();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType36, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int43 = serializableConsumerRecord42.serializedValueSize();
        int int44 = serializableConsumerRecord42.serializedValueSize();
        long long45 = serializableConsumerRecord42.offset();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord42.value();
        java.io.Serializable serializable47 = serializableConsumerRecord42.key();
        int int48 = serializableConsumerRecord42.serializedKeySize();
        java.io.Serializable serializable49 = serializableConsumerRecord42.key();
        int int50 = serializableConsumerRecord42.partition();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (byte) 100, (long) 10, 0L, timestampType4, (java.lang.Long) 0L, 97, 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", headers31, intOptional51);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 1 + "'", serializable24, (short) 1);
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str28, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + 10.0f + "'", serializable47, 10.0f);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + 10.0f + "'", serializable49, 10.0f);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intOptional51);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType30, (long) '#', 1, 0, (java.io.Serializable) timestampType43, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (-1), (long) 100, (long) 0, timestampType30, (long) (byte) 10, 10, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable68 = serializableConsumerRecord67.key();
        long long69 = serializableConsumerRecord67.checksum();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord67.leaderEpoch();
        long long71 = serializableConsumerRecord67.offset();
        int int72 = serializableConsumerRecord67.partition();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        java.lang.Class<?> wildcardClass74 = headers73.getClass();
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable87 = serializableConsumerRecord86.key();
        long long88 = serializableConsumerRecord86.checksum();
        java.lang.CharSequence charSequence89 = serializableConsumerRecord86.value();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 1, (long) (byte) 1, timestampType30, (java.lang.Long) 10L, (-1), (int) (byte) 10, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers90);
        long long92 = serializableConsumerRecord91.offset();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + (short) 1 + "'", serializable87, (short) 1);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "hi!" + "'", charSequence89, "hi!");
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord12.headers();
        long long16 = serializableConsumerRecord12.timestamp();
        long long17 = serializableConsumerRecord12.checksum();
        int int18 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable23 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable36 = serializableConsumerRecord35.key();
        java.lang.CharSequence charSequence37 = serializableConsumerRecord35.value();
        long long38 = serializableConsumerRecord35.timestamp();
        java.lang.CharSequence charSequence39 = serializableConsumerRecord35.value();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord35.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int47 = serializableConsumerRecord46.partition();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord46.timestampType();
        int int50 = serializableConsumerRecord46.serializedValueSize();
        java.lang.String str51 = serializableConsumerRecord46.toString();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) (byte) 100, (long) (byte) -1, timestampType19, (java.lang.Long) 0L, 0, 0, serializable23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", headers40, intOptional52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (-1), (long) (-1), (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.io.Serializable serializable56 = serializableConsumerRecord55.key();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str51, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + 0L + "'", serializable56, 0L);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        java.io.Serializable serializable3 = null;
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 10, 0L, serializable3, charSequence4);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "hi!");
        int int24 = serializableConsumerRecord23.serializedKeySize();
        long long25 = serializableConsumerRecord23.checksum();
        java.lang.String str26 = serializableConsumerRecord23.toString();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        long long28 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) (short) 100, (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str41 = serializableConsumerRecord40.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        int int44 = serializableConsumerRecord40.partition();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord40.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, (long) '4', 97L, timestampType29, (long) (-1), (int) (byte) -1, (int) (byte) 100, (java.io.Serializable) timestampType47, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.io.Serializable serializable53 = null;
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        long long73 = serializableConsumerRecord71.checksum();
        java.lang.CharSequence charSequence74 = serializableConsumerRecord71.value();
        java.lang.String str75 = serializableConsumerRecord71.toString();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord71.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass78 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, 10L, (java.io.Serializable) wildcardClass78, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        long long83 = serializableConsumerRecord82.offset();
        int int84 = serializableConsumerRecord82.serializedValueSize();
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord82.headers();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 52, 1L, (long) (byte) 100, timestampType47, (java.lang.Long) 100L, (int) (short) -1, (int) 'a', serializable53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 100, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 97, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null))", headers86);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (-1.0d) + "'", serializable43, (-1.0d));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "hi!" + "'", charSequence74, "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str75, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNull(timestampType77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 10L + "'", long83 == 10L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertNotNull(headers86);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.lang.String str11 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord25.timestampType();
        java.io.Serializable serializable28 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord43.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        java.lang.CharSequence charSequence62 = serializableConsumerRecord60.value();
        long long63 = serializableConsumerRecord60.timestamp();
        java.io.Serializable serializable64 = serializableConsumerRecord60.key();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers65, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType29, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers45, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers65);
        java.lang.Class<?> wildcardClass69 = headers65.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) 52, 1L, timestampType12, 35L, (int) (byte) 0, (int) (short) 100, (java.io.Serializable) wildcardClass69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int72 = serializableConsumerRecord71.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + 1.0f + "'", serializable28, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.offset();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        long long9 = serializableConsumerRecord5.timestamp();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        long long11 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord16.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        int int20 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType21, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str40 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType41, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord43.leaderEpoch();
        java.io.Serializable serializable45 = serializableConsumerRecord43.key();
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord61.headers();
        java.lang.String str64 = serializableConsumerRecord61.toString();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord61.value();
        long long66 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 100, 52L, timestampType21, (java.lang.Long) 35L, (int) ' ', (int) (short) 0, serializable45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", headers67);
        java.io.Serializable serializable70 = serializableConsumerRecord69.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, (long) (byte) -1, serializable70, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertTrue("'" + serializable45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + serializable70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType15, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        long long23 = serializableConsumerRecord21.offset();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        java.lang.CharSequence charSequence36 = serializableConsumerRecord34.value();
        long long37 = serializableConsumerRecord34.timestamp();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord34.leaderEpoch();
        int int39 = serializableConsumerRecord34.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord34.leaderEpoch();
        java.lang.Class<?> wildcardClass41 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement> serializableConsumerRecordConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (-1), (long) ' ', serializableConsumerRecord21, (java.lang.reflect.AnnotatedElement) wildcardClass41);
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str50 = serializableConsumerRecord49.topic();
        int int51 = serializableConsumerRecord49.partition();
        java.io.Serializable serializable52 = serializableConsumerRecord49.key();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (short) 100, (long) 32, (long) (byte) 0, timestampType4, (java.lang.Long) 0L, 10, (int) (byte) -1, (java.io.Serializable) wildcardClass41, charSequence43, headers53);
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord54.headers();
        long long56 = serializableConsumerRecord54.checksum();
        int int57 = serializableConsumerRecord54.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (-1.0d) + "'", serializable52, (-1.0d));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        long long84 = serializableConsumerRecord83.checksum();
        int int85 = serializableConsumerRecord83.serializedKeySize();
        long long86 = serializableConsumerRecord83.offset();
        int int87 = serializableConsumerRecord83.partition();
        long long88 = serializableConsumerRecord83.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord83.timestampType();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 100 + "'", int85 == 100);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L + "'", long86 == 100L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.checksum();
        long long23 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable46 = serializableConsumerRecord45.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        java.lang.String str48 = serializableConsumerRecord45.toString();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord45.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str48, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional27 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertNull(timestampType25);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(intOptional27);
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        java.lang.String str18 = serializableConsumerRecord13.toString();
        long long19 = serializableConsumerRecord13.checksum();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) ' ', (long) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable40 = serializableConsumerRecord39.key();
        long long41 = serializableConsumerRecord39.checksum();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        int int43 = serializableConsumerRecord39.serializedKeySize();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass44, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int54 = serializableConsumerRecord53.partition();
        java.lang.String str55 = serializableConsumerRecord53.topic();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord53.timestampType();
        long long57 = serializableConsumerRecord53.timestamp();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType22, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass44, headers47, headers58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 52, (long) 97, (long) 0, timestampType14, (long) (byte) 1, (int) (byte) 100, 97, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord70.timestampType();
        int int72 = serializableConsumerRecord70.serializedValueSize();
        java.lang.String str73 = serializableConsumerRecord70.topic();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord70.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (short) 100, 1L, (long) (short) 10, timestampType14, (long) 10, (int) (short) -1, 97, (java.io.Serializable) timestampType74, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord76.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional77);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType64, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType64, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType21, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, 52L, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long94 = serializableConsumerRecord93.offset();
        java.lang.String str95 = serializableConsumerRecord93.topic();
        org.apache.kafka.common.record.TimestampType timestampType96 = serializableConsumerRecord93.timestampType();
        int int97 = serializableConsumerRecord93.serializedKeySize();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord93.value();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + timestampType96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence98, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(headers11);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        int int18 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        int int32 = serializableConsumerRecord30.serializedValueSize();
        long long33 = serializableConsumerRecord30.offset();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType19, serializableConsumerRecord30);
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        int int51 = serializableConsumerRecord49.serializedKeySize();
        long long52 = serializableConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass53 = serializableConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        long long61 = serializableConsumerRecord59.timestamp();
        int int62 = serializableConsumerRecord59.serializedKeySize();
        java.lang.String str63 = serializableConsumerRecord59.toString();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', (long) (short) 0, (long) 0, timestampType19, (long) (byte) 1, (int) (short) 100, (int) (byte) -1, (java.lang.reflect.Type) wildcardClass53, (java.lang.Object) headers64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long75 = serializableConsumerRecord74.offset();
        java.io.Serializable serializable76 = serializableConsumerRecord74.key();
        long long77 = serializableConsumerRecord74.checksum();
        int int78 = serializableConsumerRecord74.serializedKeySize();
        java.io.Serializable serializable79 = serializableConsumerRecord74.key();
        int int80 = serializableConsumerRecord74.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) 0, (long) 'a', (long) '#', timestampType19, (long) 'a', 97, (int) (short) 100, (java.io.Serializable) timestampType81, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertEquals("'" + serializable76 + "' != '" + (byte) 10 + "'", serializable76, (byte) 10);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (byte) 10 + "'", serializable79, (byte) 10);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        long long9 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.lang.CharSequence charSequence11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence11);
        java.io.Serializable serializable13 = serializableConsumerRecord12.key();
        int int14 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) 'a', (long) (-1), (long) 97, timestampType15, (long) (short) 100, (int) (byte) -1, (int) (byte) -1, serializable19, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        java.lang.String str37 = serializableConsumerRecord32.topic();
        long long38 = serializableConsumerRecord32.offset();
        int int39 = serializableConsumerRecord32.serializedValueSize();
        long long40 = serializableConsumerRecord32.timestamp();
        int int41 = serializableConsumerRecord32.serializedValueSize();
        java.io.Serializable serializable42 = serializableConsumerRecord32.key();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 100, (long) (byte) 0, timestampType15, headers43);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNotNull(headers43);
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int29 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        java.io.Serializable serializable47 = serializableConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord45.timestampType();
        long long49 = serializableConsumerRecord45.offset();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType19, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable63 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 97, (long) 10, timestampType19, 0L, 1, (int) (byte) 0, (java.io.Serializable) timestampType64, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long76 = serializableConsumerRecord75.timestamp();
        java.lang.String str77 = serializableConsumerRecord75.toString();
        long long78 = serializableConsumerRecord75.offset();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord75.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 100, (long) 52, (long) (byte) -1, timestampType64, (long) (byte) 1, (int) (short) 100, 35, (java.io.Serializable) timestampType79, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long82 = serializableConsumerRecord81.checksum();
        java.lang.String str83 = serializableConsumerRecord81.topic();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 1 + "'", serializable47, (short) 1);
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + 100.0f + "'", serializable63, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str77, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )" + "'", str83, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord16.leaderEpoch();
        long long20 = serializableConsumerRecord16.offset();
        int int21 = serializableConsumerRecord16.partition();
        java.lang.String str22 = serializableConsumerRecord16.topic();
        long long23 = serializableConsumerRecord16.offset();
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord16.headers();
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str35 = serializableConsumerRecord34.topic();
        int int36 = serializableConsumerRecord34.partition();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type> headerIterableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type>("", (int) '4', 35L, headerIterable28, (java.lang.reflect.Type) wildcardClass37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration> headerIterableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, 52L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers24, (java.lang.reflect.GenericDeclaration) wildcardClass37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", 35, (long) 32, (java.lang.reflect.GenericDeclaration) wildcardClass37, intOptional47);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence46, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional47);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.partition();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord19.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        int int23 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType24, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType44, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable48 = serializableConsumerRecord46.key();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        java.lang.String str67 = serializableConsumerRecord64.toString();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        long long69 = serializableConsumerRecord64.timestamp();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 100, 52L, timestampType24, (java.lang.Long) 35L, (int) ' ', (int) (short) 0, serializable48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, (long) (byte) 1, (java.io.Serializable) timestampType24, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 10, (long) 52, (java.io.Serializable) (byte) 1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        long long77 = serializableConsumerRecord76.offset();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + serializable48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 52L + "'", long77 == 52L);
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence10 = serializableConsumerRecord9.value();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord9.value();
        java.lang.String str12 = serializableConsumerRecord9.toString();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord30.headers();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord30.headers();
        java.io.Serializable serializable34 = serializableConsumerRecord30.key();
        int int35 = serializableConsumerRecord30.partition();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord30.getClass();
        org.apache.kafka.common.header.Headers headers38 = null;
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence43);
        java.io.Serializable serializable45 = serializableConsumerRecord44.key();
        java.lang.String str46 = serializableConsumerRecord44.topic();
        long long47 = serializableConsumerRecord44.offset();
        java.io.Serializable serializable48 = serializableConsumerRecord44.key();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord44.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', (long) 32, (long) (byte) 10, timestampType16, (java.lang.Long) 97L, (int) ' ', (int) (short) 1, (java.io.Serializable) wildcardClass36, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers38, intOptional49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable45, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str46, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 32L + "'", long47 == 32L);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional49);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.io.Serializable serializable25 = serializableConsumerRecord22.key();
        int int26 = serializableConsumerRecord22.partition();
        int int27 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType43, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int89 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, (long) (byte) 100, (long) 1, timestampType13, (java.lang.Long) 10L, (-1), 100, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers79, intOptional91);
        long long93 = serializableConsumerRecord92.timestamp();
        long long94 = serializableConsumerRecord92.offset();
        long long95 = serializableConsumerRecord92.timestamp();
        java.lang.CharSequence charSequence96 = serializableConsumerRecord92.value();
        long long97 = serializableConsumerRecord92.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (-1.0d) + "'", serializable25, (-1.0d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 1.0f + "'", serializable42, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L + "'", long95 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence96, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 10L + "'", long97 == 10L);
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        long long46 = serializableConsumerRecord44.checksum();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        int int48 = serializableConsumerRecord44.serializedValueSize();
        long long49 = serializableConsumerRecord44.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long17 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long28 = serializableConsumerRecord27.offset();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 10, (long) (byte) -1, (long) (byte) 10, timestampType18, (-1L), 1, 97, (java.io.Serializable) timestampType29, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        int int39 = serializableConsumerRecord37.serializedValueSize();
        java.io.Serializable serializable40 = serializableConsumerRecord37.key();
        java.io.Serializable serializable41 = serializableConsumerRecord37.key();
        int int42 = serializableConsumerRecord37.serializedValueSize();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type> timestampTypeConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', (long) (byte) 10, timestampType18, (java.lang.reflect.Type) wildcardClass43);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        java.lang.String str60 = serializableConsumerRecord58.topic();
        java.lang.CharSequence charSequence61 = serializableConsumerRecord58.value();
        int int62 = serializableConsumerRecord58.serializedKeySize();
        long long63 = serializableConsumerRecord58.timestamp();
        java.lang.String str64 = serializableConsumerRecord58.toString();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord58.headers();
        java.io.Serializable serializable66 = serializableConsumerRecord58.key();
        java.lang.Class<?> wildcardClass67 = serializable66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )", (-1), (long) (short) 100, (long) (byte) 1, timestampType18, 35L, (int) '#', 0, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (-1.0d) + "'", serializable40, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (-1.0d) + "'", serializable41, (-1.0d));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) -1, 0L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", charSequence6, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        long long10 = serializableConsumerRecord5.timestamp();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        java.lang.String str55 = serializableConsumerRecord54.topic();
        long long56 = serializableConsumerRecord54.checksum();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord54.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.partition();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        java.lang.String str15 = serializableConsumerRecord12.toString();
        long long16 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long28 = serializableConsumerRecord27.offset();
        int int29 = serializableConsumerRecord27.partition();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        java.lang.Class<?> wildcardClass31 = timestampType30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) (byte) -1, 0L, timestampType17, (long) (short) 100, 10, (int) (short) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass31);
        java.lang.Class<?> wildcardClass33 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null))", (int) (short) 100, (long) (byte) 10, (java.io.Serializable) wildcardClass33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", 1, (long) 32, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)");
        org.junit.Assert.assertNotNull(intOptional7);
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord12.key();
        java.lang.String str16 = serializableConsumerRecord12.toString();
        long long17 = serializableConsumerRecord12.checksum();
        java.lang.String str18 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        java.io.Serializable serializable35 = serializableConsumerRecord33.key();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        long long37 = serializableConsumerRecord33.offset();
        java.lang.String str38 = serializableConsumerRecord33.topic();
        long long39 = serializableConsumerRecord33.checksum();
        long long40 = serializableConsumerRecord33.checksum();
        java.lang.String str41 = serializableConsumerRecord33.topic();
        long long42 = serializableConsumerRecord33.timestamp();
        java.lang.String str43 = serializableConsumerRecord33.topic();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord33.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (-1), 32L, timestampType19, (long) 35, 10, (int) (short) 1, (java.io.Serializable) wildcardClass44, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String> annotatedElementConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) 'a', (long) ' ', (java.lang.reflect.AnnotatedElement) wildcardClass44, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (-1.0d) + "'", serializable15, (-1.0d));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 1 + "'", serializable35, (short) 1);
        org.junit.Assert.assertNull(timestampType36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord13.value();
        long long16 = serializableConsumerRecord13.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType25, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers43);
        long long45 = serializableConsumerRecord44.timestamp();
        long long46 = serializableConsumerRecord44.timestamp();
        java.lang.CharSequence charSequence47 = serializableConsumerRecord44.value();
        long long48 = serializableConsumerRecord44.checksum();
        int int49 = serializableConsumerRecord44.partition();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration> objConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", 1, (long) 97, (java.lang.Object) serializableConsumerRecord13, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        long long52 = serializableConsumerRecord13.offset();
        java.lang.String str53 = serializableConsumerRecord13.topic();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) ' ', (long) (byte) 0, (java.io.Serializable) 100L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        int int14 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence27);
        java.io.Serializable serializable29 = serializableConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) (byte) 1, (long) 10, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.lang.String str33 = serializableConsumerRecord32.toString();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 100, (long) (byte) 0, 52L, timestampType16, (long) (short) 100, 0, 10, (java.io.Serializable) timestampType34, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        long long52 = serializableConsumerRecord50.offset();
        java.lang.Class<?> wildcardClass53 = serializableConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = null)", (int) (byte) 1, (long) (byte) 1, (long) 100, timestampType16, (long) 10, 0, (int) '#', (java.io.Serializable) wildcardClass53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str15, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (byte) 10 + "'", serializable29, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))" + "'", str33, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 35, (long) (short) -1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int94 = serializableConsumerRecord93.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        java.io.Serializable serializable96 = serializableConsumerRecord93.key();
        long long97 = serializableConsumerRecord93.timestamp();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord93.value();
        org.apache.kafka.common.record.TimestampType timestampType99 = serializableConsumerRecord93.timestampType();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertEquals("'" + serializable96 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", serializable96, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", charSequence98, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        long long15 = serializableConsumerRecord10.timestamp();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        java.io.Serializable serializable41 = serializableConsumerRecord37.key();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord37.headers();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord37.timestampType();
        long long44 = serializableConsumerRecord37.offset();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord37.headers();
        long long46 = serializableConsumerRecord37.timestamp();
        java.lang.String str47 = serializableConsumerRecord37.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (-1), 32L, (long) 52, timestampType21, (long) (short) 10, 10, (int) (short) 10, serializableConsumerRecord37, (java.lang.CharSequence) "");
        java.io.Serializable serializable53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) 100, 0L, (long) 10, timestampType21, 0L, 97, (int) (byte) 1, serializable53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (-1L), (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str47, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType31, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional49);
        java.io.Serializable serializable54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType31, (long) 0, 0, 0, serializable54, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long59 = serializableConsumerRecord58.offset();
        long long60 = serializableConsumerRecord58.checksum();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        java.io.Serializable serializable89 = serializableConsumerRecord87.key();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord87.timestampType();
        long long91 = serializableConsumerRecord87.offset();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord87.headers();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord87.timestampType();
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType73, 0L, 32, (int) (byte) 10, headers94, serializableConsumerRecord95);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) (short) 100, (long) 10, timestampType10, (java.lang.Long) 10L, 52, (int) (short) 1, (java.io.Serializable) timestampType61, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers94);
        int int98 = serializableConsumerRecord97.serializedValueSize();
        long long99 = serializableConsumerRecord97.checksum();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + (short) 1 + "'", serializable89, (short) 1);
        org.junit.Assert.assertNull(timestampType90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertNull(timestampType93);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 10L + "'", long99 == 10L);
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.offset();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        long long91 = serializableConsumerRecord88.offset();
        long long92 = serializableConsumerRecord88.offset();
        int int93 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord88.leaderEpoch();
        int int95 = serializableConsumerRecord88.partition();
        java.lang.String str96 = serializableConsumerRecord88.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        int int44 = serializableConsumerRecord42.partition();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        java.lang.CharSequence charSequence47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) ' ', (long) ' ', (long) 1, timestampType19, 32L, 97, (-1), (java.io.Serializable) timestampType46, charSequence47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        int int63 = serializableConsumerRecord61.partition();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord61.headers();
        long long65 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType74, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence81 = serializableConsumerRecord80.value();
        int int82 = serializableConsumerRecord80.serializedKeySize();
        java.lang.Class<?> wildcardClass83 = serializableConsumerRecord80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 100, (long) (short) 100, (long) (byte) 100, timestampType66, (long) 10, (int) (short) 100, (int) (short) 0, (java.io.Serializable) wildcardClass83, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) (-1), (long) (short) 0, timestampType46, (long) 0, (int) ' ', 10, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long88 = serializableConsumerRecord87.timestamp();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (-1.0d) + "'", serializable45, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long14 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable19 = null;
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        long long33 = serializableConsumerRecord31.checksum();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord31.value();
        java.lang.String str35 = serializableConsumerRecord31.toString();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord31.timestampType();
        int int38 = serializableConsumerRecord31.partition();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord31.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable48 = serializableConsumerRecord47.key();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.String str50 = serializableConsumerRecord47.topic();
        java.io.Serializable serializable51 = serializableConsumerRecord47.key();
        long long52 = serializableConsumerRecord47.checksum();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 10, (long) (byte) 0, 32L, timestampType15, (java.lang.Long) 52L, (-1), 35, serializable19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers41, intOptional53);
        java.lang.reflect.AnnotatedElement annotatedElement58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long65 = serializableConsumerRecord64.offset();
        java.io.Serializable serializable66 = serializableConsumerRecord64.key();
        long long67 = serializableConsumerRecord64.checksum();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> annotatedElementConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) 10, (long) (short) 100, 97L, timestampType15, (long) 1, (int) (short) 100, (int) ' ', annotatedElement58, serializableConsumerRecord64);
        long long71 = serializableConsumerRecord64.offset();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + 100.0f + "'", serializable48, 100.0f);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str50, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + 100.0f + "'", serializable51, 100.0f);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (byte) 10 + "'", serializable66, (byte) 10);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', 0L, (long) '4', timestampType22, (long) (byte) 10, (int) (short) 0, 100, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int75 = serializableConsumerRecord74.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord74.timestampType();
        java.io.Serializable serializable77 = serializableConsumerRecord74.key();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 100 + "'", serializable77, (short) 100);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        long long12 = serializableConsumerRecord9.offset();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        java.io.Serializable serializable38 = serializableConsumerRecord36.key();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord36.timestampType();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord36.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType50, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass40, timestampType50);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        java.lang.Class<?> wildcardClass71 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType50, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass71, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord73.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType15, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType74, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.partition();
        long long79 = serializableConsumerRecord76.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertNull(timestampType39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence77, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 97L + "'", long79 == 97L);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        long long18 = serializableConsumerRecord10.offset();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        long long18 = serializableConsumerRecord16.checksum();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord16.leaderEpoch();
        long long20 = serializableConsumerRecord16.offset();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord16.headers();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 100, (long) (byte) 100, (java.io.Serializable) wildcardClass22, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) -1, (long) 100, (java.io.Serializable) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        long long11 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        long long14 = serializableConsumerRecord5.checksum();
        java.lang.String str15 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 1.0f + "'", serializable13, 1.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertNotNull(headers28);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        int int15 = serializableConsumerRecord10.partition();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        java.lang.String str19 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType32, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers50);
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType69, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers87);
        java.util.Optional<java.lang.Integer> intOptional89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType24, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers50, headers64, headers87, intOptional89);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord17, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers64);
        long long92 = serializableConsumerRecord17.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 0, (long) (short) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", serializableConsumerRecord17);
        long long94 = serializableConsumerRecord17.offset();
        int int95 = serializableConsumerRecord17.partition();
        long long96 = serializableConsumerRecord17.checksum();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType26, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType4, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers44);
        long long47 = serializableConsumerRecord46.checksum();
        int int48 = serializableConsumerRecord46.partition();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord46.headers();
        int int50 = serializableConsumerRecord46.serializedValueSize();
        int int51 = serializableConsumerRecord46.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        long long12 = serializableConsumerRecord5.checksum();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        int int13 = serializableConsumerRecord10.partition();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.checksum();
        long long19 = serializableConsumerRecord10.checksum();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord32.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable50 = serializableConsumerRecord46.key();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType57, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int64 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType18, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers52, intOptional65);
        long long67 = serializableConsumerRecord66.offset();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        long long69 = serializableConsumerRecord66.offset();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long80 = serializableConsumerRecord79.timestamp();
        java.lang.String str81 = serializableConsumerRecord79.toString();
        long long82 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 35, (long) (byte) 0, (long) 0, timestampType70, (long) 0, (int) ' ', (int) (short) 100, (java.io.Serializable) timestampType83, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) (byte) 1, 100L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        long long88 = serializableConsumerRecord87.timestamp();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str81, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) '4', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long71 = serializableConsumerRecord70.offset();
        long long72 = serializableConsumerRecord70.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 52L + "'", long71 == 52L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType8, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int15 = serializableConsumerRecord14.serializedValueSize();
        long long16 = serializableConsumerRecord14.offset();
        int int17 = serializableConsumerRecord14.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) ' ', (long) (short) 10, (java.io.Serializable) 1, serializableConsumerRecord14);
        java.io.Serializable serializable19 = serializableConsumerRecord14.key();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord14.value();
        int int21 = serializableConsumerRecord14.partition();
        long long22 = serializableConsumerRecord14.offset();
        int int23 = serializableConsumerRecord14.partition();
        java.lang.String str24 = serializableConsumerRecord14.toString();
        java.lang.String str25 = serializableConsumerRecord14.toString();
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 10.0f + "'", serializable19, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str24, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str25, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType14, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        int int22 = serializableConsumerRecord20.serializedKeySize();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord20.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence23, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        long long15 = serializableConsumerRecord13.checksum();
        long long16 = serializableConsumerRecord13.timestamp();
        long long17 = serializableConsumerRecord13.offset();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass19 = charSequence18.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", (int) (short) 100, 97L, (java.io.Serializable) wildcardClass19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord21.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        java.lang.reflect.GenericDeclaration genericDeclaration3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String> genericDeclarationConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", 97, (long) (byte) 1, genericDeclaration3, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str13 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType44, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional62);
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType69, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence76 = serializableConsumerRecord75.value();
        int int77 = serializableConsumerRecord75.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord75.leaderEpoch();
        java.io.Serializable serializable79 = serializableConsumerRecord75.key();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType30, (java.lang.Long) 10L, (int) '#', 35, timestampType44, "hi!", headers80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType13, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType30, (java.lang.CharSequence) "");
        long long86 = serializableConsumerRecord85.timestamp();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord85.headers();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord85.timestampType();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 35L + "'", long86 == 35L);
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        int int15 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 32L, (long) (short) -1, timestampType18, 10L, (int) (byte) 100, 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str34 = serializableConsumerRecord33.topic();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        java.io.Serializable serializable36 = serializableConsumerRecord33.key();
        int int37 = serializableConsumerRecord33.partition();
        int int38 = serializableConsumerRecord33.serializedValueSize();
        int int39 = serializableConsumerRecord33.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int52 = serializableConsumerRecord51.partition();
        int int53 = serializableConsumerRecord51.partition();
        java.lang.String str54 = serializableConsumerRecord51.toString();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (-1), (long) (short) 1, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int58 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType64, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int71 = serializableConsumerRecord70.serializedValueSize();
        int int72 = serializableConsumerRecord70.serializedKeySize();
        long long73 = serializableConsumerRecord70.timestamp();
        java.lang.String str74 = serializableConsumerRecord70.toString();
        long long75 = serializableConsumerRecord70.offset();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', 100L, (long) (byte) 1, timestampType18, (java.lang.Long) 32L, (int) (byte) -1, 35, (java.io.Serializable) timestampType41, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", headers59, intOptional76);
        java.lang.Class<?> wildcardClass78 = timestampType41.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (-1.0d) + "'", serializable36, (-1.0d));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str54, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str74, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord11.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord11.timestampType();
        long long16 = serializableConsumerRecord11.offset();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, (long) 100, (java.io.Serializable) timestampType17, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        int int32 = serializableConsumerRecord30.serializedValueSize();
        long long33 = serializableConsumerRecord30.offset();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord30.value();
        java.io.Serializable serializable35 = serializableConsumerRecord30.key();
        int int36 = serializableConsumerRecord30.serializedKeySize();
        int int37 = serializableConsumerRecord30.serializedKeySize();
        java.lang.String str38 = serializableConsumerRecord30.topic();
        int int39 = serializableConsumerRecord30.partition();
        java.lang.CharSequence charSequence40 = serializableConsumerRecord30.value();
        java.lang.String str41 = serializableConsumerRecord30.toString();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord30.timestampType();
        int int43 = serializableConsumerRecord30.serializedKeySize();
        int int44 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers> timestampTypeEnumConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 35, (long) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType17, headers45);
        java.lang.Class<?> wildcardClass47 = timestampType17.getClass();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 1.0f + "'", serializable14, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + 10.0f + "'", serializable35, 10.0f);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        long long20 = serializableConsumerRecord10.offset();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        int int50 = serializableConsumerRecord48.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType33, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional51, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass55 = intOptionalConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 10, 0L, (long) (short) 10, timestampType16, (long) (short) -1, (int) '#', (int) (short) -1, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) (byte) -1, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        int int23 = serializableConsumerRecord10.serializedKeySize();
        long long24 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str24 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        java.lang.CharSequence charSequence30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType25, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence30);
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType32, (java.lang.CharSequence) "");
        java.lang.Object obj38 = null;
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        java.io.Serializable serializable51 = serializableConsumerRecord49.key();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord49.timestampType();
        long long53 = serializableConsumerRecord49.offset();
        java.lang.Class<?> wildcardClass54 = serializableConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration> objConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 100, (-1L), (long) (byte) -1, timestampType32, (long) 97, (int) (byte) 1, (int) (byte) 1, obj38, (java.lang.reflect.GenericDeclaration) wildcardClass54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 10L, (java.io.Serializable) wildcardClass54, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.io.Serializable serializable58 = serializableConsumerRecord57.key();
        int int59 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", 100, 100L, (long) 10, timestampType60, (long) ' ', 97, 35, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 1 + "'", serializable51, (short) 1);
        org.junit.Assert.assertNull(timestampType52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(serializable58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.lang.String str73 = serializableConsumerRecord71.topic();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) 1, (long) (short) 0, (java.io.Serializable) timestampType74, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str86 = serializableConsumerRecord85.topic();
        int int87 = serializableConsumerRecord85.partition();
        java.lang.String str88 = serializableConsumerRecord85.topic();
        java.lang.String str89 = serializableConsumerRecord85.topic();
        int int90 = serializableConsumerRecord85.serializedValueSize();
        long long91 = serializableConsumerRecord85.timestamp();
        long long92 = serializableConsumerRecord85.checksum();
        java.lang.Class<?> wildcardClass93 = serializableConsumerRecord85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 35, (long) '#', (-1L), timestampType74, (long) '#', (int) (short) 100, 1, (java.io.Serializable) wildcardClass93, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.lang.Class<?> wildcardClass96 = serializableConsumerRecord95.getClass();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence72, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hi!" + "'", str73, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        java.lang.String str26 = serializableConsumerRecord23.topic();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        long long29 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        long long9 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord13.value();
        int int17 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord13.leaderEpoch();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 0, (long) (byte) 10, serializableConsumerRecord13, timestampType26);
        long long28 = serializableConsumerRecord13.offset();
        long long29 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord13.headers();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(timestampType30);
        org.junit.Assert.assertNotNull(headers31);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord92.value();
        int int95 = serializableConsumerRecord92.serializedKeySize();
        int int96 = serializableConsumerRecord92.serializedValueSize();
        java.lang.CharSequence charSequence97 = serializableConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence97 + "' != '" + "hi!" + "'", charSequence97, "hi!");
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str15 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + false + "'", serializable13, false);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long13 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord12.headers();
        long long15 = serializableConsumerRecord12.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable32 = serializableConsumerRecord31.key();
        long long33 = serializableConsumerRecord31.checksum();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        int int35 = serializableConsumerRecord31.serializedKeySize();
        long long36 = serializableConsumerRecord31.checksum();
        java.lang.String str37 = serializableConsumerRecord31.toString();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord31.headers();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        long long51 = serializableConsumerRecord49.checksum();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord49.value();
        java.lang.String str53 = serializableConsumerRecord49.toString();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord49.leaderEpoch();
        long long55 = serializableConsumerRecord49.timestamp();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 100L, (long) ' ', timestampType16, (java.lang.Long) 32L, 100, (int) (byte) 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers38, headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 32, (long) 32, (java.io.Serializable) (byte) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null))");
        long long60 = serializableConsumerRecord59.timestamp();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str37, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str53, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional9);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.String str81 = serializableConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord58.leaderEpoch();
        int int83 = serializableConsumerRecord58.partition();
        int int84 = serializableConsumerRecord58.serializedKeySize();
        long long85 = serializableConsumerRecord58.timestamp();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord58.headers();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(headers86);
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long14 = serializableConsumerRecord13.timestamp();
        java.lang.String str15 = serializableConsumerRecord13.toString();
        int int16 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        long long35 = serializableConsumerRecord31.offset();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 100, (long) 'a', (long) (short) 1, timestampType17, (long) 100, (int) ' ', (int) (byte) 10, (java.io.Serializable) wildcardClass36, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        java.io.Serializable serializable60 = serializableConsumerRecord58.key();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord58.timestampType();
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType72, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass62, timestampType72);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 52L, (java.io.Serializable) timestampType72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        java.lang.Class<?> wildcardClass78 = timestampType72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", (int) 'a', (long) (short) 100, 97L, timestampType17, (long) '#', 100, (int) (byte) -1, (java.io.Serializable) timestampType72, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        long long81 = serializableConsumerRecord80.timestamp();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertNull(timestampType61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 97L + "'", long81 == 97L);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        java.lang.String str16 = serializableConsumerRecord13.toString();
        long long17 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable22 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str35 = serializableConsumerRecord34.toString();
        java.io.Serializable serializable36 = serializableConsumerRecord34.key();
        java.lang.CharSequence charSequence37 = serializableConsumerRecord34.value();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord34.leaderEpoch();
        int int39 = serializableConsumerRecord34.serializedKeySize();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        long long55 = serializableConsumerRecord51.offset();
        java.lang.String str56 = serializableConsumerRecord51.topic();
        long long57 = serializableConsumerRecord51.checksum();
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord51.timestampType();
        java.lang.CharSequence charSequence59 = serializableConsumerRecord51.value();
        java.util.Optional<java.lang.Integer> intOptional60 = serializableConsumerRecord51.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) -1, (long) 35, (long) 52, timestampType18, (java.lang.Long) 52L, (int) (byte) 100, 97, serializable22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers40, intOptional60);
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        java.io.Serializable serializable81 = serializableConsumerRecord79.key();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord79.timestampType();
        long long83 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers84, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass87 = headerIterableConsumerRecord86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 1, (long) (byte) 100, (long) 97, timestampType62, (long) (short) 10, (int) (byte) 0, (int) '#', (java.io.Serializable) wildcardClass87, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.lang.Class<?> wildcardClass90 = timestampType62.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str35, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + 10.0f + "'", serializable36, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNull(timestampType58);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertNull(timestampType82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.lang.CharSequence charSequence57 = serializableConsumerRecord54.value();
        int int58 = serializableConsumerRecord54.serializedValueSize();
        java.io.Serializable serializable59 = serializableConsumerRecord54.key();
        java.lang.CharSequence charSequence60 = serializableConsumerRecord54.value();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(serializable59);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType20, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) (byte) 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass48 = serializableConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 0, 0L, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord50.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(intOptional51);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        long long8 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        long long11 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "hi!" + "'", charSequence6, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "hi!" + "'", charSequence7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        long long10 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        long long12 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord44.headers();
        java.lang.String str48 = serializableConsumerRecord44.topic();
        long long49 = serializableConsumerRecord44.checksum();
        java.lang.CharSequence charSequence50 = serializableConsumerRecord44.value();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence46, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        java.lang.String str32 = serializableConsumerRecord30.topic();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord30.getClass();
        java.lang.CharSequence charSequence34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType14, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass33, charSequence34);
        int int36 = serializableConsumerRecord35.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord35.leaderEpoch();
        int int38 = serializableConsumerRecord35.serializedValueSize();
        java.lang.CharSequence charSequence39 = serializableConsumerRecord35.value();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNull(charSequence39);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 10.0f + "'", serializable19, 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.offset();
        long long19 = serializableConsumerRecord10.timestamp();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + false + "'", serializable10, false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        long long20 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType22, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers75 = serializableConsumerRecord74.headers();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord74.headers();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(headers76);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        long long11 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord58.headers();
        int int81 = serializableConsumerRecord58.serializedKeySize();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord58.value();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable18 = null;
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable31 = serializableConsumerRecord30.key();
        long long32 = serializableConsumerRecord30.checksum();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord30.leaderEpoch();
        int int34 = serializableConsumerRecord30.serializedKeySize();
        int int35 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.header.Headers headers36 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) 0, 52L, timestampType14, (java.lang.Long) 35L, 35, 10, serializable18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers36);
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        java.lang.CharSequence charSequence49 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence49);
        long long51 = serializableConsumerRecord50.offset();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord50.leaderEpoch();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord50.headers();
        java.lang.String str54 = serializableConsumerRecord50.toString();
        long long55 = serializableConsumerRecord50.checksum();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (short) -1, (long) 1, (java.io.Serializable) timestampType56, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 10, 10L, 32L, timestampType38, (long) (byte) 10, 0, (int) (byte) 100, (java.io.Serializable) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        java.lang.Class<?> wildcardClass61 = serializableConsumerRecord60.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str54, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType13, (java.lang.Long) 10L, (int) '#', 35, timestampType27, "hi!", headers63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = 100, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 0, (long) (-1), (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNotNull(headers63);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType22, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        long long75 = serializableConsumerRecord74.checksum();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord74.headers();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 97L + "'", long75 == 97L);
        org.junit.Assert.assertNotNull(headers76);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord28.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType12, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers30);
        long long32 = serializableConsumerRecord31.timestamp();
        long long33 = serializableConsumerRecord31.timestamp();
        long long34 = serializableConsumerRecord31.offset();
        long long35 = serializableConsumerRecord31.checksum();
        long long36 = serializableConsumerRecord31.checksum();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) 1, (long) ' ', timestampType4, 100L, (-1), (int) '#', (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        long long41 = serializableConsumerRecord39.timestamp();
        java.lang.String str42 = serializableConsumerRecord39.topic();
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 32L + "'", long41 == 32L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str42, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence26 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord23.headers();
        java.lang.String str28 = serializableConsumerRecord23.topic();
        long long29 = serializableConsumerRecord23.offset();
        int int30 = serializableConsumerRecord23.serializedValueSize();
        long long31 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        long long90 = serializableConsumerRecord88.checksum();
        int int91 = serializableConsumerRecord88.serializedValueSize();
        long long92 = serializableConsumerRecord88.offset();
        long long93 = serializableConsumerRecord88.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord45.timestampType();
        java.lang.String str47 = serializableConsumerRecord45.topic();
        int int48 = serializableConsumerRecord45.partition();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord45.value();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord45.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str47, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 10.0f + "'", serializable19, 10.0f);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 1.0f + "'", serializable9, 1.0f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord16.key();
        long long20 = serializableConsumerRecord16.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long46 = serializableConsumerRecord45.timestamp();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        long long48 = serializableConsumerRecord45.timestamp();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord45.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        java.io.Serializable serializable62 = serializableConsumerRecord60.key();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord60.timestampType();
        long long64 = serializableConsumerRecord60.offset();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord60.headers();
        java.lang.String str66 = serializableConsumerRecord60.toString();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord60.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 32, 0L, (long) 32, timestampType21, (java.lang.Long) 0L, (int) (short) -1, 52, serializableConsumerRecord25, intOptional34, headers49, intOptional68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) 1, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long80 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable88 = serializableConsumerRecord87.key();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord87.headers();
        java.lang.String str90 = serializableConsumerRecord87.topic();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord87.timestampType();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object> strComparableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 100, 10L, (long) '4', timestampType21, (java.lang.Long) 0L, (int) (byte) 1, 35, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (java.lang.Object) serializableConsumerRecord79, headers92);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) (short) 100, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        java.io.Serializable serializable96 = serializableConsumerRecord95.key();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (-1.0d) + "'", serializable19, (-1.0d));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNull(timestampType63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + 100.0f + "'", serializable88, 100.0f);
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str90, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertTrue("'" + serializable96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord44.leaderEpoch();
        long long46 = serializableConsumerRecord44.checksum();
        java.lang.String str47 = serializableConsumerRecord44.topic();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        long long50 = serializableConsumerRecord44.timestamp();
        java.lang.String str51 = serializableConsumerRecord44.topic();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str47, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str51, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        int int22 = serializableConsumerRecord20.partition();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 35, (long) 'a', (java.io.Serializable) wildcardClass23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long85 = serializableConsumerRecord84.checksum();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional87 = serializableConsumerRecord84.leaderEpoch();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord84.headers();
        long long89 = serializableConsumerRecord84.checksum();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord84.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(intOptional87);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.checksum();
        int int89 = serializableConsumerRecord13.partition();
        int int90 = serializableConsumerRecord13.serializedValueSize();
        int int91 = serializableConsumerRecord13.partition();
        int int92 = serializableConsumerRecord13.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord13.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(intOptional93);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType10, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedKeySize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord16.headers();
        java.lang.String str19 = serializableConsumerRecord16.topic();
        long long20 = serializableConsumerRecord16.timestamp();
        java.io.Serializable serializable21 = serializableConsumerRecord16.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 1.0d + "'", serializable21, 1.0d);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.partition();
        int int29 = serializableConsumerRecord23.partition();
        int int30 = serializableConsumerRecord23.serializedValueSize();
        java.lang.String str31 = serializableConsumerRecord23.toString();
        java.io.Serializable serializable32 = serializableConsumerRecord23.key();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 10 + "'", serializable32, 10);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        java.io.Serializable serializable17 = serializableConsumerRecord13.key();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord13.leaderEpoch();
        java.lang.String str19 = serializableConsumerRecord13.topic();
        long long20 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord13.timestampType();
        long long22 = serializableConsumerRecord13.checksum();
        java.lang.String str23 = serializableConsumerRecord13.toString();
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) 52, (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        long long28 = serializableConsumerRecord27.checksum();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord27.headers();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord27.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        int int25 = serializableConsumerRecord23.partition();
        int int26 = serializableConsumerRecord23.partition();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        long long20 = serializableConsumerRecord10.checksum();
        long long21 = serializableConsumerRecord10.checksum();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord88.timestampType();
        int int93 = serializableConsumerRecord88.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 100 + "'", int93 == 100);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        long long34 = serializableConsumerRecord31.offset();
        int int35 = serializableConsumerRecord31.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord31.timestampType();
        int int37 = serializableConsumerRecord31.serializedKeySize();
        java.io.Serializable serializable38 = serializableConsumerRecord31.key();
        java.lang.Class<?> wildcardClass39 = serializable38.getClass();
        java.lang.CharSequence charSequence40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) 97, (long) (byte) 10, timestampType17, (long) 100, 35, (int) ' ', serializable38, charSequence40);
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int55 = serializableConsumerRecord54.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord54.timestampType();
        java.io.Serializable serializable57 = serializableConsumerRecord54.key();
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord54.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType58, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long61 = serializableConsumerRecord60.checksum();
        java.lang.String str62 = serializableConsumerRecord60.topic();
        long long63 = serializableConsumerRecord60.checksum();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord60.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String> timestampTypeEnumConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, 0L, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> timestampTypeConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", (int) 'a', (long) (byte) -1, timestampType42, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65);
        java.io.Serializable serializable72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 100, (long) (byte) 10, (long) 10, timestampType42, (long) (short) 100, 100, 10, serializable72, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        int int75 = serializableConsumerRecord74.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(timestampType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + 1.0f + "'", serializable57, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str62, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.timestamp();
        long long13 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        long long94 = serializableConsumerRecord88.checksum();
        int int95 = serializableConsumerRecord88.partition();
        long long96 = serializableConsumerRecord88.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (byte) -1, (long) 100, (java.io.Serializable) timestampType9, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord11.leaderEpoch();
        int int14 = serializableConsumerRecord11.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        int int9 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord32.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable50 = serializableConsumerRecord46.key();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType57, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int64 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType18, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers52, intOptional65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable> strComparableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable>("hi!", (int) (short) -1, (long) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass76 = strComparableConsumerRecord75.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 97, (-1L), (long) 97, timestampType18, (long) (byte) 100, (int) (short) 100, (int) '#', (java.io.Serializable) wildcardClass76, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord78.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) '4', (long) 0, (java.io.Serializable) timestampType79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        java.io.Serializable serializable82 = serializableConsumerRecord81.key();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord25.timestampType();
        java.io.Serializable serializable29 = serializableConsumerRecord25.key();
        int int30 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', (long) 32, (long) (-1), timestampType14, (java.lang.Long) 100L, 52, 100, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers40);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (-1.0d) + "'", serializable29, (-1.0d));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(headers40);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType30, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional48, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass52 = intOptionalConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType13, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 0, (long) '4', (java.io.Serializable) 10, (java.lang.CharSequence) "");
        java.lang.String str57 = serializableConsumerRecord56.toString();
        java.io.Serializable serializable58 = serializableConsumerRecord56.key();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )" + "'", str57, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + 10 + "'", serializable58, 10);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType11, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence16);
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.String str20 = serializableConsumerRecord17.toString();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        long long20 = serializableConsumerRecord10.timestamp();
        long long21 = serializableConsumerRecord10.timestamp();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord12.leaderEpoch();
        int int15 = serializableConsumerRecord12.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord12.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        java.io.Serializable serializable56 = serializableConsumerRecord54.key();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord54.timestampType();
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType68, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass58, timestampType68);
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        java.io.Serializable serializable87 = serializableConsumerRecord85.key();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord85.timestampType();
        java.lang.Class<?> wildcardClass89 = serializableConsumerRecord85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType68, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass89, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 1, (long) 52, (long) (byte) 1, timestampType14, 32L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) 52L, (java.lang.CharSequence) "");
        int int94 = serializableConsumerRecord93.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord93.timestampType();
        int int96 = serializableConsumerRecord93.serializedValueSize();
        java.lang.String str97 = serializableConsumerRecord93.toString();
        int int98 = serializableConsumerRecord93.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 1 + "'", serializable56, (short) 1);
        org.junit.Assert.assertNull(timestampType57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + (short) 1 + "'", serializable87, (short) 1);
        org.junit.Assert.assertNull(timestampType88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )" + "'", str97, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.partition();
        int int43 = serializableConsumerRecord39.serializedKeySize();
        int int44 = serializableConsumerRecord39.partition();
        long long45 = serializableConsumerRecord39.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 100 + "'", int42 == 100);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        long long69 = serializableConsumerRecord67.checksum();
        java.lang.Class<?> wildcardClass70 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) 1, (java.io.Serializable) wildcardClass70, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        int int62 = serializableConsumerRecord59.partition();
        java.lang.String str63 = serializableConsumerRecord59.topic();
        int int64 = serializableConsumerRecord59.serializedKeySize();
        int int65 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence4);
        long long6 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord9.key();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType21, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        int int29 = serializableConsumerRecord27.serializedKeySize();
        long long30 = serializableConsumerRecord27.checksum();
        int int31 = serializableConsumerRecord27.partition();
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord27.getClass();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        int int46 = serializableConsumerRecord44.serializedKeySize();
        long long47 = serializableConsumerRecord44.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord60.headers();
        java.lang.String str63 = serializableConsumerRecord60.toString();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord60.value();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord60.timestampType();
        int int66 = serializableConsumerRecord60.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 0, (long) 97, 0L, timestampType13, (java.lang.Long) 35L, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", headers49, intOptional67);
        int int69 = serializableConsumerRecord68.serializedValueSize();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord68.value();
        int int71 = serializableConsumerRecord68.partition();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)" + "'", charSequence70, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType21, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence28 = serializableConsumerRecord27.value();
        long long29 = serializableConsumerRecord27.checksum();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord27.value();
        java.lang.String str31 = serializableConsumerRecord27.toString();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord27.leaderEpoch();
        long long33 = serializableConsumerRecord27.timestamp();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord27.headers();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord45.leaderEpoch();
        java.io.Serializable serializable49 = serializableConsumerRecord45.key();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 100, (long) (short) 100, (long) 32, timestampType11, (java.lang.Long) 32L, (int) (byte) 10, (int) 'a', (java.io.Serializable) 52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers34, intOptional50);
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord51.leaderEpoch();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord51.headers();
        java.io.Serializable serializable54 = serializableConsumerRecord51.key();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord51.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str31, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + 52 + "'", serializable54, 52);
        org.junit.Assert.assertNotNull(intOptional55);
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        int int11 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        java.io.Serializable serializable7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) 10, serializable7, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord26.headers();
        java.lang.String str28 = serializableConsumerRecord26.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord26.timestampType();
        java.lang.Comparable<java.lang.String> strComparable34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str49 = serializableConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord48.timestampType();
        java.lang.CharSequence charSequence55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType50, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence55);
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType67, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int74 = serializableConsumerRecord73.serializedValueSize();
        int int75 = serializableConsumerRecord73.serializedKeySize();
        int int76 = serializableConsumerRecord73.serializedKeySize();
        org.apache.kafka.common.header.Headers headers77 = serializableConsumerRecord73.headers();
        org.apache.kafka.common.record.TimestampType timestampType82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType82, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable89 = serializableConsumerRecord88.key();
        long long90 = serializableConsumerRecord88.checksum();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType57, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers77, intOptional91);
        java.util.Optional<java.lang.Integer> intOptional93 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) -1, (long) 35, timestampType29, (java.lang.Long) 52L, (int) (byte) 1, (int) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", strComparable34, headers77, intOptional93);
        java.lang.Class<?> wildcardClass95 = headers77.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 35, 52L, (java.io.Serializable) wildcardClass95, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 1, serialized key size = 52, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", 100, 32L, (long) (short) 100, timestampType10, (long) (byte) 0, (int) (short) 10, 52, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 32, leaderEpoch = null, offset = 10, null = 0, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + (short) 1 + "'", serializable89, (short) 1);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 0, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long70 = serializableConsumerRecord69.offset();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.lang.String str22 = serializableConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType11, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord25.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional26);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        long long21 = serializableConsumerRecord17.offset();
        java.lang.String str22 = serializableConsumerRecord17.topic();
        long long23 = serializableConsumerRecord17.checksum();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence25 = serializableConsumerRecord17.value();
        java.lang.Class<?> wildcardClass26 = charSequence25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) (short) 100, (java.io.Serializable) wildcardClass26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord28.leaderEpoch();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord28.headers();
        java.lang.CharSequence charSequence31 = serializableConsumerRecord28.value();
        java.lang.CharSequence charSequence32 = serializableConsumerRecord28.value();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        int int52 = serializableConsumerRecord50.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord50.leaderEpoch();
        long long54 = serializableConsumerRecord50.offset();
        int int55 = serializableConsumerRecord50.partition();
        java.lang.String str56 = serializableConsumerRecord50.topic();
        long long57 = serializableConsumerRecord50.offset();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord50.headers();
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str69 = serializableConsumerRecord68.topic();
        int int70 = serializableConsumerRecord68.partition();
        java.lang.Class<?> wildcardClass71 = serializableConsumerRecord68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type> headerIterableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type>("", (int) '4', 35L, headerIterable62, (java.lang.reflect.Type) wildcardClass71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration> headerIterableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, 52L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers58, (java.lang.reflect.GenericDeclaration) wildcardClass71);
        java.lang.Class<?> wildcardClass74 = headers58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) '4', (long) (short) -1, timestampType33, (long) (byte) 10, (int) (short) -1, (int) (short) 10, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "hi!" + "'", charSequence25, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence31, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence32, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType24, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.io.Serializable serializable67 = serializableConsumerRecord65.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType24, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers69);
        long long71 = serializableConsumerRecord70.offset();
        java.lang.String str72 = serializableConsumerRecord70.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        java.lang.Class<?> wildcardClass74 = timestampType73.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str81 = serializableConsumerRecord80.topic();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord80.timestampType();
        int int83 = serializableConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>> annotatedElementConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', (long) (short) 10, (java.lang.reflect.AnnotatedElement) wildcardClass74, intOptional84);
        java.lang.Class<?> wildcardClass86 = annotatedElementConsumerRecord85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) ' ', (java.io.Serializable) wildcardClass86, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        int int89 = serializableConsumerRecord88.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 1 + "'", serializable67, (short) 1);
        org.junit.Assert.assertNull(timestampType68);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType35, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType22, (long) '#', 1, 0, (java.io.Serializable) timestampType35, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass40 = timestampType22.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        int int12 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        int int14 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 1.0f + "'", serializable13, 1.0f);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        long long14 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.String> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.String>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))", 52, (long) (byte) 10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.checksum();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.checksum();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable46 = serializableConsumerRecord45.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        int int48 = serializableConsumerRecord45.serializedKeySize();
        java.lang.Class<?> wildcardClass49 = serializableConsumerRecord45.getClass();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord92.headers();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord92.value();
        java.util.Optional<java.lang.Integer> intOptional99 = serializableConsumerRecord92.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "hi!" + "'", charSequence98, "hi!");
        org.junit.Assert.assertNotNull(intOptional99);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        int int16 = serializableConsumerRecord13.serializedValueSize();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        long long18 = serializableConsumerRecord13.timestamp();
        long long19 = serializableConsumerRecord13.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", 32, (long) 10, serializableConsumerRecord13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int22 = serializableConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        long long23 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        int int94 = serializableConsumerRecord92.partition();
        java.lang.String str95 = serializableConsumerRecord92.topic();
        long long96 = serializableConsumerRecord92.checksum();
        int int97 = serializableConsumerRecord92.serializedValueSize();
        int int98 = serializableConsumerRecord92.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 10L + "'", long96 == 10L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str37 = serializableConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord36.timestampType();
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType38, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence43);
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType58, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType45, (long) '#', 1, 0, (java.io.Serializable) timestampType58, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType68, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int75 = serializableConsumerRecord74.serializedValueSize();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        long long77 = serializableConsumerRecord74.timestamp();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) 1, (long) '#', timestampType19, (java.lang.Long) 1L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers78);
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) '#', 1L, timestampType19, 0L, 1, 1, (java.io.Serializable) wildcardClass84, (java.lang.CharSequence) "hi!");
        java.lang.String str87 = serializableConsumerRecord86.toString();
        long long88 = serializableConsumerRecord86.checksum();
        java.lang.String str89 = serializableConsumerRecord86.topic();
        int int90 = serializableConsumerRecord86.serializedKeySize();
        int int91 = serializableConsumerRecord86.partition();
        long long92 = serializableConsumerRecord86.checksum();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)" + "'", str87, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str89, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 32 + "'", int91 == 32);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord10.leaderEpoch();
        int int12 = serializableConsumerRecord10.partition();
        long long13 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord5.headers();
        int int15 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord5.topic();
        java.lang.String str18 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str18, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.offset();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType64, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType64, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType21, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, 52L, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long94 = serializableConsumerRecord93.offset();
        java.lang.String str95 = serializableConsumerRecord93.topic();
        long long96 = serializableConsumerRecord93.timestamp();
        java.io.Serializable serializable97 = serializableConsumerRecord93.key();
        int int98 = serializableConsumerRecord93.partition();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable97 + "' != '" + (byte) 0 + "'", serializable97, (byte) 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass47 = timestampType21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable65 = serializableConsumerRecord64.key();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.lang.Class<?> wildcardClass67 = serializableConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 10, (long) (short) 1, (long) (short) 10, timestampType50, 100L, (int) (short) -1, 52, (java.io.Serializable) wildcardClass67, (java.lang.CharSequence) "");
        long long70 = serializableConsumerRecord69.checksum();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord8.headers();
        int int13 = serializableConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass14 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass14, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int17 = serializableConsumerRecord16.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        int int25 = serializableConsumerRecord10.partition();
        long long26 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType26, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType4, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers44);
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.partition();
        long long49 = serializableConsumerRecord46.checksum();
        long long50 = serializableConsumerRecord46.offset();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence47, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord42.timestampType();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        long long46 = serializableConsumerRecord42.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType51, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int58 = serializableConsumerRecord57.serializedValueSize();
        long long59 = serializableConsumerRecord57.offset();
        int int60 = serializableConsumerRecord57.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (long) 97, timestampType14, (java.lang.Long) (-1L), (int) (byte) 0, 32, serializableConsumerRecord42, intOptional61, headers68);
        long long70 = serializableConsumerRecord42.offset();
        int int71 = serializableConsumerRecord42.serializedValueSize();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord42.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (-1.0d) + "'", serializable45, (-1.0d));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers13);
    }
}

