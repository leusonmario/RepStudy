import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        int int67 = serializableConsumerRecord64.serializedKeySize();
        java.io.Serializable serializable68 = serializableConsumerRecord64.key();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord64.value();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (byte) 10 + "'", serializable68, (byte) 10);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long13 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord12.headers();
        long long15 = serializableConsumerRecord12.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable32 = serializableConsumerRecord31.key();
        long long33 = serializableConsumerRecord31.checksum();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        int int35 = serializableConsumerRecord31.serializedKeySize();
        long long36 = serializableConsumerRecord31.checksum();
        java.lang.String str37 = serializableConsumerRecord31.toString();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord31.headers();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        long long51 = serializableConsumerRecord49.checksum();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord49.value();
        java.lang.String str53 = serializableConsumerRecord49.toString();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord49.leaderEpoch();
        long long55 = serializableConsumerRecord49.timestamp();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 100L, (long) ' ', timestampType16, (java.lang.Long) 32L, 100, (int) (byte) 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers38, headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence> headerIterableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", (int) '4', (long) 'a', (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers56, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str37, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str53, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(headers56);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        int int95 = serializableConsumerRecord92.serializedKeySize();
        java.lang.String str96 = serializableConsumerRecord92.topic();
        long long97 = serializableConsumerRecord92.offset();
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord92.timestampType();
        java.lang.CharSequence charSequence99 = serializableConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence99 + "' != '" + "hi!" + "'", charSequence99, "hi!");
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        long long21 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord92.headers();
        long long97 = serializableConsumerRecord92.checksum();
        org.apache.kafka.common.header.Headers headers98 = serializableConsumerRecord92.headers();
        int int99 = serializableConsumerRecord92.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 10L + "'", long97 == 10L);
        org.junit.Assert.assertNotNull(headers98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.io.Serializable serializable8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (byte) 100, 0L, 10L, timestampType4, 0L, (int) (short) 100, 10, serializable8, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord10.headers();
        int int12 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord23.headers();
        java.lang.String str25 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord23.headers();
        long long27 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        long long29 = serializableConsumerRecord23.timestamp();
        java.lang.String str30 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long6 = serializableConsumerRecord5.offset();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 52L + "'", long6 == 52L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 100 + "'", int7 == 100);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str8, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) -1 + "'", serializable9, (byte) -1);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        int int23 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(timestampType24);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long9 = serializableConsumerRecord8.offset();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 10, 52L, (java.io.Serializable) timestampType11, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.partition();
        int int19 = serializableConsumerRecord17.partition();
        long long20 = serializableConsumerRecord17.timestamp();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord17.leaderEpoch();
        long long22 = serializableConsumerRecord17.checksum();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 10, 0L, timestampType23, (long) 52, 0, (int) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) 'a', (long) 1, timestampType23, (long) 10, 97, 0, serializable33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str50 = serializableConsumerRecord49.topic();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType51, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord53.leaderEpoch();
        int int55 = serializableConsumerRecord53.serializedValueSize();
        int int56 = serializableConsumerRecord53.partition();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", 0, (long) 35, 97L, timestampType23, (java.lang.Long) 0L, (int) (short) 0, (int) (byte) 10, serializable39, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", headers58);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers58);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(timestampType15);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord9.headers();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        java.io.Serializable serializable13 = serializableConsumerRecord9.key();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, 100L, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        int int25 = serializableConsumerRecord24.partition();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable39 = serializableConsumerRecord38.key();
        long long40 = serializableConsumerRecord38.checksum();
        java.util.Optional<java.lang.Integer> intOptional41 = serializableConsumerRecord38.leaderEpoch();
        long long42 = serializableConsumerRecord38.offset();
        java.lang.String str43 = serializableConsumerRecord38.toString();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord38.leaderEpoch();
        int int45 = serializableConsumerRecord38.serializedKeySize();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord38.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) '#', (long) 97, timestampType15, (java.lang.Long) 10L, (int) ' ', 32, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", headers47);
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (short) 1 + "'", serializable39, (short) 1);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str43, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence8);
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        int int12 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord25.timestampType();
        java.io.Serializable serializable28 = serializableConsumerRecord25.key();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord25.headers();
        int int30 = serializableConsumerRecord25.serializedValueSize();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, 10L, (java.io.Serializable) wildcardClass31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType39, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int46 = serializableConsumerRecord45.serializedValueSize();
        int int47 = serializableConsumerRecord45.serializedValueSize();
        long long48 = serializableConsumerRecord45.timestamp();
        java.lang.String str49 = serializableConsumerRecord45.topic();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord45.headers();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord45.value();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 100, (long) 'a', (long) (short) 100, timestampType13, (java.lang.Long) 1L, (int) '4', (int) ' ', (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers53);
        java.lang.String str55 = serializableConsumerRecord54.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + 1.0f + "'", serializable28, 1.0f);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hi!" + "'", str49, "hi!");
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.offset();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        long long8 = serializableConsumerRecord5.offset();
        java.lang.Class<?> wildcardClass9 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType22, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord74.timestampType();
        java.lang.String str76 = serializableConsumerRecord74.toString();
        java.io.Serializable serializable77 = serializableConsumerRecord74.key();
        int int78 = serializableConsumerRecord74.partition();
        int int79 = serializableConsumerRecord74.serializedValueSize();
        long long80 = serializableConsumerRecord74.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", str76, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + 1.0f + "'", serializable77, 1.0f);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 10L + "'", long80 == 10L);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.offset();
        long long16 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord13.headers();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass19 = intOptional18.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 1, (long) 10, (java.io.Serializable) wildcardClass19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = timestampType18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        java.io.Serializable serializable36 = serializableConsumerRecord34.key();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord34.timestampType();
        long long38 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers39 = serializableConsumerRecord34.headers();
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType20, 0L, 32, (int) (byte) 10, headers41, serializableConsumerRecord42);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        long long75 = serializableConsumerRecord71.offset();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType57, 0L, 32, (int) (byte) 10, headers78, serializableConsumerRecord79);
        java.lang.CharSequence charSequence81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) (short) 0, (long) (short) 10, timestampType20, (long) (byte) 100, (int) (byte) 10, 97, (java.io.Serializable) timestampType57, charSequence81);
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord82.timestampType();
        java.lang.CharSequence charSequence84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 1, (long) (byte) 1, (java.io.Serializable) timestampType83, charSequence84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 100, (long) 100, (java.io.Serializable) timestampType83, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertNull(timestampType40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertNull(timestampType77);
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord44.headers();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord44.value();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord44.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence46, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass11, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType22, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long29 = serializableConsumerRecord28.timestamp();
        java.util.Optional<java.lang.Integer> intOptional30 = serializableConsumerRecord28.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        java.io.Serializable serializable71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType48, (long) 0, 0, 0, serializable71, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass74 = timestampType48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement> intOptionalConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 10, 10L, (long) (-1), timestampType14, (long) (byte) 1, (int) (byte) -1, (int) (short) -1, intOptional30, (java.lang.reflect.AnnotatedElement) wildcardClass74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) 1, 35L, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord16.value();
        long long19 = serializableConsumerRecord16.timestamp();
        int int20 = serializableConsumerRecord16.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord16.leaderEpoch();
        long long22 = serializableConsumerRecord16.offset();
        java.lang.String str23 = serializableConsumerRecord16.toString();
        int int24 = serializableConsumerRecord16.serializedKeySize();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 1, (long) (byte) -1, (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) -1, (long) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        int int30 = serializableConsumerRecord29.partition();
        long long31 = serializableConsumerRecord29.checksum();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        java.io.Serializable serializable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType24, (long) 0, 0, 0, serializable47, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass50 = timestampType24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable53 = serializableConsumerRecord52.key();
        org.apache.kafka.common.header.Headers headers54 = serializableConsumerRecord52.headers();
        int int55 = serializableConsumerRecord52.serializedKeySize();
        java.io.Serializable serializable56 = serializableConsumerRecord52.key();
        long long57 = serializableConsumerRecord52.offset();
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType67, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int74 = serializableConsumerRecord73.partition();
        long long75 = serializableConsumerRecord73.checksum();
        java.lang.Class<?> wildcardClass76 = serializableConsumerRecord73.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (byte) 100, (long) (short) -1, (long) 52, timestampType58, 1L, (int) (byte) 10, (int) (short) -1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass76);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) (short) 0, (java.io.Serializable) 1L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.io.Serializable serializable80 = serializableConsumerRecord79.key();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(serializable53);
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(serializable56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + 1L + "'", serializable80, 1L);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        int int13 = serializableConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        java.lang.String str15 = serializableConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType29, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord46.value();
        long long50 = serializableConsumerRecord46.offset();
        java.io.Serializable serializable51 = serializableConsumerRecord46.key();
        long long52 = serializableConsumerRecord46.offset();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord46.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>> headerIterableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (byte) 10, (long) (-1), (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers53, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", 1, 1L, 10L, timestampType16, (java.lang.Long) (-1L), (int) (byte) 10, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers53);
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 1 + "'", serializable51, (short) 1);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "");
        java.io.Serializable serializable18 = serializableConsumerRecord17.key();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord17.headers();
        int int21 = serializableConsumerRecord17.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord17.leaderEpoch();
        long long23 = serializableConsumerRecord17.offset();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(serializable18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) (byte) -1, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        long long24 = serializableConsumerRecord10.checksum();
        java.lang.String str25 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(timestampType26);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType26, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType4, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers44);
        long long47 = serializableConsumerRecord46.checksum();
        int int48 = serializableConsumerRecord46.partition();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord46.headers();
        int int50 = serializableConsumerRecord46.serializedValueSize();
        java.lang.String str51 = serializableConsumerRecord46.toString();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str51, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        long long18 = serializableConsumerRecord16.checksum();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord16.value();
        java.lang.String str20 = serializableConsumerRecord16.toString();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord16.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord16.timestampType();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, 10L, (java.io.Serializable) wildcardClass23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int28 = serializableConsumerRecord27.serializedKeySize();
        java.lang.String str29 = serializableConsumerRecord27.topic();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str11, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord5.key();
        long long15 = serializableConsumerRecord5.offset();
        long long16 = serializableConsumerRecord5.offset();
        long long17 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 1.0f + "'", serializable14, 1.0f);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        long long8 = serializableConsumerRecord5.timestamp();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + false + "'", serializable9, false);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        long long13 = serializableConsumerRecord12.timestamp();
        java.lang.String str14 = serializableConsumerRecord12.toString();
        long long15 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.checksum();
        long long15 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType18, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        java.lang.String str45 = serializableConsumerRecord43.topic();
        int int46 = serializableConsumerRecord43.partition();
        java.lang.String str47 = serializableConsumerRecord43.toString();
        java.lang.String str48 = serializableConsumerRecord43.topic();
        int int49 = serializableConsumerRecord43.serializedKeySize();
        long long50 = serializableConsumerRecord43.offset();
        java.lang.Class<?> wildcardClass51 = serializableConsumerRecord43.getClass();
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>> typeConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) 10, (java.lang.reflect.Type) wildcardClass51, headerIterable52);
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.io.Serializable serializable66 = serializableConsumerRecord64.key();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord64.timestampType();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord64.headers();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord64.value();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord64.value();
        java.lang.CharSequence charSequence71 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration> charSequenceConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 0, 0L, (long) (byte) 10, timestampType25, (java.lang.Long) 0L, (int) ' ', 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.GenericDeclaration) wildcardClass51, headers72);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str47, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
        org.junit.Assert.assertNull(timestampType67);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertNotNull(headers72);
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable15 = serializableConsumerRecord14.key();
        long long16 = serializableConsumerRecord14.offset();
        int int17 = serializableConsumerRecord14.serializedValueSize();
        long long18 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord14.headers();
        int int20 = serializableConsumerRecord14.serializedValueSize();
        int int21 = serializableConsumerRecord14.serializedKeySize();
        java.io.Serializable serializable22 = serializableConsumerRecord14.key();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord14.headers();
        java.lang.String str24 = serializableConsumerRecord14.toString();
        long long25 = serializableConsumerRecord14.timestamp();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.header.Headers> strComparableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ))", (-1), (long) (byte) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", headers26);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str24, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(headers26);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord10.leaderEpoch();
        int int24 = serializableConsumerRecord10.serializedValueSize();
        long long25 = serializableConsumerRecord10.checksum();
        long long26 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        long long25 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence16);
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord17.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (short) 0, (long) ' ', serializableConsumerRecord8, intOptional19);
        java.lang.String str21 = serializableConsumerRecord8.toString();
        java.lang.String str22 = serializableConsumerRecord8.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType16, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int23 = serializableConsumerRecord22.serializedValueSize();
        int int24 = serializableConsumerRecord22.serializedValueSize();
        long long25 = serializableConsumerRecord22.offset();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType11, serializableConsumerRecord22);
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord22.leaderEpoch();
        int int29 = serializableConsumerRecord22.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        int int26 = serializableConsumerRecord23.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord23.topic();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        int int29 = serializableConsumerRecord23.serializedValueSize();
        long long30 = serializableConsumerRecord23.checksum();
        java.lang.CharSequence charSequence31 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (-1L), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        long long12 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        long long14 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> charSequenceConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType15);
        java.lang.Class<?> wildcardClass17 = timestampType15.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        int int94 = serializableConsumerRecord92.serializedValueSize();
        int int95 = serializableConsumerRecord92.partition();
        long long96 = serializableConsumerRecord92.offset();
        java.lang.CharSequence charSequence97 = serializableConsumerRecord92.value();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord92.value();
        long long99 = serializableConsumerRecord92.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence97 + "' != '" + "hi!" + "'", charSequence97, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "hi!" + "'", charSequence98, "hi!");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 10L + "'", long99 == 10L);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + false + "'", serializable13, false);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord16.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord16.key();
        java.lang.String str20 = serializableConsumerRecord16.toString();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord16.headers();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord16.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 10, (long) (byte) 1, timestampType23, 35L, (int) (short) 1, (int) ' ', serializable27, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord29.headers();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (byte) 10, (long) 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)), partition = 97, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        int int44 = serializableConsumerRecord42.partition();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord42.headers();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable47 = serializableConsumerRecord42.key();
        long long48 = serializableConsumerRecord42.checksum();
        int int49 = serializableConsumerRecord42.serializedKeySize();
        java.io.Serializable serializable50 = serializableConsumerRecord42.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) 35, (long) (byte) 1, timestampType31, (long) 'a', (int) (short) 0, (int) (short) 100, (java.io.Serializable) timestampType51, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + false + "'", serializable19, false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (-1.0d) + "'", serializable47, (-1.0d));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (-1.0d) + "'", serializable50, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        long long21 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        int int55 = serializableConsumerRecord53.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType38, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional56);
        java.io.Serializable serializable61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType38, (long) 0, 0, 0, serializable61, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass64 = timestampType38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass64, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.io.Serializable) timestampType67, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.io.Serializable serializable70 = serializableConsumerRecord69.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 35, 35L, (long) (short) 0, timestampType14, (long) (-1), (int) (short) -1, (int) (byte) 0, serializable70, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.checksum();
        long long18 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        long long13 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord5.timestampType();
        int int15 = serializableConsumerRecord5.partition();
        long long16 = serializableConsumerRecord5.timestamp();
        int int17 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 1.0f + "'", serializable10, 1.0f);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord14.value();
        int int18 = serializableConsumerRecord14.serializedKeySize();
        long long19 = serializableConsumerRecord14.timestamp();
        java.lang.String str20 = serializableConsumerRecord14.toString();
        int int21 = serializableConsumerRecord14.serializedValueSize();
        java.lang.String str22 = serializableConsumerRecord14.topic();
        long long23 = serializableConsumerRecord14.offset();
        int int24 = serializableConsumerRecord14.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strComparableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, 0L, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", serializableConsumerRecord14);
        java.lang.Class<?> wildcardClass26 = serializableConsumerRecord14.getClass();
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        long long20 = serializableConsumerRecord16.offset();
        long long21 = serializableConsumerRecord16.checksum();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord40.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        int int58 = serializableConsumerRecord56.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional59 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType41, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional59);
        java.io.Serializable serializable64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType41, (long) 0, 0, 0, serializable64, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        java.lang.CharSequence charSequence83 = serializableConsumerRecord81.value();
        long long84 = serializableConsumerRecord81.timestamp();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord81.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType41, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional85);
        java.lang.Class<?> wildcardClass87 = intOptional85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration> annotatedElementConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 0, 32L, (java.lang.reflect.AnnotatedElement) wildcardClass22, (java.lang.reflect.GenericDeclaration) wildcardClass87);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) 'a', (long) '#', (java.lang.reflect.AnnotatedElement) wildcardClass87, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(intOptional59);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        long long7 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        long long9 = serializableConsumerRecord5.checksum();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 100, (-1L), serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.junit.Assert.assertNull(serializable6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str8, "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))" + "'", charSequence9, "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable15 = serializableConsumerRecord14.key();
        long long16 = serializableConsumerRecord14.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord14.leaderEpoch();
        int int18 = serializableConsumerRecord14.serializedKeySize();
        long long19 = serializableConsumerRecord14.checksum();
        long long20 = serializableConsumerRecord14.timestamp();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 10, (long) 0, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers21);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(headers21);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        long long21 = serializableConsumerRecord10.timestamp();
        long long22 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        long long7 = serializableConsumerRecord5.offset();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 100.0f + "'", serializable8, 100.0f);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType14, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        long long40 = serializableConsumerRecord39.checksum();
        int int41 = serializableConsumerRecord39.serializedValueSize();
        java.lang.String str42 = serializableConsumerRecord39.toString();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        long long44 = serializableConsumerRecord39.checksum();
        int int45 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord39.timestampType();
        int int47 = serializableConsumerRecord39.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)" + "'", str42, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 100 + "'", serializable43, (byte) 100);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        long long87 = serializableConsumerRecord84.timestamp();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord84.headers();
        int int89 = serializableConsumerRecord84.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType26, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType4, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers44);
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.partition();
        java.lang.String str49 = serializableConsumerRecord46.topic();
        java.lang.String str50 = serializableConsumerRecord46.topic();
        int int51 = serializableConsumerRecord46.partition();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence47, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 100 + "'", int48 == 100);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.partition();
        java.io.Serializable serializable86 = serializableConsumerRecord84.key();
        long long87 = serializableConsumerRecord84.offset();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + serializable86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        long long10 = serializableConsumerRecord5.checksum();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 100.0f + "'", serializable11, 100.0f);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType64, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType64, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType21, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, 52L, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long94 = serializableConsumerRecord93.offset();
        java.lang.String str95 = serializableConsumerRecord93.topic();
        org.apache.kafka.common.record.TimestampType timestampType96 = serializableConsumerRecord93.timestampType();
        int int97 = serializableConsumerRecord93.serializedKeySize();
        long long98 = serializableConsumerRecord93.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + timestampType96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-1L) + "'", long98 == (-1L));
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.partition();
        java.lang.String str26 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType15, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable33 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int51 = serializableConsumerRecord50.serializedValueSize();
        int int52 = serializableConsumerRecord50.serializedValueSize();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) ' ', (long) (short) -1, timestampType39, (java.lang.Long) 52L, (int) (byte) 0, (int) (byte) 0, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str61 = serializableConsumerRecord60.topic();
        int int62 = serializableConsumerRecord60.partition();
        java.lang.String str63 = serializableConsumerRecord60.topic();
        java.lang.String str64 = serializableConsumerRecord60.topic();
        int int65 = serializableConsumerRecord60.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 10, (long) (short) 10, 35L, timestampType15, (java.lang.Long) 52L, (int) (short) -1, 0, serializable33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", headers53, intOptional66);
        long long68 = serializableConsumerRecord67.offset();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence26 = serializableConsumerRecord23.value();
        int int27 = serializableConsumerRecord23.partition();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.String str19 = serializableConsumerRecord13.toString();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int27 = serializableConsumerRecord26.partition();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord26.timestampType();
        int int30 = serializableConsumerRecord26.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord26.timestampType();
        long long32 = serializableConsumerRecord26.checksum();
        int int33 = serializableConsumerRecord26.serializedKeySize();
        long long34 = serializableConsumerRecord26.checksum();
        int int35 = serializableConsumerRecord26.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord26.leaderEpoch();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Iterable<org.apache.kafka.common.header.Header>> intOptionalConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = 100, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 10, (long) (short) 0, intOptional20, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers37);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(headers37);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) -1, (java.io.Serializable) 0.0f, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord19.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        java.io.Serializable serializable62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType39, (long) 0, 0, 0, serializable62, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass65 = timestampType39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass65, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, 0L, (java.lang.reflect.AnnotatedElement) wildcardClass21, (java.lang.reflect.Type) wildcardClass65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int75 = serializableConsumerRecord74.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord74.timestampType();
        java.io.Serializable serializable77 = serializableConsumerRecord74.key();
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord74.timestampType();
        long long79 = serializableConsumerRecord74.offset();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> annotatedElementConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) -1, (long) (-1), (long) ' ', timestampType7, 35L, (int) 'a', (int) 'a', (java.lang.reflect.AnnotatedElement) wildcardClass21, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType80);
        java.lang.Class<?> wildcardClass82 = annotatedElementConsumerRecord81.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 0, 100L, (java.io.Serializable) wildcardClass82, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence85 = serializableConsumerRecord84.value();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + 1.0f + "'", serializable77, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence85, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        long long26 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(headers29);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        long long84 = serializableConsumerRecord83.checksum();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord83.leaderEpoch();
        java.lang.String str86 = serializableConsumerRecord83.topic();
        int int87 = serializableConsumerRecord83.partition();
        int int88 = serializableConsumerRecord83.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str86, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType37, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers55);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType74, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers92);
        java.util.Optional<java.lang.Integer> intOptional94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType29, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers55, headers69, headers92, intOptional94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 0, 0L, (long) (short) 1, timestampType12, (java.lang.Long) 100L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "", headers92);
        long long97 = serializableConsumerRecord96.timestamp();
        long long98 = serializableConsumerRecord96.offset();
        java.lang.String str99 = serializableConsumerRecord96.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str99, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        int int21 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        long long23 = serializableConsumerRecord10.timestamp();
        int int24 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType21);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.partition();
        int int14 = serializableConsumerRecord12.partition();
        long long15 = serializableConsumerRecord12.timestamp();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord12.leaderEpoch();
        long long17 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str28 = serializableConsumerRecord27.topic();
        int int29 = serializableConsumerRecord27.partition();
        java.lang.String str30 = serializableConsumerRecord27.topic();
        java.lang.String str31 = serializableConsumerRecord27.topic();
        int int32 = serializableConsumerRecord27.serializedValueSize();
        long long33 = serializableConsumerRecord27.timestamp();
        long long34 = serializableConsumerRecord27.checksum();
        java.lang.Class<?> wildcardClass35 = serializableConsumerRecord27.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        java.io.Serializable serializable48 = serializableConsumerRecord46.key();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord46.timestampType();
        long long50 = serializableConsumerRecord46.offset();
        java.lang.String str51 = serializableConsumerRecord46.topic();
        long long52 = serializableConsumerRecord46.offset();
        int int53 = serializableConsumerRecord46.partition();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) '#', 100L, 52L, timestampType18, (long) 32, (int) '4', 100, (java.lang.reflect.GenericDeclaration) wildcardClass35, intOptional54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", (int) '#', (long) 97, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertNull(timestampType49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(intOptional54);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>> strComparableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 100, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 97, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null))", (int) (short) 10, (long) (short) 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        java.lang.String str12 = serializableConsumerRecord8.topic();
        int int13 = serializableConsumerRecord8.serializedValueSize();
        long long14 = serializableConsumerRecord8.timestamp();
        long long15 = serializableConsumerRecord8.checksum();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) (byte) 10, (long) (byte) 100, (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord18.headers();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence19, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        long long13 = serializableConsumerRecord10.offset();
        long long14 = serializableConsumerRecord10.timestamp();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        java.lang.String str73 = serializableConsumerRecord67.toString();
        java.lang.String str74 = serializableConsumerRecord67.toString();
        int int75 = serializableConsumerRecord67.serializedKeySize();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord67.headers();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str73, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str74, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(headers76);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType11, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        int int19 = serializableConsumerRecord17.serializedKeySize();
        long long20 = serializableConsumerRecord17.timestamp();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 10, (long) '#', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers21);
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable34 = serializableConsumerRecord33.key();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.io.Serializable serializable36 = serializableConsumerRecord33.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) -1, (long) (-1), (java.lang.Object) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Object) serializableConsumerRecord33);
        java.lang.String str38 = serializableConsumerRecord33.topic();
        long long39 = serializableConsumerRecord33.checksum();
        int int40 = serializableConsumerRecord33.serializedValueSize();
        java.lang.CharSequence charSequence41 = serializableConsumerRecord33.value();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord33.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertNotNull(intOptional42);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNull(timestampType17);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        long long10 = serializableConsumerRecord5.checksum();
        long long11 = serializableConsumerRecord5.timestamp();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional13);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 100L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord64.value();
        int int68 = serializableConsumerRecord64.serializedKeySize();
        int int69 = serializableConsumerRecord64.serializedValueSize();
        long long70 = serializableConsumerRecord64.checksum();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", charSequence67, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable13 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        int int50 = serializableConsumerRecord48.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType33, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str62 = serializableConsumerRecord61.topic();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord61.timestampType();
        java.io.Serializable serializable64 = serializableConsumerRecord61.key();
        long long65 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType70, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int77 = serializableConsumerRecord76.serializedValueSize();
        long long78 = serializableConsumerRecord76.offset();
        int int79 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (long) 97, timestampType33, (java.lang.Long) (-1L), (int) (byte) 0, 32, serializableConsumerRecord61, intOptional80, headers87);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 1, (-1L), 0L, timestampType14, (long) 1, 100, (int) (byte) 10, (java.io.Serializable) 97, intOptional80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) -1, (long) (short) 1, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        long long92 = serializableConsumerRecord91.offset();
        int int93 = serializableConsumerRecord91.serializedKeySize();
        java.io.Serializable serializable94 = serializableConsumerRecord91.key();
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (-1.0d) + "'", serializable64, (-1.0d));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 1L + "'", long92 == 1L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + 97 + "'", serializable94, 97);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.String str19 = serializableConsumerRecord13.toString();
        java.lang.String str20 = serializableConsumerRecord13.toString();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) (short) -1, (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord23.headers();
        long long25 = serializableConsumerRecord23.timestamp();
        int int26 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str91 = serializableConsumerRecord88.topic();
        int int92 = serializableConsumerRecord88.serializedValueSize();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        java.lang.String str94 = serializableConsumerRecord88.topic();
        java.lang.String str95 = serializableConsumerRecord88.topic();
        java.lang.String str96 = serializableConsumerRecord88.topic();
        java.lang.String str97 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str97, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass7 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        long long22 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.timestamp();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        java.io.Serializable serializable93 = serializableConsumerRecord92.key();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord92.headers();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord92.leaderEpoch();
        long long97 = serializableConsumerRecord92.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + 0 + "'", serializable93, 0);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord58.leaderEpoch();
        int int79 = serializableConsumerRecord58.serializedKeySize();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.String str81 = serializableConsumerRecord58.toString();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord58.value();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType17, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) (byte) 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.lang.String str46 = serializableConsumerRecord44.topic();
        long long47 = serializableConsumerRecord44.offset();
        long long48 = serializableConsumerRecord44.offset();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence45, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.timestamp();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        long long21 = serializableConsumerRecord10.checksum();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.checksum();
        long long89 = serializableConsumerRecord13.checksum();
        java.lang.String str90 = serializableConsumerRecord13.topic();
        java.io.Serializable serializable91 = serializableConsumerRecord13.key();
        java.lang.String str92 = serializableConsumerRecord13.topic();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass94 = serializableConsumerRecord13.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 1 + "'", serializable91, (short) 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(intOptional93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.timestamp();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.partition();
        long long13 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.partition();
        long long19 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '#', (long) (short) 1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord21.getClass();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType29, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType7, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass23, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers47);
        long long50 = serializableConsumerRecord49.checksum();
        long long51 = serializableConsumerRecord49.checksum();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 52, (long) 97, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        long long57 = serializableConsumerRecord54.checksum();
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord10.headers();
        long long25 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        long long12 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.timestamp();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        java.io.Serializable serializable37 = serializableConsumerRecord35.key();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord35.timestampType();
        long long39 = serializableConsumerRecord35.offset();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord35.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers40, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass43 = headerIterableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        int int51 = serializableConsumerRecord49.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord49.timestampType();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord49.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) (short) 1, (long) (byte) -1, timestampType18, (java.lang.Long) 32L, (int) (byte) 10, (int) 'a', (java.lang.reflect.Type) wildcardClass43, intOptional53, headers66);
        java.util.Optional<java.lang.Integer> intOptional72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>> strComparableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 0, (long) '4', (long) (short) -1, timestampType18, (long) (byte) -1, (-1), (int) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (short) 0, (long) '4', timestampType18, (long) (byte) -1, (int) (byte) 100, (int) (byte) 0, serializable77, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.lang.String str80 = serializableConsumerRecord79.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 1 + "'", serializable37, (short) 1);
        org.junit.Assert.assertNull(timestampType38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str80, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        java.lang.reflect.Type type3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType22, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long48 = serializableConsumerRecord47.checksum();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.io.Serializable serializable67 = serializableConsumerRecord65.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord65.headers();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord65.value();
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord65.timestampType();
        long long72 = serializableConsumerRecord65.timestamp();
        java.io.Serializable serializable73 = serializableConsumerRecord65.key();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)))", 32, (long) (short) 10, (long) (short) 1, timestampType49, (java.lang.Long) 0L, 0, (int) (byte) 100, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.io.Serializable> typeConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!), partition = 100, leaderEpoch = null, offset = 32, null = 0, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) 'a', (long) (byte) 0, type3, (java.io.Serializable) timestampType49);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 1 + "'", serializable67, (short) 1);
        org.junit.Assert.assertNull(timestampType68);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertNull(timestampType71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNotNull(headers74);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        java.lang.String str12 = serializableConsumerRecord8.topic();
        java.lang.Class<?> wildcardClass13 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) -1, (long) (short) 1, (java.io.Serializable) wildcardClass13, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        long long16 = serializableConsumerRecord15.offset();
        int int17 = serializableConsumerRecord15.serializedValueSize();
        java.io.Serializable serializable18 = serializableConsumerRecord15.key();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(serializable18);
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)", (int) (short) 0, (long) '4', (java.io.Serializable) 32, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)");
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        long long63 = serializableConsumerRecord59.checksum();
        int int64 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable25 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 1 + "'", serializable25, (short) 1);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        java.lang.String str73 = serializableConsumerRecord67.toString();
        java.lang.String str74 = serializableConsumerRecord67.toString();
        int int75 = serializableConsumerRecord67.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord67.leaderEpoch();
        long long77 = serializableConsumerRecord67.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str73, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str74, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        int int43 = serializableConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType26, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType26, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType26, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers71);
        long long73 = serializableConsumerRecord72.offset();
        java.lang.String str74 = serializableConsumerRecord72.topic();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str85 = serializableConsumerRecord84.topic();
        int int86 = serializableConsumerRecord84.partition();
        java.lang.String str87 = serializableConsumerRecord84.topic();
        java.lang.String str88 = serializableConsumerRecord84.topic();
        int int89 = serializableConsumerRecord84.serializedValueSize();
        java.lang.Class<?> wildcardClass90 = serializableConsumerRecord84.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 35, (long) (short) 1, 52L, timestampType75, 35L, 0, 52, (java.io.Serializable) wildcardClass90, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.io.Serializable serializable96 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 0, (long) 10, (long) '#', timestampType75, (long) 'a', (int) (byte) 100, (int) '4', serializable96, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType99 = serializableConsumerRecord98.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!), partition = 100, leaderEpoch = null, offset = 32, null = 0, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 1, 52L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        java.io.Serializable serializable31 = serializableConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord29.timestampType();
        long long33 = serializableConsumerRecord29.offset();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord29.headers();
        java.lang.String str35 = serializableConsumerRecord29.toString();
        java.lang.String str36 = serializableConsumerRecord29.toString();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 100, 32L, (long) 'a', timestampType15, (long) (short) -1, 0, (int) (byte) 100, (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord56.timestampType();
        int int60 = serializableConsumerRecord56.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType61, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType61, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType79, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord85.leaderEpoch();
        int int87 = serializableConsumerRecord85.partition();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (-1), (long) (-1), 35L, timestampType15, (java.lang.Long) 35L, (int) (short) -1, (int) (short) -1, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers88);
        java.lang.String str90 = serializableConsumerRecord89.topic();
        long long91 = serializableConsumerRecord89.timestamp();
        int int92 = serializableConsumerRecord89.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertNull(timestampType32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)" + "'", str90, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 35L + "'", long91 == 35L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord95.headers();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.offset();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        long long17 = serializableConsumerRecord13.offset();
        int int18 = serializableConsumerRecord13.serializedValueSize();
        java.lang.Class<?> wildcardClass19 = serializableConsumerRecord13.getClass();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) 'a', 10L, (java.io.Serializable) wildcardClass19, charSequence20);
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord21.headers();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType43, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        java.lang.String str51 = serializableConsumerRecord49.topic();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord49.getClass();
        java.lang.CharSequence charSequence53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType33, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass52, charSequence53);
        java.util.Optional<java.lang.Integer> intOptional59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("hi!", (int) (byte) 10, (long) 'a', (long) (byte) 10, timestampType33, 0L, 52, (int) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", intOptional59);
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType69, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int76 = serializableConsumerRecord75.serializedValueSize();
        int int77 = serializableConsumerRecord75.serializedValueSize();
        long long78 = serializableConsumerRecord75.offset();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord75.headers();
        long long80 = serializableConsumerRecord75.offset();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String> headersConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 100, 0L, headers81, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) '4', (-1L), 0L, timestampType11, (java.lang.Long) 32L, (int) (byte) 0, (int) '4', (java.io.Serializable) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers81);
        int int85 = serializableConsumerRecord84.partition();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str86, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        long long13 = serializableConsumerRecord9.timestamp();
        long long14 = serializableConsumerRecord9.checksum();
        int int15 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord30.timestampType();
        long long34 = serializableConsumerRecord30.offset();
        java.lang.String str35 = serializableConsumerRecord30.topic();
        long long36 = serializableConsumerRecord30.checksum();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord30.timestampType();
        java.lang.CharSequence charSequence38 = serializableConsumerRecord30.value();
        java.lang.Class<?> wildcardClass39 = charSequence38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) (byte) 0, (long) 'a', timestampType16, (long) (short) 1, (int) (byte) -1, (int) (short) 10, (java.io.Serializable) wildcardClass39, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.lang.String str42 = serializableConsumerRecord41.toString();
        java.lang.String str43 = serializableConsumerRecord41.toString();
        java.lang.String str44 = serializableConsumerRecord41.toString();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))" + "'", str42, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))" + "'", str43, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))" + "'", str44, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord23.timestampType();
        int int29 = serializableConsumerRecord23.serializedKeySize();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord23.value();
        long long31 = serializableConsumerRecord23.timestamp();
        long long32 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord5.headers();
        int int15 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord5.headers();
        int int17 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord5.headers();
        int int19 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType17, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long43 = serializableConsumerRecord42.checksum();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord42.value();
        java.lang.CharSequence charSequence45 = serializableConsumerRecord42.value();
        long long46 = serializableConsumerRecord42.checksum();
        java.lang.CharSequence charSequence47 = serializableConsumerRecord42.value();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 32, leaderEpoch = null, offset = 10, null = 0, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (byte) 10, (long) 'a', (java.io.Serializable) timestampType48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)), partition = 97, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence44, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence45, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence47, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        java.io.Serializable serializable63 = serializableConsumerRecord62.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 10L, serializable63, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        long long66 = serializableConsumerRecord65.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(serializable63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 0, (long) (short) -1, (long) (byte) -1, timestampType34, (long) 'a', 32, (int) (byte) 0, (java.io.Serializable) (-1L), charSequence94);
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord95.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType97 = serializableConsumerRecord95.timestampType();
        org.apache.kafka.common.header.Headers headers98 = serializableConsumerRecord95.headers();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertTrue("'" + timestampType97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers98);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        int int18 = serializableConsumerRecord16.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord16.headers();
        long long20 = serializableConsumerRecord16.timestamp();
        long long21 = serializableConsumerRecord16.checksum();
        int int22 = serializableConsumerRecord16.partition();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord16.timestampType();
        java.io.Serializable serializable27 = null;
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable40 = serializableConsumerRecord39.key();
        java.lang.CharSequence charSequence41 = serializableConsumerRecord39.value();
        long long42 = serializableConsumerRecord39.timestamp();
        java.lang.CharSequence charSequence43 = serializableConsumerRecord39.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int51 = serializableConsumerRecord50.partition();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord50.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord50.timestampType();
        int int54 = serializableConsumerRecord50.serializedValueSize();
        java.lang.String str55 = serializableConsumerRecord50.toString();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord50.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) (byte) 100, (long) (byte) -1, timestampType23, (java.lang.Long) 0L, 0, 0, serializable27, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", headers44, intOptional56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        int int68 = serializableConsumerRecord66.partition();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord66.value();
        long long70 = serializableConsumerRecord66.checksum();
        int int71 = serializableConsumerRecord66.partition();
        int int72 = serializableConsumerRecord66.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", (int) (short) 0, (long) 52, (long) 32, timestampType23, 32L, 97, (int) (byte) -1, (java.io.Serializable) timestampType73, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = hi!)", (int) (short) 10, 97L, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        long long17 = serializableConsumerRecord10.checksum();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.lang.String str92 = serializableConsumerRecord88.toString();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str92, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        long long84 = serializableConsumerRecord83.checksum();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord83.leaderEpoch();
        int int86 = serializableConsumerRecord83.serializedValueSize();
        int int87 = serializableConsumerRecord83.serializedKeySize();
        java.io.Serializable serializable88 = serializableConsumerRecord83.key();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord83.headers();
        long long90 = serializableConsumerRecord83.offset();
        long long91 = serializableConsumerRecord83.offset();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord83.headers();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + 10 + "'", serializable88, 10);
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 100L + "'", long90 == 100L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 100L + "'", long91 == 100L);
        org.junit.Assert.assertNotNull(headers92);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        int int19 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) -1, (long) '#', timestampType22, (long) 10, (-1), (int) (short) 0, (java.io.Serializable) 100.0d, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord40.headers();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType59, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) (byte) 10, (long) 1, timestampType22, (long) (-1), 0, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) -1, (long) (short) 0, (long) 10, timestampType59, 97L, 52, (int) (short) 1, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str73 = serializableConsumerRecord72.topic();
        int int74 = serializableConsumerRecord72.partition();
        int int75 = serializableConsumerRecord72.partition();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord72.headers();
        long long77 = serializableConsumerRecord72.offset();
        int int78 = serializableConsumerRecord72.partition();
        java.io.Serializable serializable79 = serializableConsumerRecord72.key();
        int int80 = serializableConsumerRecord72.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + 1.0f + "'", serializable43, 1.0f);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str73, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", serializable79, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        long long21 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType17, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord23.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType7, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers25);
        long long27 = serializableConsumerRecord26.timestamp();
        long long28 = serializableConsumerRecord26.timestamp();
        long long29 = serializableConsumerRecord26.offset();
        long long30 = serializableConsumerRecord26.checksum();
        long long31 = serializableConsumerRecord26.checksum();
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) 'a', (long) (byte) 100, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long35 = serializableConsumerRecord34.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord34.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int15 = serializableConsumerRecord14.partition();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        java.lang.String str17 = serializableConsumerRecord14.toString();
        long long18 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord14.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (byte) 1, 32L, (java.io.Serializable) timestampType19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 35, (long) (-1), timestampType19, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        java.lang.Comparable<java.lang.String> strComparable24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 100, 10L, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", strComparable24);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str17, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.timestamp();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        long long10 = serializableConsumerRecord5.timestamp();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.partition();
        long long15 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str91 = serializableConsumerRecord88.topic();
        int int92 = serializableConsumerRecord88.serializedValueSize();
        long long93 = serializableConsumerRecord88.offset();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord88.headers();
        long long97 = serializableConsumerRecord88.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 32L + "'", long97 == 32L);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType11, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence16);
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        int int19 = serializableConsumerRecord17.partition();
        int int20 = serializableConsumerRecord17.serializedKeySize();
        java.lang.String str21 = serializableConsumerRecord17.topic();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord17.value();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNull(charSequence22);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.io.Serializable serializable23 = serializableConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord21.timestampType();
        long long25 = serializableConsumerRecord21.offset();
        java.lang.String str26 = serializableConsumerRecord21.topic();
        long long27 = serializableConsumerRecord21.offset();
        int int28 = serializableConsumerRecord21.partition();
        java.lang.Class<?> wildcardClass29 = serializableConsumerRecord21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) 0, (java.io.Serializable) wildcardClass29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (byte) 10, (long) 52, (long) ' ', timestampType4, (long) (-1), (int) (short) 0, (int) '4', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        java.io.Serializable serializable34 = serializableConsumerRecord33.key();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", serializable34, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        int int13 = serializableConsumerRecord10.partition();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        long long9 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        int int13 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        long long12 = serializableConsumerRecord9.checksum();
        int int13 = serializableConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord9.leaderEpoch();
        int int15 = serializableConsumerRecord9.serializedKeySize();
        long long16 = serializableConsumerRecord9.timestamp();
        long long17 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord9.headers();
        int int19 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord9.leaderEpoch();
        java.lang.String str21 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long36 = serializableConsumerRecord35.checksum();
        long long37 = serializableConsumerRecord35.checksum();
        long long38 = serializableConsumerRecord35.checksum();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        int int55 = serializableConsumerRecord53.serializedKeySize();
        long long56 = serializableConsumerRecord53.offset();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord53.headers();
        long long59 = serializableConsumerRecord53.checksum();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord53.headers();
        java.lang.Class<?> wildcardClass61 = headers60.getClass();
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType71, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int78 = serializableConsumerRecord77.serializedValueSize();
        long long79 = serializableConsumerRecord77.checksum();
        int int80 = serializableConsumerRecord77.serializedKeySize();
        java.lang.String str81 = serializableConsumerRecord77.toString();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord77.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 100, (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers83);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 1, (long) 52, (long) (byte) -1, timestampType39, (java.lang.Long) 0L, (int) (byte) 100, (int) '#', (java.io.Serializable) wildcardClass61, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers83);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 100, (long) 1, (long) 10, timestampType22, (long) (short) 0, (int) ' ', 100, (java.io.Serializable) (byte) 1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))");
        long long88 = serializableConsumerRecord87.timestamp();
        int int89 = serializableConsumerRecord87.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNull(timestampType57);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 10L + "'", long88 == 10L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        long long79 = serializableConsumerRecord58.offset();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord58.leaderEpoch();
        int int81 = serializableConsumerRecord58.partition();
        java.io.Serializable serializable82 = serializableConsumerRecord58.key();
        int int83 = serializableConsumerRecord58.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 1 + "'", serializable82, (short) 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertNotNull(intOptional9);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.partition();
        java.lang.String str26 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType15, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long39 = serializableConsumerRecord38.offset();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord38.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord38.timestampType();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord38.leaderEpoch();
        long long43 = serializableConsumerRecord38.checksum();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord38.headers();
        java.lang.Class<?> wildcardClass45 = headers44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", 1, (long) '4', (long) (byte) 10, timestampType15, (long) (short) 0, 0, 97, (java.io.Serializable) wildcardClass45, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)))");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.partition();
        java.lang.String str22 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + 10.0f + "'", serializable23, 10.0f);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord5.headers();
        int int15 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord5.headers();
        long long20 = serializableConsumerRecord5.timestamp();
        int int21 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        java.io.Serializable serializable74 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord67.timestampType();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord67.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (byte) 10 + "'", serializable74, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional76);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        long long12 = serializableConsumerRecord5.offset();
        long long13 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType21, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType21, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "hi!", headers59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 32L, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long63 = serializableConsumerRecord62.offset();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        java.lang.String str65 = serializableConsumerRecord62.topic();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertNotNull(serializable64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 10.0f + "'", serializable14, 10.0f);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 100L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        long long66 = serializableConsumerRecord64.checksum();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord64.timestampType();
        java.io.Serializable serializable68 = serializableConsumerRecord64.key();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord64.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 10 + "'", serializable68, (short) 10);
        org.junit.Assert.assertNotNull(intOptional69);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        int int20 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.common.record.TimestampType timestampType18 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType18, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = serializableConsumerRecord24.value();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord24.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType8, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers26);
        long long28 = serializableConsumerRecord27.timestamp();
        long long29 = serializableConsumerRecord27.timestamp();
        long long30 = serializableConsumerRecord27.offset();
        java.lang.CharSequence charSequence31 = serializableConsumerRecord27.value();
        int int32 = serializableConsumerRecord27.serializedKeySize();
        java.io.Serializable serializable33 = serializableConsumerRecord27.key();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord27.timestampType();
        java.lang.String str35 = serializableConsumerRecord27.topic();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord27.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable> strConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 100, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 97, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null))", 0, 0L, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (java.io.Serializable) wildcardClass36);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "hi!" + "'", charSequence25, "hi!");
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + 10 + "'", serializable33, 10);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.checksum();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord13.value();
        java.io.Serializable serializable18 = serializableConsumerRecord13.key();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        int int20 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str21 = serializableConsumerRecord13.topic();
        int int22 = serializableConsumerRecord13.serializedValueSize();
        long long23 = serializableConsumerRecord13.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord45.timestampType();
        int int47 = serializableConsumerRecord45.partition();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord45.headers();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        int int63 = serializableConsumerRecord61.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord61.leaderEpoch();
        java.io.Serializable serializable65 = serializableConsumerRecord61.key();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord61.leaderEpoch();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType> intOptionalConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) 32, (long) (byte) 10, timestampType36, (java.lang.Long) 1L, 1, 10, intOptional49, timestampType50, headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) 0, serializableConsumerRecord13, timestampType36);
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord13.timestampType();
        int int71 = serializableConsumerRecord13.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 0, (long) 97, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        int int32 = serializableConsumerRecord30.serializedValueSize();
        long long33 = serializableConsumerRecord30.checksum();
        int int34 = serializableConsumerRecord30.serializedValueSize();
        long long35 = serializableConsumerRecord30.checksum();
        java.lang.CharSequence charSequence36 = serializableConsumerRecord30.value();
        int int37 = serializableConsumerRecord30.partition();
        java.lang.Class<?> wildcardClass38 = serializableConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        int int46 = serializableConsumerRecord44.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord54.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers> annotatedElementConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) (byte) 10, (long) 1, 35L, timestampType16, (java.lang.Long) (-1L), 97, (int) '4', (java.lang.reflect.AnnotatedElement) wildcardClass38, headers48, headers56);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) '4', 0L, (java.io.Serializable) wildcardClass38, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (short) -1, 100L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord61.getClass();
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        int int43 = serializableConsumerRecord42.serializedKeySize();
        int int44 = serializableConsumerRecord42.partition();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) -1, (long) '4', (java.io.Serializable) wildcardClass45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        long long48 = serializableConsumerRecord47.offset();
        long long49 = serializableConsumerRecord47.checksum();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        java.io.Serializable serializable51 = serializableConsumerRecord47.key();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 52L + "'", long48 == 52L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable51);
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.offset();
        long long23 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        int int25 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        java.io.Serializable serializable16 = serializableConsumerRecord14.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord14.timestampType();
        long long18 = serializableConsumerRecord14.offset();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord14.headers();
        java.lang.String str20 = serializableConsumerRecord14.topic();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", serializableConsumerRecord14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(headers21);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        long long17 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord14.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord14.timestampType();
        java.io.Serializable serializable20 = serializableConsumerRecord14.key();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        long long48 = serializableConsumerRecord44.offset();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType18, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable62 = serializableConsumerRecord61.key();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 97, (long) 10, timestampType18, 0L, 1, (int) (byte) 0, (java.io.Serializable) timestampType63, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord65.headers();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) ' ', (long) 35, (java.io.Serializable) timestampType67, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNull(timestampType47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + 100.0f + "'", serializable62, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        int int22 = serializableConsumerRecord10.partition();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 10.0f + "'", serializable14, 10.0f);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        long long21 = serializableConsumerRecord17.offset();
        java.lang.String str22 = serializableConsumerRecord17.topic();
        long long23 = serializableConsumerRecord17.checksum();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence25 = serializableConsumerRecord17.value();
        java.lang.Class<?> wildcardClass26 = charSequence25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) (short) 100, (java.io.Serializable) wildcardClass26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord28.leaderEpoch();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord28.headers();
        java.lang.CharSequence charSequence31 = serializableConsumerRecord28.value();
        java.lang.CharSequence charSequence32 = serializableConsumerRecord28.value();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        java.lang.Class<?> wildcardClass63 = serializableConsumerRecord61.getClass();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType69, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers87);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType47, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass63, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers87);
        java.lang.CharSequence charSequence90 = serializableConsumerRecord89.value();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord89.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', 100L, "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", 1, (long) 100, (long) (short) -1, timestampType33, (java.lang.Long) 0L, (int) (byte) 10, (int) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", headers91);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "hi!" + "'", charSequence25, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence31, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence32, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence90, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers91);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        long long14 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        long long12 = serializableConsumerRecord10.timestamp();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 10L + "'", long14 == 10L);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        int int22 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable52 = serializableConsumerRecord51.key();
        long long53 = serializableConsumerRecord51.checksum();
        java.lang.CharSequence charSequence54 = serializableConsumerRecord51.value();
        java.lang.Class<?> wildcardClass55 = charSequence54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement> charSequenceConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement>("", (int) '#', (long) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, (long) 52, (long) 0, timestampType19, 10L, (int) (short) 100, (-1), (java.lang.reflect.AnnotatedElement) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) 97, (long) 35, timestampType19, (long) (byte) 0, (int) (byte) -1, 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        int int65 = serializableConsumerRecord64.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord92.value();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord92.timestampType();
        java.lang.String str96 = serializableConsumerRecord92.topic();
        org.apache.kafka.common.record.TimestampType timestampType97 = serializableConsumerRecord92.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + timestampType97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord10.timestampType();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNull(timestampType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        int int50 = serializableConsumerRecord48.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType33, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional51, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass55 = intOptionalConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 10, 0L, (long) (short) 10, timestampType16, (long) (short) -1, (int) '#', (int) (short) -1, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord57.getClass();
        java.lang.CharSequence charSequence59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!))", (int) (short) 10, (long) (byte) -1, (java.io.Serializable) wildcardClass58, charSequence59);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (byte) 10 + "'", serializable7, (byte) 10);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "" + "'", charSequence10, "");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord11.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord11.timestampType();
        long long16 = serializableConsumerRecord11.offset();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, (long) 100, (java.io.Serializable) timestampType17, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        int int32 = serializableConsumerRecord30.serializedValueSize();
        long long33 = serializableConsumerRecord30.offset();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord30.value();
        java.io.Serializable serializable35 = serializableConsumerRecord30.key();
        int int36 = serializableConsumerRecord30.serializedKeySize();
        int int37 = serializableConsumerRecord30.serializedKeySize();
        java.lang.String str38 = serializableConsumerRecord30.topic();
        int int39 = serializableConsumerRecord30.partition();
        java.lang.CharSequence charSequence40 = serializableConsumerRecord30.value();
        java.lang.String str41 = serializableConsumerRecord30.toString();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord30.timestampType();
        int int43 = serializableConsumerRecord30.serializedKeySize();
        int int44 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers> timestampTypeEnumConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 35, (long) (short) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType17, headers45);
        java.lang.Class<?> wildcardClass47 = timestampTypeEnumConsumerRecord46.getClass();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 1.0f + "'", serializable14, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + 10.0f + "'", serializable35, 10.0f);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence87 = serializableConsumerRecord86.value();
        java.io.Serializable serializable88 = serializableConsumerRecord86.key();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord86.timestampType();
        java.lang.Class<?> wildcardClass90 = serializableConsumerRecord86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type> charSequenceConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) 32, 52L, timestampType25, 32L, (int) (byte) 0, (int) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (java.lang.reflect.Type) wildcardClass90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (short) 100, (long) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str94 = serializableConsumerRecord93.topic();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + (short) 1 + "'", serializable88, (short) 1);
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))" + "'", str94, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable16 = serializableConsumerRecord15.key();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord15.headers();
        java.lang.String str18 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        long long42 = serializableConsumerRecord39.offset();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) -1, (long) (byte) 100, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, (long) 1, (java.lang.reflect.AnnotatedElement) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (short) 0, 97L, (long) (short) -1, timestampType19, 97L, (int) (byte) 1, (int) (byte) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', (long) '4', (java.io.Serializable) timestampType19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) (short) 0, (java.io.Serializable) '4', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int54 = serializableConsumerRecord53.serializedKeySize();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 100.0f + "'", serializable16, 100.0f);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(headers55);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (short) 1 + "'", serializable9, (short) 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', 0L, (long) '4', timestampType22, (long) (byte) 10, (int) (short) 0, 100, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int75 = serializableConsumerRecord74.serializedKeySize();
        int int76 = serializableConsumerRecord74.serializedValueSize();
        java.io.Serializable serializable77 = serializableConsumerRecord74.key();
        int int78 = serializableConsumerRecord74.partition();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 100 + "'", int76 == 100);
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 100 + "'", serializable77, (short) 100);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        long long20 = serializableConsumerRecord10.offset();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNull(timestampType22);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        long long21 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence8);
        long long10 = serializableConsumerRecord9.offset();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        java.lang.String str15 = serializableConsumerRecord9.toString();
        long long16 = serializableConsumerRecord9.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        long long35 = serializableConsumerRecord32.checksum();
        java.lang.String str36 = serializableConsumerRecord32.topic();
        java.lang.String str37 = serializableConsumerRecord32.toString();
        int int38 = serializableConsumerRecord32.serializedKeySize();
        int int39 = serializableConsumerRecord32.serializedValueSize();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType59, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional77);
        java.io.Serializable serializable82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType59, (long) 0, 0, 0, serializable82, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass85 = timestampType59.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass85, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!))", (int) (short) 100, (long) 32, 1L, timestampType18, (java.lang.Long) 10L, 32, 1, (java.io.Serializable) wildcardClass40, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 10, leaderEpoch = null, offset = 35, null = -1, serialized key size = 10, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers88);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(charSequence17);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str37, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        long long12 = serializableConsumerRecord5.timestamp();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        int int14 = serializableConsumerRecord5.serializedKeySize();
        long long15 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100.0f + "'", serializable7, 100.0f);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.partition();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int23 = serializableConsumerRecord22.partition();
        java.lang.String str24 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 10L, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) ' ', (java.io.Serializable) timestampType28, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.io.Serializable serializable34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 100L, (long) '4', timestampType28, (long) 52, 35, (int) (byte) 0, serializable34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType44, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers62);
        long long64 = serializableConsumerRecord63.timestamp();
        long long65 = serializableConsumerRecord63.timestamp();
        long long66 = serializableConsumerRecord63.timestamp();
        int int67 = serializableConsumerRecord63.serializedKeySize();
        java.lang.String str68 = serializableConsumerRecord63.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable80 = serializableConsumerRecord79.key();
        long long81 = serializableConsumerRecord79.checksum();
        long long82 = serializableConsumerRecord79.timestamp();
        java.lang.CharSequence charSequence83 = serializableConsumerRecord79.value();
        int int84 = serializableConsumerRecord79.serializedValueSize();
        java.lang.Class<?> wildcardClass85 = serializableConsumerRecord79.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.Type> serializableConsumerRecordConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 100, 35L, timestampType28, (long) 52, 0, 0, serializableConsumerRecord63, (java.lang.reflect.Type) wildcardClass85);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) '4', 97L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        java.lang.CharSequence charSequence89 = serializableConsumerRecord88.value();
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str24, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", charSequence89, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord13.headers();
        int int89 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str90 = serializableConsumerRecord13.topic();
        int int91 = serializableConsumerRecord13.serializedValueSize();
        long long92 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord13.timestampType();
        int int94 = serializableConsumerRecord13.partition();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNull(timestampType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        java.lang.String str16 = serializableConsumerRecord13.toString();
        long long17 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable22 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str35 = serializableConsumerRecord34.toString();
        java.io.Serializable serializable36 = serializableConsumerRecord34.key();
        java.lang.CharSequence charSequence37 = serializableConsumerRecord34.value();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord34.leaderEpoch();
        int int39 = serializableConsumerRecord34.serializedKeySize();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        long long55 = serializableConsumerRecord51.offset();
        java.lang.String str56 = serializableConsumerRecord51.topic();
        long long57 = serializableConsumerRecord51.checksum();
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord51.timestampType();
        java.lang.CharSequence charSequence59 = serializableConsumerRecord51.value();
        java.util.Optional<java.lang.Integer> intOptional60 = serializableConsumerRecord51.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) -1, (long) 35, (long) 52, timestampType18, (java.lang.Long) 52L, (int) (byte) 100, 97, serializable22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers40, intOptional60);
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        java.io.Serializable serializable81 = serializableConsumerRecord79.key();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord79.timestampType();
        long long83 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers84, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass87 = headerIterableConsumerRecord86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 1, (long) (byte) 100, (long) 97, timestampType62, (long) (short) 10, (int) (byte) 0, (int) '#', (java.io.Serializable) wildcardClass87, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.lang.CharSequence charSequence90 = serializableConsumerRecord89.value();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str35, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + 10.0f + "'", serializable36, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNull(timestampType58);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertNull(timestampType82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))" + "'", charSequence90, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType13, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = serializableConsumerRecord19.value();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord19.headers();
        java.lang.String str22 = serializableConsumerRecord19.toString();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord19.value();
        long long24 = serializableConsumerRecord19.timestamp();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord19.headers();
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord19.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 10, (long) '4', (long) '4', timestampType4, (long) 35, (int) (short) 0, (int) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = 100, serialized key size = 32, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", intOptional26);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertNotNull(intOptional26);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long10 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType19, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.partition();
        long long27 = serializableConsumerRecord25.checksum();
        long long28 = serializableConsumerRecord25.timestamp();
        java.lang.String str29 = serializableConsumerRecord25.toString();
        long long30 = serializableConsumerRecord25.timestamp();
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord25.leaderEpoch();
        java.lang.Class<?> wildcardClass32 = intOptional31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        int int41 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord39.headers();
        java.lang.reflect.Type type46 = null;
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.CharSequence charSequence59 = serializableConsumerRecord57.value();
        long long60 = serializableConsumerRecord57.timestamp();
        long long61 = serializableConsumerRecord57.checksum();
        int int62 = serializableConsumerRecord57.partition();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 1, type46, intOptional63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 35, (long) (byte) 0, 100L, timestampType11, (java.lang.Long) 0L, 0, (int) (short) 0, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", headers42, intOptional63);
        long long66 = serializableConsumerRecord65.checksum();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long6 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        long long8 = serializableConsumerRecord5.offset();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        java.io.Serializable serializable11 = serializableConsumerRecord9.key();
        int int12 = serializableConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        java.lang.String str14 = serializableConsumerRecord9.toString();
        long long15 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable20 = null;
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        java.lang.String str37 = serializableConsumerRecord32.topic();
        long long38 = serializableConsumerRecord32.offset();
        int int39 = serializableConsumerRecord32.serializedValueSize();
        java.lang.CharSequence charSequence40 = serializableConsumerRecord32.value();
        long long41 = serializableConsumerRecord32.checksum();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord32.headers();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord32.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (short) 10, (long) (-1), (long) ' ', timestampType16, (java.lang.Long) 10L, 97, 0, serializable20, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers43);
        int int45 = serializableConsumerRecord44.serializedValueSize();
        int int46 = serializableConsumerRecord44.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 100.0f + "'", serializable11, 100.0f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L + "'", long15 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        long long21 = serializableConsumerRecord10.timestamp();
        int int22 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNull(timestampType23);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        long long62 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord59.leaderEpoch();
        java.lang.String str64 = serializableConsumerRecord59.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str64, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord64.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord64.timestampType();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        java.lang.String str69 = serializableConsumerRecord64.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str69, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.timestamp();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        java.io.Serializable serializable26 = serializableConsumerRecord24.key();
        java.lang.String str27 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType36, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int43 = serializableConsumerRecord42.serializedValueSize();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        long long45 = serializableConsumerRecord42.checksum();
        int int46 = serializableConsumerRecord42.partition();
        java.lang.Class<?> wildcardClass47 = serializableConsumerRecord42.getClass();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        long long62 = serializableConsumerRecord59.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType69, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence76 = serializableConsumerRecord75.value();
        org.apache.kafka.common.header.Headers headers77 = serializableConsumerRecord75.headers();
        java.lang.String str78 = serializableConsumerRecord75.toString();
        java.lang.CharSequence charSequence79 = serializableConsumerRecord75.value();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord75.timestampType();
        int int81 = serializableConsumerRecord75.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord75.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 0, (long) 97, 0L, timestampType28, (java.lang.Long) 35L, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", headers64, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) 0, (long) (short) 1, 32L, timestampType11, (long) 97, (int) (byte) 10, (int) (short) 100, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long86 = serializableConsumerRecord85.offset();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (-1.0d) + "'", serializable26, (-1.0d));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNull(timestampType63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str78, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertNull(timestampType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1L + "'", long86 == 1L);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        long long13 = serializableConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        int int30 = serializableConsumerRecord28.serializedKeySize();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 100, (long) (short) 100, (long) (byte) 100, timestampType14, (long) 10, (int) (short) 100, (int) (short) 0, (java.io.Serializable) wildcardClass31, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord33.headers();
        java.io.Serializable serializable35 = serializableConsumerRecord33.key();
        int int36 = serializableConsumerRecord33.serializedKeySize();
        long long37 = serializableConsumerRecord33.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(serializable35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L + "'", long37 == 100L);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType19, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence24);
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType44, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional62);
        java.io.Serializable serializable67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType44, (long) 0, 0, 0, serializable67, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass70 = timestampType44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int78 = serializableConsumerRecord77.partition();
        java.lang.String str79 = serializableConsumerRecord77.topic();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence> genericDeclarationConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, (long) 'a', (long) (byte) -1, timestampType26, (java.lang.Long) 52L, 35, 52, (java.lang.reflect.GenericDeclaration) wildcardClass70, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', 35L, (long) (byte) 10, timestampType26, (long) (short) 10, 0, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.lang.Class<?> wildcardClass88 = timestampType26.getClass();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str79, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        long long11 = serializableConsumerRecord5.timestamp();
        long long12 = serializableConsumerRecord5.checksum();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.lang.Class<?> wildcardClass14 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.CharSequence charSequence81 = serializableConsumerRecord58.value();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        java.lang.CharSequence charSequence7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence7);
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) (byte) 1, (long) 10, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.lang.String str13 = serializableConsumerRecord12.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord12.value();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 10 + "'", serializable9, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", charSequence15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int12 = serializableConsumerRecord11.partition();
        int int13 = serializableConsumerRecord11.partition();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord11.value();
        int int15 = serializableConsumerRecord11.serializedKeySize();
        long long16 = serializableConsumerRecord11.offset();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", 0, (long) 1, (java.io.Serializable) wildcardClass17, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 1, (long) 10, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        long long20 = serializableConsumerRecord10.offset();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord92.leaderEpoch();
        java.lang.String str97 = serializableConsumerRecord92.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str97, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        long long14 = serializableConsumerRecord10.timestamp();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long10 = serializableConsumerRecord9.checksum();
        long long11 = serializableConsumerRecord9.checksum();
        long long12 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType21, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence28 = serializableConsumerRecord27.value();
        int int29 = serializableConsumerRecord27.serializedKeySize();
        long long30 = serializableConsumerRecord27.offset();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord27.headers();
        long long33 = serializableConsumerRecord27.checksum();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord27.headers();
        java.lang.Class<?> wildcardClass35 = headers34.getClass();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int52 = serializableConsumerRecord51.serializedValueSize();
        long long53 = serializableConsumerRecord51.checksum();
        int int54 = serializableConsumerRecord51.serializedKeySize();
        java.lang.String str55 = serializableConsumerRecord51.toString();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord51.value();
        org.apache.kafka.common.header.Headers headers57 = serializableConsumerRecord51.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 100, (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 1, (long) 52, (long) (byte) -1, timestampType13, (java.lang.Long) 0L, (int) (byte) 100, (int) '#', (java.io.Serializable) wildcardClass35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers57);
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", charSequence60, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str61, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord9.headers();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType22, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int29 = serializableConsumerRecord28.serializedValueSize();
        int int30 = serializableConsumerRecord28.serializedKeySize();
        long long31 = serializableConsumerRecord28.timestamp();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord28.headers();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord28.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType38, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord44.leaderEpoch();
        int int46 = serializableConsumerRecord44.partition();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable54 = serializableConsumerRecord53.key();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object> intOptionalConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object>("", (int) (short) -1, (long) ' ', (long) (byte) 10, timestampType14, (java.lang.Long) 97L, (int) (short) 10, (int) (short) -1, intOptional33, (java.lang.Object) serializableConsumerRecord44, headers55);
        java.io.Serializable serializable57 = serializableConsumerRecord44.key();
        java.lang.CharSequence charSequence58 = serializableConsumerRecord44.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + 100.0f + "'", serializable54, 100.0f);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + ' ' + "'", serializable57, ' ');
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence58, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass8 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        int int22 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(headers21);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        long long10 = serializableConsumerRecord5.offset();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        int int16 = serializableConsumerRecord14.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord14.headers();
        int int19 = serializableConsumerRecord14.serializedValueSize();
        int int20 = serializableConsumerRecord14.serializedValueSize();
        java.lang.String str21 = serializableConsumerRecord14.topic();
        int int22 = serializableConsumerRecord14.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str21, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 32 + "'", int22 == 32);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long6 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable40 = serializableConsumerRecord39.key();
        long long41 = serializableConsumerRecord39.checksum();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        int int43 = serializableConsumerRecord39.serializedKeySize();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass44, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int54 = serializableConsumerRecord53.partition();
        java.lang.String str55 = serializableConsumerRecord53.topic();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord53.timestampType();
        long long57 = serializableConsumerRecord53.timestamp();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType22, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass44, headers47, headers58);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 52, (long) 97, (long) 0, timestampType14, (long) (byte) 1, (int) (byte) 100, 97, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) (byte) 100, 32L, timestampType14, 0L, 1, 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        long long68 = serializableConsumerRecord67.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        java.lang.String str22 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertNotNull(intOptional16);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        java.io.Serializable serializable48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType25, (long) 0, 0, 0, serializable48, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable62 = serializableConsumerRecord61.key();
        int int63 = serializableConsumerRecord61.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord74.leaderEpoch();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType7, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType25, serializableConsumerRecord61, headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) 0, 0L, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        java.io.Serializable serializable83 = serializableConsumerRecord82.key();
        java.io.Serializable serializable84 = serializableConsumerRecord82.key();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord82.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + 10 + "'", serializable83, 10);
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + 10 + "'", serializable84, 10);
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        int int61 = serializableConsumerRecord59.partition();
        java.lang.CharSequence charSequence62 = serializableConsumerRecord59.value();
        long long63 = serializableConsumerRecord59.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence62, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        int int20 = serializableConsumerRecord10.partition();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) (byte) 100, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        long long7 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.String str89 = serializableConsumerRecord88.toString();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        long long91 = serializableConsumerRecord88.checksum();
        int int92 = serializableConsumerRecord88.partition();
        java.lang.CharSequence charSequence93 = serializableConsumerRecord88.value();
        java.lang.String str94 = serializableConsumerRecord88.toString();
        java.lang.String str95 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str89, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence93, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str94, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str95, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        long long13 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intOptional20);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.lang.String str57 = serializableConsumerRecord54.topic();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str57, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.serializedValueSize();
        int int29 = serializableConsumerRecord23.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional30 = serializableConsumerRecord23.leaderEpoch();
        int int31 = serializableConsumerRecord23.partition();
        java.lang.String str32 = serializableConsumerRecord23.topic();
        long long33 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.offset();
        long long11 = serializableConsumerRecord5.timestamp();
        long long12 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        int int14 = serializableConsumerRecord12.partition();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord12.headers();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord12.value();
        java.io.Serializable serializable18 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord25.timestampType();
        long long33 = serializableConsumerRecord25.offset();
        long long34 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, 10L, timestampType19, headers35);
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord50.value();
        long long53 = serializableConsumerRecord50.timestamp();
        java.io.Serializable serializable54 = serializableConsumerRecord50.key();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord50.headers();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord50.timestampType();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord50.leaderEpoch();
        java.lang.String str58 = serializableConsumerRecord50.toString();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.io.Serializable serializable72 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        long long74 = serializableConsumerRecord70.offset();
        java.lang.String str75 = serializableConsumerRecord70.topic();
        long long76 = serializableConsumerRecord70.offset();
        int int77 = serializableConsumerRecord70.serializedValueSize();
        java.lang.CharSequence charSequence78 = serializableConsumerRecord70.value();
        long long79 = serializableConsumerRecord70.checksum();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord70.value();
        java.io.Serializable serializable81 = serializableConsumerRecord70.key();
        int int82 = serializableConsumerRecord70.partition();
        long long83 = serializableConsumerRecord70.checksum();
        long long84 = serializableConsumerRecord70.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord70.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord91.timestampType();
        int int93 = serializableConsumerRecord91.serializedValueSize();
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) '#', 100L, timestampType19, (java.lang.Long) 35L, (int) (short) 0, (int) '#', (java.lang.Object) serializableConsumerRecord50, (java.lang.Object) serializableConsumerRecord70, headers94);
        long long96 = serializableConsumerRecord70.offset();
        int int97 = serializableConsumerRecord70.partition();
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord70.timestampType();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (-1.0d) + "'", serializable18, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNull(timestampType56);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str58, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType59);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (short) 1 + "'", serializable72, (short) 1);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertNull(timestampType98);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable60 = serializableConsumerRecord59.key();
        long long61 = serializableConsumerRecord59.checksum();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        int int63 = serializableConsumerRecord59.serializedKeySize();
        int int64 = serializableConsumerRecord59.serializedValueSize();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType70, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int77 = serializableConsumerRecord76.serializedValueSize();
        long long78 = serializableConsumerRecord76.offset();
        int int79 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 10, 10L, (long) 'a', timestampType18, (java.lang.Long) 32L, (int) '#', 100, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", headers65, intOptional80);
        int int82 = serializableConsumerRecord81.partition();
        java.io.Serializable serializable83 = serializableConsumerRecord81.key();
        java.lang.CharSequence charSequence84 = serializableConsumerRecord81.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + 1.0d + "'", serializable83, 1.0d);
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", charSequence84, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.partition();
        java.lang.String str29 = serializableConsumerRecord23.toString();
        long long30 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord23.headers();
        int int33 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence23);
        long long25 = serializableConsumerRecord24.offset();
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord24.leaderEpoch();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord24.headers();
        java.lang.String str28 = serializableConsumerRecord24.toString();
        long long29 = serializableConsumerRecord24.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        java.lang.String str46 = serializableConsumerRecord41.topic();
        long long47 = serializableConsumerRecord41.offset();
        int int48 = serializableConsumerRecord41.serializedValueSize();
        long long49 = serializableConsumerRecord41.timestamp();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType>("hi!", (int) '#', 0L, (long) (byte) 100, timestampType14, (java.lang.Long) 10L, (int) (byte) -1, 32, "hi!", timestampType30, headers50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str64 = serializableConsumerRecord63.topic();
        int int65 = serializableConsumerRecord63.partition();
        java.lang.Class<?> wildcardClass66 = serializableConsumerRecord63.getClass();
        java.lang.CharSequence charSequence67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (-1), 97L, (java.lang.reflect.AnnotatedElement) wildcardClass66, charSequence67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))", 0, (long) (byte) 1, (long) (byte) 100, timestampType14, (long) 'a', (int) (short) 0, (int) (short) 0, (java.io.Serializable) 97L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        long long71 = serializableConsumerRecord70.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str28, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1L + "'", long71 == 1L);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord74.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        int int92 = serializableConsumerRecord90.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord90.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType75, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional93);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType21, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers64, intOptional93);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence> headerIterableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!))", (int) ' ', (long) '4', (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers64, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
        org.junit.Assert.assertNotNull(intOptional93);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.timestamp();
        long long13 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNull(timestampType16);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.partition();
        int int22 = serializableConsumerRecord10.partition();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi!" + "'", str23, "hi!");
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        long long23 = serializableConsumerRecord10.offset();
        long long24 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 10.0f + "'", serializable21, 10.0f);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        java.io.Serializable serializable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType24, (long) 0, 0, 0, serializable47, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass50 = timestampType24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.io.Serializable) timestampType53, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable74 = serializableConsumerRecord73.key();
        long long75 = serializableConsumerRecord73.checksum();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord73.value();
        java.lang.Class<?> wildcardClass77 = charSequence76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable> strComparableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 100, (long) (byte) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.io.Serializable) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, (long) 32, (long) (byte) -1, timestampType53, (long) '4', (int) (byte) 0, (int) (byte) 1, (java.io.Serializable) wildcardClass77, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.lang.Class<?> wildcardClass81 = serializableConsumerRecord80.getClass();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 1 + "'", serializable74, (short) 1);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType30, (long) '#', 1, 0, (java.io.Serializable) timestampType43, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (-1), (long) 100, (long) 0, timestampType30, (long) (byte) 10, 10, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType61, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord67.getClass();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType74, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int81 = serializableConsumerRecord80.serializedValueSize();
        long long82 = serializableConsumerRecord80.offset();
        int int83 = serializableConsumerRecord80.serializedKeySize();
        java.lang.String str84 = serializableConsumerRecord80.toString();
        java.lang.CharSequence charSequence85 = serializableConsumerRecord80.value();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord80.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence93 = serializableConsumerRecord92.value();
        long long94 = serializableConsumerRecord92.offset();
        java.lang.String str95 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 100, 0L, (long) (short) 10, timestampType30, (java.lang.Long) 52L, 10, 1, (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", headers86, intOptional96);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str84, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence93, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 10L + "'", long94 == 10L);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str95, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional96);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType27, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj56 = new java.lang.Object();
        java.lang.Class<?> wildcardClass57 = obj56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType27, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass57, (java.lang.CharSequence) "hi!", headers65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 32L, (java.io.Serializable) wildcardClass57, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long69 = serializableConsumerRecord68.offset();
        java.io.Serializable serializable70 = serializableConsumerRecord68.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 1, (long) 97, serializable70, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (-1), 100L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        int int75 = serializableConsumerRecord74.partition();
        java.lang.String str76 = serializableConsumerRecord74.topic();
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 32L + "'", long69 == 32L);
        org.junit.Assert.assertNotNull(serializable70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str76, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        int int14 = serializableConsumerRecord12.partition();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        java.lang.String str16 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        java.io.Serializable serializable36 = serializableConsumerRecord34.key();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord34.timestampType();
        java.lang.Class<?> wildcardClass38 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType48, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass38, timestampType48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 0, (long) 52, (long) (short) 1, timestampType17, 100L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass38, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord53.leaderEpoch();
        long long55 = serializableConsumerRecord53.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.String str62 = serializableConsumerRecord61.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) 1, (long) '#', serializableConsumerRecord53, serializableConsumerRecord61);
        java.lang.String str64 = serializableConsumerRecord61.topic();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord61.leaderEpoch();
        int int66 = serializableConsumerRecord61.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 52L + "'", long55 == 52L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str62, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        long long18 = serializableConsumerRecord16.checksum();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord16.value();
        int int20 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord16.leaderEpoch();
        int int22 = serializableConsumerRecord16.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 0, (long) (byte) 10, serializableConsumerRecord16, timestampType29);
        java.lang.Class<?> wildcardClass31 = timestampType29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) (short) 10, (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord12.leaderEpoch();
        int int15 = serializableConsumerRecord12.serializedValueSize();
        int int16 = serializableConsumerRecord12.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        long long46 = serializableConsumerRecord44.checksum();
        long long47 = serializableConsumerRecord44.offset();
        java.lang.String str48 = serializableConsumerRecord44.topic();
        int int49 = serializableConsumerRecord44.partition();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord44.timestampType();
        int int51 = serializableConsumerRecord44.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.offset();
        long long18 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType11, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence16);
        java.io.Serializable serializable18 = serializableConsumerRecord17.key();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord17.headers();
        java.io.Serializable serializable20 = serializableConsumerRecord17.key();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord17.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 100 + "'", serializable18, 100);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + 100 + "'", serializable20, 100);
        org.junit.Assert.assertNotNull(intOptional21);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        int int62 = serializableConsumerRecord59.partition();
        int int63 = serializableConsumerRecord59.serializedValueSize();
        int int64 = serializableConsumerRecord59.partition();
        long long65 = serializableConsumerRecord59.checksum();
        java.lang.String str66 = serializableConsumerRecord59.toString();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str66, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        java.io.Serializable serializable3 = null;
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", 35, 32L, serializable3, charSequence4);
        long long6 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        int int16 = serializableConsumerRecord14.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord14.headers();
        int int19 = serializableConsumerRecord14.serializedKeySize();
        int int20 = serializableConsumerRecord14.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord14.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(intOptional21);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        long long22 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence24 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.io.Serializable serializable27 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord25.timestampType();
        java.lang.Class<?> wildcardClass29 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType39, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass29, timestampType39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int45 = serializableConsumerRecord44.serializedKeySize();
        java.lang.String str46 = serializableConsumerRecord44.topic();
        java.io.Serializable serializable47 = serializableConsumerRecord44.key();
        java.lang.Class<?> wildcardClass48 = serializableConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, (long) (byte) 100, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (-1), (long) (-1), (java.io.Serializable) timestampType51, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) 'a', (long) ' ', (java.io.Serializable) (-1), (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 1 + "'", serializable27, (short) 1);
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable47, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        long long14 = serializableConsumerRecord12.checksum();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        long long18 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType21, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType21, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "hi!", headers59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 32L, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long63 = serializableConsumerRecord62.offset();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        int int65 = serializableConsumerRecord62.serializedValueSize();
        int int66 = serializableConsumerRecord62.serializedValueSize();
        long long67 = serializableConsumerRecord62.offset();
        int int68 = serializableConsumerRecord62.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32L + "'", long63 == 32L);
        org.junit.Assert.assertNotNull(serializable64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 32L + "'", long67 == 32L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        int int63 = serializableConsumerRecord59.serializedKeySize();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        long long65 = serializableConsumerRecord59.offset();
        java.io.Serializable serializable66 = serializableConsumerRecord59.key();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(serializable66);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        int int65 = serializableConsumerRecord59.serializedValueSize();
        long long66 = serializableConsumerRecord59.timestamp();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord59.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType16, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int23 = serializableConsumerRecord22.serializedValueSize();
        int int24 = serializableConsumerRecord22.serializedValueSize();
        long long25 = serializableConsumerRecord22.offset();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType11, serializableConsumerRecord22);
        int int28 = serializableConsumerRecord22.serializedKeySize();
        java.lang.String str29 = serializableConsumerRecord22.toString();
        int int30 = serializableConsumerRecord22.partition();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int16 = serializableConsumerRecord15.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord31.getClass();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord45.leaderEpoch();
        java.io.Serializable serializable49 = serializableConsumerRecord45.key();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.common.header.Headers headers51 = serializableConsumerRecord45.headers();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType56, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int63 = serializableConsumerRecord62.partition();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType17, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass33, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers51, intOptional64);
        java.io.Serializable serializable66 = serializableConsumerRecord65.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 10L, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!))", 1, 52L, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertNotNull(serializable66);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, 32L, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional6 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertNotNull(intOptional6);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType30, (long) '#', 1, 0, (java.io.Serializable) timestampType43, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (-1), (long) 100, (long) 0, timestampType30, (long) (byte) 10, 10, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable68 = serializableConsumerRecord67.key();
        long long69 = serializableConsumerRecord67.checksum();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord67.leaderEpoch();
        long long71 = serializableConsumerRecord67.offset();
        int int72 = serializableConsumerRecord67.partition();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        java.lang.Class<?> wildcardClass74 = headers73.getClass();
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable87 = serializableConsumerRecord86.key();
        long long88 = serializableConsumerRecord86.checksum();
        java.lang.CharSequence charSequence89 = serializableConsumerRecord86.value();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 1, (long) (byte) 1, timestampType30, (java.lang.Long) 10L, (-1), (int) (byte) 10, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers90);
        java.lang.CharSequence charSequence92 = serializableConsumerRecord91.value();
        java.lang.Class<?> wildcardClass93 = serializableConsumerRecord91.getClass();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + (short) 1 + "'", serializable87, (short) 1);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "hi!" + "'", charSequence89, "hi!");
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence87 = serializableConsumerRecord86.value();
        java.lang.CharSequence charSequence88 = serializableConsumerRecord86.value();
        long long89 = serializableConsumerRecord86.timestamp();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord86.leaderEpoch();
        int int91 = serializableConsumerRecord86.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord86.leaderEpoch();
        java.lang.Class<?> wildcardClass93 = serializableConsumerRecord86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 52, 10L, (long) (short) 0, timestampType72, (long) 32, (int) (byte) 10, (-1), (java.io.Serializable) wildcardClass93, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", 35, (-1L), (java.io.Serializable) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        java.lang.String str98 = serializableConsumerRecord97.topic();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 52 + "'", int91 == 52);
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)" + "'", str98, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long6 = serializableConsumerRecord5.timestamp();
        java.lang.Class<?> wildcardClass7 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence8);
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int22 = serializableConsumerRecord21.partition();
        int int23 = serializableConsumerRecord21.partition();
        int int24 = serializableConsumerRecord21.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        java.io.Serializable serializable39 = serializableConsumerRecord37.key();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord37.headers();
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType46, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int53 = serializableConsumerRecord52.serializedValueSize();
        java.lang.String str54 = serializableConsumerRecord52.topic();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord52.leaderEpoch();
        long long56 = serializableConsumerRecord52.timestamp();
        int int57 = serializableConsumerRecord52.serializedKeySize();
        java.lang.String str58 = serializableConsumerRecord52.toString();
        int int59 = serializableConsumerRecord52.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional60 = serializableConsumerRecord52.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) 97, 32L, timestampType12, (java.lang.Long) 32L, (int) (byte) 1, 100, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", headers41, intOptional60);
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord61.headers();
        java.lang.String str63 = serializableConsumerRecord61.topic();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (short) 1 + "'", serializable39, (short) 1);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str58, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.toString();
        long long94 = serializableConsumerRecord88.checksum();
        int int95 = serializableConsumerRecord88.partition();
        java.lang.String str96 = serializableConsumerRecord88.toString();
        long long97 = serializableConsumerRecord88.timestamp();
        java.io.Serializable serializable98 = serializableConsumerRecord88.key();
        long long99 = serializableConsumerRecord88.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str96, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 32L + "'", long97 == 32L);
        org.junit.Assert.assertEquals("'" + serializable98 + "' != '" + "hi!" + "'", serializable98, "hi!");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        long long18 = serializableConsumerRecord16.checksum();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord16.leaderEpoch();
        int int20 = serializableConsumerRecord16.serializedKeySize();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str39 = serializableConsumerRecord38.topic();
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord38.timestampType();
        java.lang.CharSequence charSequence45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType40, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence45);
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord46.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType60, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType47, (long) '#', 1, 0, (java.io.Serializable) timestampType60, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) (short) 1, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        int int67 = serializableConsumerRecord66.serializedKeySize();
        long long68 = serializableConsumerRecord66.checksum();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '#', (long) (short) 100, (java.lang.Object) wildcardClass21, (java.lang.Object) serializableConsumerRecord66);
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) 97, (java.lang.reflect.Type) wildcardClass21, timestampType71);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(intOptional69);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        int int23 = serializableConsumerRecord21.partition();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord21.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        long long43 = serializableConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord39.headers();
        java.lang.String str45 = serializableConsumerRecord39.toString();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord39.leaderEpoch();
        int int47 = serializableConsumerRecord39.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord39.timestampType();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 10, (long) (short) 10, (long) 0, timestampType25, (long) (byte) 1, (int) (short) 1, (int) (byte) 10, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str45, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNull(timestampType49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        java.io.Serializable serializable35 = null;
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable48 = serializableConsumerRecord47.key();
        long long49 = serializableConsumerRecord47.checksum();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord47.leaderEpoch();
        int int51 = serializableConsumerRecord47.serializedKeySize();
        int int52 = serializableConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) 0, 52L, timestampType31, (java.lang.Long) 35L, 35, 10, serializable35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers53);
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType59, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long66 = serializableConsumerRecord65.timestamp();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 0, 0L, 32L, timestampType17, 10L, (int) (short) 10, 0, timestampType31, (java.lang.Object) serializableConsumerRecord65);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long81 = serializableConsumerRecord80.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord80.timestampType();
        java.lang.Class<?> wildcardClass83 = timestampType82.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.CharSequence> typeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) -1, (-1L), (java.lang.reflect.Type) wildcardClass83, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord92.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, 100L, 32L, timestampType31, (java.lang.Long) (-1L), (int) '4', (int) (byte) 100, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93);
        long long95 = serializableConsumerRecord94.checksum();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.String str81 = serializableConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord58.leaderEpoch();
        int int83 = serializableConsumerRecord58.partition();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord58.leaderEpoch();
        long long85 = serializableConsumerRecord58.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional45, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass49 = intOptionalConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType10, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int52 = serializableConsumerRecord51.partition();
        java.lang.String str53 = serializableConsumerRecord51.topic();
        int int54 = serializableConsumerRecord51.partition();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord51.headers();
        int int56 = serializableConsumerRecord51.partition();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord51.timestampType();
        java.io.Serializable serializable58 = serializableConsumerRecord51.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str53, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(serializable58);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord42.timestampType();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        long long46 = serializableConsumerRecord42.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType51, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int58 = serializableConsumerRecord57.serializedValueSize();
        long long59 = serializableConsumerRecord57.offset();
        int int60 = serializableConsumerRecord57.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (long) 97, timestampType14, (java.lang.Long) (-1L), (int) (byte) 0, 32, serializableConsumerRecord42, intOptional61, headers68);
        long long70 = serializableConsumerRecord42.offset();
        java.lang.CharSequence charSequence71 = serializableConsumerRecord42.value();
        java.io.Serializable serializable72 = serializableConsumerRecord42.key();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (-1.0d) + "'", serializable45, (-1.0d));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (-1.0d) + "'", serializable72, (-1.0d));
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        java.lang.String str42 = serializableConsumerRecord39.toString();
        long long43 = serializableConsumerRecord39.checksum();
        java.lang.String str44 = serializableConsumerRecord39.toString();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord39.leaderEpoch();
        java.lang.String str46 = serializableConsumerRecord39.toString();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord39.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str42, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str44, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str46, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertNotNull(intOptional47);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.serializedValueSize();
        int int58 = serializableConsumerRecord56.serializedKeySize();
        int int59 = serializableConsumerRecord56.serializedKeySize();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("hi!", 52, (long) 35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers60);
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType66, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable73 = serializableConsumerRecord72.key();
        long long74 = serializableConsumerRecord72.checksum();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord72.leaderEpoch();
        long long76 = serializableConsumerRecord72.offset();
        java.lang.String str77 = serializableConsumerRecord72.toString();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) -1, (long) (byte) 0, (long) 1, timestampType17, (java.lang.Long) 1L, (int) '#', (int) (byte) 10, serializable40, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers60, intOptional78);
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord90.value();
        long long93 = serializableConsumerRecord90.timestamp();
        int int94 = serializableConsumerRecord90.serializedValueSize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object> intOptionalConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 100, (long) (byte) -1, intOptional78, (java.lang.Object) serializableConsumerRecord90);
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord90.headers();
        java.lang.CharSequence charSequence97 = serializableConsumerRecord90.value();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str77, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "hi!" + "'", charSequence92, "hi!");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertEquals("'" + charSequence97 + "' != '" + "hi!" + "'", charSequence97, "hi!");
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        java.lang.Object obj7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object> strComparableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) -1, (long) '#', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", obj7);
        java.lang.Class<?> wildcardClass9 = strComparableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> annotatedElementConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) 32, (java.lang.reflect.AnnotatedElement) wildcardClass9, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord32.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable50 = serializableConsumerRecord46.key();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType57, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int64 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType18, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers52, intOptional65);
        long long67 = serializableConsumerRecord66.offset();
        java.lang.String str68 = serializableConsumerRecord66.topic();
        int int69 = serializableConsumerRecord66.serializedKeySize();
        int int70 = serializableConsumerRecord66.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '#', 10L, (long) '4', timestampType71, 0L, (int) (short) 1, (int) (short) 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 0, 35L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 32, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + timestampType71 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType71.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long14 = serializableConsumerRecord13.timestamp();
        java.lang.String str15 = serializableConsumerRecord13.toString();
        int int16 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable21 = null;
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType27, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int34 = serializableConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord33.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord33.headers();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int45 = serializableConsumerRecord44.partition();
        int int46 = serializableConsumerRecord44.partition();
        long long47 = serializableConsumerRecord44.offset();
        java.lang.String str48 = serializableConsumerRecord44.toString();
        long long49 = serializableConsumerRecord44.checksum();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord44.timestampType();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) (byte) 0, 35L, (long) (short) -1, timestampType17, (java.lang.Long) 100L, 0, 32, serializable21, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers38, intOptional51);
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType60, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int67 = serializableConsumerRecord66.serializedValueSize();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        int int69 = serializableConsumerRecord66.serializedKeySize();
        int int70 = serializableConsumerRecord66.serializedKeySize();
        java.lang.String str71 = serializableConsumerRecord66.topic();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord66.headers();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord66.headers();
        java.lang.String str74 = serializableConsumerRecord66.toString();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) (short) 0, (long) 0, timestampType17, (long) (byte) 0, 52, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str48, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hi!" + "'", str71, "hi!");
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str74, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(timestampType17);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.timestamp();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        long long23 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        long long47 = serializableConsumerRecord44.offset();
        long long48 = serializableConsumerRecord44.timestamp();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        long long50 = serializableConsumerRecord44.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + 100 + "'", serializable46, 100);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType11, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence16);
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        int int20 = serializableConsumerRecord17.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 100 + "'", serializable19, 100);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        int int13 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType18, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence23);
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "");
        long long28 = serializableConsumerRecord27.timestamp();
        java.lang.String str29 = serializableConsumerRecord27.toString();
        java.lang.String str30 = serializableConsumerRecord27.toString();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord40.timestampType();
        int int42 = serializableConsumerRecord40.serializedValueSize();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        java.io.Serializable serializable44 = serializableConsumerRecord40.key();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord40.getClass();
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>> typeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)", (int) (byte) 100, 52L, (long) 32, timestampType31, (long) (short) 0, (int) (short) 0, 100, (java.lang.reflect.Type) wildcardClass46, headerIterable47);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str29, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str30, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (-1.0d) + "'", serializable43, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (-1.0d) + "'", serializable44, (-1.0d));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        long long12 = serializableConsumerRecord5.timestamp();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        int int15 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.partition();
        long long10 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertNull(timestampType22);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        int int29 = serializableConsumerRecord23.partition();
        long long30 = serializableConsumerRecord23.offset();
        int int31 = serializableConsumerRecord23.serializedValueSize();
        int int32 = serializableConsumerRecord23.partition();
        long long33 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord23.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertNotNull(intOptional35);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord5.headers();
        int int15 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord5.headers();
        java.lang.String str20 = serializableConsumerRecord5.toString();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str20, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional21);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        long long26 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        java.lang.String str28 = serializableConsumerRecord23.toString();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str28, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str27 = serializableConsumerRecord26.topic();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 10, 100L, (java.lang.reflect.AnnotatedElement) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        java.io.Serializable serializable47 = serializableConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String> headersConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String>("hi!", (int) (byte) 10, (long) (byte) -1, headers49, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, (long) (byte) 10, 97L, timestampType14, (java.lang.Long) 1L, 32, 1, (java.io.Serializable) 100L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers49);
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord52.headers();
        int int54 = serializableConsumerRecord52.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + false + "'", serializable12, false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 1 + "'", serializable47, (short) 1);
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 32 + "'", int54 == 32);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        java.io.Serializable serializable11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 100, (-1L), serializable11, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 100, (long) (byte) 10, (java.io.Serializable) 35L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long26 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord25.headers();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable41 = serializableConsumerRecord40.key();
        java.lang.CharSequence charSequence42 = serializableConsumerRecord40.value();
        long long43 = serializableConsumerRecord40.timestamp();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord40.value();
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord40.timestampType();
        long long46 = serializableConsumerRecord40.offset();
        int int47 = serializableConsumerRecord40.partition();
        int int48 = serializableConsumerRecord40.partition();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord40.headers();
        long long50 = serializableConsumerRecord40.checksum();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord40.value();
        java.io.Serializable serializable52 = serializableConsumerRecord40.key();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord40.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord59.timestampType();
        int int61 = serializableConsumerRecord59.serializedValueSize();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord59.headers();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 0, (long) 32, (long) (short) 10, timestampType16, (java.lang.Long) 100L, (int) 'a', (int) (short) 10, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)), partition = 97, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", headers53, intOptional63);
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType72, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int79 = serializableConsumerRecord78.serializedValueSize();
        int int80 = serializableConsumerRecord78.serializedValueSize();
        long long81 = serializableConsumerRecord78.offset();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord78.value();
        java.io.Serializable serializable83 = serializableConsumerRecord78.key();
        long long84 = serializableConsumerRecord78.checksum();
        java.io.Serializable serializable85 = serializableConsumerRecord78.key();
        java.io.Serializable serializable86 = serializableConsumerRecord78.key();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord78.value();
        java.lang.Class<?> wildcardClass88 = charSequence87.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', 0L, 32L, timestampType16, 100L, 35, (int) '#', (java.io.Serializable) wildcardClass88, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertNull(serializable14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertNull(timestampType45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1L + "'", long81 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + 10.0f + "'", serializable83, 10.0f);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertEquals("'" + serializable85 + "' != '" + 10.0f + "'", serializable85, 10.0f);
        org.junit.Assert.assertEquals("'" + serializable86 + "' != '" + 10.0f + "'", serializable86, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNull(timestampType20);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord64.leaderEpoch();
        java.io.Serializable serializable67 = serializableConsumerRecord64.key();
        long long68 = serializableConsumerRecord64.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (byte) 10 + "'", serializable67, (byte) 10);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType31, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers49);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord61.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.common.record.TimestampType timestampType78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType78, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence85 = serializableConsumerRecord84.value();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType68, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers86);
        java.util.Optional<java.lang.Integer> intOptional88 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType23, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, headers63, headers86, intOptional88);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord16, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers63);
        long long91 = serializableConsumerRecord16.checksum();
        java.lang.Class<?> wildcardClass92 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) -1, (long) 10, (java.io.Serializable) wildcardClass92, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int95 = serializableConsumerRecord94.serializedValueSize();
        java.lang.CharSequence charSequence96 = serializableConsumerRecord94.value();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence96, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        int int12 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord42.value();
        long long45 = serializableConsumerRecord42.timestamp();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 0, 97L, timestampType31, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47);
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        java.lang.String str67 = serializableConsumerRecord64.toString();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        long long69 = serializableConsumerRecord64.timestamp();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) ' ', (long) '4', timestampType13, (java.lang.Long) (-1L), (int) (byte) 10, (int) (short) 0, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers70);
        java.util.Optional<java.lang.Integer> intOptional73 = serializableConsumerRecord72.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(intOptional73);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        int int43 = serializableConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType26, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType26, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType26, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers71);
        java.lang.CharSequence charSequence73 = serializableConsumerRecord72.value();
        java.lang.String str74 = serializableConsumerRecord72.topic();
        java.lang.CharSequence charSequence75 = serializableConsumerRecord72.value();
        java.lang.String str76 = serializableConsumerRecord72.topic();
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> charSequenceConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType77);
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!), partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", (int) (short) -1, (long) (short) 1, 32L, timestampType77, (long) (byte) 1, (int) ' ', 1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 100, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", charSequence83);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertEquals("'" + charSequence73 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence73, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence75, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        int int78 = serializableConsumerRecord58.partition();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        java.lang.String str28 = serializableConsumerRecord23.topic();
        long long29 = serializableConsumerRecord23.offset();
        int int30 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        java.lang.CharSequence charSequence11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence11);
        java.io.Serializable serializable13 = serializableConsumerRecord12.key();
        int int14 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence23);
        java.io.Serializable serializable25 = serializableConsumerRecord24.key();
        int int26 = serializableConsumerRecord24.serializedValueSize();
        int int27 = serializableConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType33, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int40 = serializableConsumerRecord39.partition();
        java.util.Optional<java.lang.Integer> intOptional41 = serializableConsumerRecord39.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, 97L, 52L, timestampType15, (java.lang.Long) (-1L), 1, 35, serializableConsumerRecord24, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int51 = serializableConsumerRecord50.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord50.leaderEpoch();
        long long53 = serializableConsumerRecord50.checksum();
        int int54 = serializableConsumerRecord50.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord50.leaderEpoch();
        int int56 = serializableConsumerRecord50.serializedKeySize();
        long long57 = serializableConsumerRecord50.timestamp();
        int int58 = serializableConsumerRecord50.serializedValueSize();
        int int59 = serializableConsumerRecord50.serializedValueSize();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Object> headersConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", 32, (long) (short) 100, headers43, (java.lang.Object) serializableConsumerRecord50);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable25, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intOptional41);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable15 = serializableConsumerRecord14.key();
        long long16 = serializableConsumerRecord14.offset();
        int int17 = serializableConsumerRecord14.serializedValueSize();
        int int18 = serializableConsumerRecord14.partition();
        java.io.Serializable serializable19 = serializableConsumerRecord14.key();
        java.io.Serializable serializable20 = serializableConsumerRecord14.key();
        int int21 = serializableConsumerRecord14.partition();
        java.io.Serializable serializable22 = serializableConsumerRecord14.key();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>> strComparableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", 0, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", intOptional23);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNotNull(intOptional23);
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        int int15 = serializableConsumerRecord13.partition();
        java.lang.String str16 = serializableConsumerRecord13.topic();
        long long17 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        java.lang.String str37 = serializableConsumerRecord32.topic();
        long long38 = serializableConsumerRecord32.checksum();
        long long39 = serializableConsumerRecord32.checksum();
        java.lang.String str40 = serializableConsumerRecord32.topic();
        long long41 = serializableConsumerRecord32.timestamp();
        int int42 = serializableConsumerRecord32.serializedValueSize();
        java.lang.String str43 = serializableConsumerRecord32.topic();
        int int44 = serializableConsumerRecord32.serializedValueSize();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String> annotatedElementConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 100, 97L, 100L, timestampType18, (long) (-1), (int) '4', (int) (byte) 100, (java.lang.reflect.AnnotatedElement) wildcardClass45, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        int int63 = serializableConsumerRecord61.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord61.leaderEpoch();
        java.lang.Class<?> wildcardClass65 = intOptional64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) (short) 1, (long) (byte) 10, timestampType18, (long) (short) 0, (-1), 0, (java.io.Serializable) wildcardClass65, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = 0, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ))");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int6 = serializableConsumerRecord5.serializedKeySize();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L + "'", long8 == 100L);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType30, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass20, timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 100, 1L, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord35.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType40, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int47 = serializableConsumerRecord46.serializedValueSize();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        int int49 = serializableConsumerRecord46.serializedKeySize();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable62 = serializableConsumerRecord61.key();
        long long63 = serializableConsumerRecord61.checksum();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord61.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType30, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers50, intOptional64);
        long long66 = serializableConsumerRecord65.timestamp();
        java.lang.Class<?> wildcardClass67 = serializableConsumerRecord65.getClass();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        java.lang.String str81 = serializableConsumerRecord79.topic();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord79.value();
        int int83 = serializableConsumerRecord79.serializedKeySize();
        long long84 = serializableConsumerRecord79.offset();
        int int85 = serializableConsumerRecord79.serializedValueSize();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 52, (long) (byte) 100, (long) (byte) 0, timestampType4, (java.lang.Long) 32L, 1, (int) (short) 1, (java.io.Serializable) wildcardClass67, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers86);
        java.io.Serializable serializable88 = serializableConsumerRecord87.key();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 10L + "'", long66 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertNotNull(serializable88);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord23.timestampType();
        int int29 = serializableConsumerRecord23.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional30 = serializableConsumerRecord23.leaderEpoch();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord23.getClass();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.String> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.String>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, 10L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ), partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.checksum();
        long long89 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord13.timestampType();
        java.lang.String str92 = serializableConsumerRecord13.topic();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNull(timestampType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + 10.0f + "'", serializable20, 10.0f);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        java.io.Serializable serializable43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType20, (long) 0, 0, 0, serializable43, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass46 = timestampType20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 1, (long) 35, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        long long52 = serializableConsumerRecord50.timestamp();
        java.lang.CharSequence charSequence53 = serializableConsumerRecord50.value();
        long long54 = serializableConsumerRecord50.offset();
        long long55 = serializableConsumerRecord50.offset();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", charSequence51, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", charSequence53, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 35L + "'", long54 == 35L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 35L + "'", long55 == 35L);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.offset();
        long long19 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.partition();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        long long47 = serializableConsumerRecord44.offset();
        long long48 = serializableConsumerRecord44.timestamp();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord44.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + 100 + "'", serializable46, 100);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(intOptional49);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        long long14 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str13, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        long long14 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.timestamp();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        int int29 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType18, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord46.headers();
        java.lang.Class<?> wildcardClass49 = headers48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 35, 35L, (long) 52, timestampType30, (long) '4', (int) (byte) 0, (int) (short) 1, (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, 100L, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        int int54 = serializableConsumerRecord53.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        java.io.Serializable serializable33 = serializableConsumerRecord31.key();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord31.timestampType();
        long long35 = serializableConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers36 = serializableConsumerRecord31.headers();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType17, 0L, 32, (int) (byte) 10, headers38, serializableConsumerRecord39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        java.io.Serializable serializable70 = serializableConsumerRecord68.key();
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord68.timestampType();
        long long72 = serializableConsumerRecord68.offset();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord68.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord68.timestampType();
        org.apache.kafka.common.header.Headers headers75 = serializableConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType54, 0L, 32, (int) (byte) 10, headers75, serializableConsumerRecord76);
        java.lang.CharSequence charSequence78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) (short) 0, (long) (short) 10, timestampType17, (long) (byte) 100, (int) (byte) 10, 97, (java.io.Serializable) timestampType54, charSequence78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) (byte) 100, (long) (short) 0, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        java.lang.Class<?> wildcardClass82 = serializableConsumerRecord81.getClass();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (short) 1 + "'", serializable70, (short) 1);
        org.junit.Assert.assertNull(timestampType71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 10, (long) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        int int96 = serializableConsumerRecord92.serializedKeySize();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        long long98 = serializableConsumerRecord92.timestamp();
        int int99 = serializableConsumerRecord92.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord35.getClass();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        int int51 = serializableConsumerRecord49.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord49.leaderEpoch();
        java.io.Serializable serializable53 = serializableConsumerRecord49.key();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord49.leaderEpoch();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord49.headers();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType60, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int67 = serializableConsumerRecord66.partition();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType21, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers55, intOptional68);
        long long70 = serializableConsumerRecord69.offset();
        java.lang.String str71 = serializableConsumerRecord69.topic();
        int int72 = serializableConsumerRecord69.serializedKeySize();
        int int73 = serializableConsumerRecord69.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 0, (long) 1, (java.io.Serializable) timestampType74, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 1, (long) '#', "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord83.timestampType();
        long long85 = serializableConsumerRecord83.timestamp();
        java.lang.Class<?> wildcardClass86 = serializableConsumerRecord83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type> timestampTypeConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 97, 35L, timestampType74, (java.lang.reflect.Type) wildcardClass86);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str71, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 52 + "'", int72 == 52);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType28, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional46);
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType28, (long) 0, 0, 0, serializable51, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass54 = timestampType28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass54, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.io.Serializable) timestampType57, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (-1), 0L, 100L, timestampType4, (long) (byte) 0, (-1), (-1), (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)), partition = 97, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 52, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        long long13 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.checksum();
        long long12 = serializableConsumerRecord10.timestamp();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord21.getClass();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType29, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType7, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass23, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers47);
        long long50 = serializableConsumerRecord49.checksum();
        long long51 = serializableConsumerRecord49.checksum();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 52, (long) 97, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        int int57 = serializableConsumerRecord54.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord54.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L + "'", long50 == 100L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(intOptional58);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord23.value();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        long long30 = serializableConsumerRecord23.checksum();
        long long31 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord23.headers();
        int int33 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.partition();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable21 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        int int35 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.header.Headers headers36 = serializableConsumerRecord33.headers();
        java.lang.String str37 = serializableConsumerRecord33.toString();
        int int38 = serializableConsumerRecord33.partition();
        java.lang.String str39 = serializableConsumerRecord33.topic();
        java.lang.CharSequence charSequence40 = serializableConsumerRecord33.value();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType47, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers65);
        long long67 = serializableConsumerRecord66.timestamp();
        long long68 = serializableConsumerRecord66.timestamp();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord66.value();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) -1, (long) 'a', (long) (short) -1, timestampType22, (java.lang.Long) 97L, (-1), 32, (java.io.Serializable) timestampType41, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers70);
        java.lang.Object obj78 = new java.lang.Object();
        java.lang.Class<?> wildcardClass79 = obj78.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 52, (long) 0, (long) (short) -1, timestampType22, (long) 0, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) 32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType> strConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", timestampType22);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + 100.0f + "'", serializable21, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(headers36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str37, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence40, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (short) 1 + "'", serializable8, (short) 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L + "'", long9 == 100L);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType44, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional62);
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType69, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence76 = serializableConsumerRecord75.value();
        int int77 = serializableConsumerRecord75.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord75.leaderEpoch();
        java.io.Serializable serializable79 = serializableConsumerRecord75.key();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType30, (java.lang.Long) 10L, (int) '#', 35, timestampType44, "hi!", headers80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType13, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType30, (java.lang.CharSequence) "");
        long long86 = serializableConsumerRecord85.timestamp();
        int int87 = serializableConsumerRecord85.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord85.timestampType();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 35L + "'", long86 == 35L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecordConsumerRecord31.getClass();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord23.value();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord23.getClass();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        long long92 = serializableConsumerRecord88.offset();
        int int93 = serializableConsumerRecord88.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord12.headers();
        long long16 = serializableConsumerRecord12.checksum();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        long long84 = serializableConsumerRecord83.checksum();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord83.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType86 = serializableConsumerRecord83.timestampType();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord83.value();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence87, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        java.io.Serializable serializable15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) '#', (long) (byte) 100, serializable15, (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType> strComparableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)", (int) 'a', (long) (short) 10, (long) (short) 0, timestampType7, (long) (byte) 100, (int) (byte) 10, 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", timestampType19);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        int int35 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType41, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int48 = serializableConsumerRecord47.serializedValueSize();
        int int49 = serializableConsumerRecord47.serializedValueSize();
        long long50 = serializableConsumerRecord47.offset();
        org.apache.kafka.common.header.Headers headers51 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType36, serializableConsumerRecord47);
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        long long69 = serializableConsumerRecord66.offset();
        java.lang.Class<?> wildcardClass70 = serializableConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        long long78 = serializableConsumerRecord76.timestamp();
        int int79 = serializableConsumerRecord76.serializedKeySize();
        java.lang.String str80 = serializableConsumerRecord76.toString();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', (long) (short) 0, (long) 0, timestampType36, (long) (byte) 1, (int) (short) 100, (int) (byte) -1, (java.lang.reflect.Type) wildcardClass70, (java.lang.Object) headers81);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeEnumConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 32, (long) (short) -1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType7, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers81);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1L + "'", long50 == 1L);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str80, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertNotNull(headers81);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.io.Serializable serializable81 = serializableConsumerRecord58.key();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord5.value();
        long long15 = serializableConsumerRecord5.timestamp();
        java.io.Serializable serializable16 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.checksum();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord32.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable50 = serializableConsumerRecord46.key();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord46.headers();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType57, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int64 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType18, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers52, intOptional65);
        long long67 = serializableConsumerRecord66.offset();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        long long69 = serializableConsumerRecord66.offset();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long80 = serializableConsumerRecord79.timestamp();
        java.lang.String str81 = serializableConsumerRecord79.toString();
        long long82 = serializableConsumerRecord79.offset();
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 35, (long) (byte) 0, (long) 0, timestampType70, (long) 0, (int) ' ', (int) (short) 100, (java.io.Serializable) timestampType83, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) (byte) 1, 100L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.io.Serializable serializable88 = serializableConsumerRecord87.key();
        java.lang.Class<?> wildcardClass89 = serializable88.getClass();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str81, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable88 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))" + "'", serializable88, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord9.key();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType21, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        int int29 = serializableConsumerRecord27.serializedKeySize();
        long long30 = serializableConsumerRecord27.checksum();
        int int31 = serializableConsumerRecord27.partition();
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord27.getClass();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        int int46 = serializableConsumerRecord44.serializedKeySize();
        long long47 = serializableConsumerRecord44.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord60.headers();
        java.lang.String str63 = serializableConsumerRecord60.toString();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord60.value();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord60.timestampType();
        int int66 = serializableConsumerRecord60.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 0, (long) 97, 0L, timestampType13, (java.lang.Long) 35L, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", headers49, intOptional67);
        java.io.Serializable serializable69 = serializableConsumerRecord68.key();
        java.io.Serializable serializable70 = serializableConsumerRecord68.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(serializable69);
        org.junit.Assert.assertNotNull(serializable70);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable46 = serializableConsumerRecord45.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        int int48 = serializableConsumerRecord45.serializedKeySize();
        java.io.Serializable serializable49 = serializableConsumerRecord45.key();
        long long50 = serializableConsumerRecord45.offset();
        int int51 = serializableConsumerRecord45.partition();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord45.headers();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(serializable49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers53);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, (long) (byte) 10, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.io.Serializable serializable94 = serializableConsumerRecord93.key();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        int int96 = serializableConsumerRecord93.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 0 + "'", serializable94, (short) 0);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass7, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        java.lang.Class<?> wildcardClass11 = timestampType10.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, 100L, (java.io.Serializable) wildcardClass11, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        int int14 = serializableConsumerRecord13.partition();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.timestamp();
        long long16 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        java.lang.String str56 = serializableConsumerRecord54.topic();
        int int57 = serializableConsumerRecord54.serializedKeySize();
        long long58 = serializableConsumerRecord54.offset();
        java.lang.String str59 = serializableConsumerRecord54.toString();
        int int60 = serializableConsumerRecord54.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str56, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)" + "'", str59, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        int int26 = serializableConsumerRecord23.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord23.topic();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        long long30 = serializableConsumerRecord23.timestamp();
        long long31 = serializableConsumerRecord23.timestamp();
        long long32 = serializableConsumerRecord23.checksum();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        java.io.Serializable serializable63 = serializableConsumerRecord59.key();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        int int65 = serializableConsumerRecord59.partition();
        java.lang.CharSequence charSequence66 = serializableConsumerRecord59.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertNotNull(serializable63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        long long13 = serializableConsumerRecord5.timestamp();
        java.lang.String str14 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord10.leaderEpoch();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str12 = serializableConsumerRecord11.topic();
        int int13 = serializableConsumerRecord11.serializedValueSize();
        java.lang.Class<?> wildcardClass14 = serializableConsumerRecord11.getClass();
        java.lang.CharSequence charSequence15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 100, 97L, (java.io.Serializable) wildcardClass14, charSequence15);
        java.lang.CharSequence charSequence17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!), partition = 0, leaderEpoch = null, offset = 32, NoTimestampType = 52, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = null)", 100, (long) 52, (java.io.Serializable) 97L, charSequence17);
        int int19 = serializableConsumerRecord18.partition();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.lang.String str66 = serializableConsumerRecord64.topic();
        int int67 = serializableConsumerRecord64.partition();
        int int68 = serializableConsumerRecord64.partition();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord64.leaderEpoch();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord64.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord84.value();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord84.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertNotNull(intOptional88);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass44, timestampType54);
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType54, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType19, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int92 = serializableConsumerRecord91.partition();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) '#', (long) (byte) 0, timestampType19, (java.lang.Long) 52L, (int) (short) 0, (int) (short) 100, serializable84, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93);
        long long95 = serializableConsumerRecord94.checksum();
        int int96 = serializableConsumerRecord94.partition();
        int int97 = serializableConsumerRecord94.serializedValueSize();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord94.value();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 52L + "'", long95 == 52L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence98, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        long long18 = serializableConsumerRecord16.checksum();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord16.value();
        int int20 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord16.leaderEpoch();
        int int22 = serializableConsumerRecord16.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 0, (long) (byte) 10, serializableConsumerRecord16, timestampType29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 35, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long33 = serializableConsumerRecord32.offset();
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str21 = serializableConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long36 = serializableConsumerRecord35.checksum();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord35.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) (byte) 10, (long) (byte) 10, timestampType22, (java.lang.Long) (-1L), (int) (byte) 100, (int) (short) 0, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", headers37);
        long long39 = serializableConsumerRecord38.offset();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long48 = serializableConsumerRecord47.checksum();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.String str50 = serializableConsumerRecord47.topic();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord47.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord47.leaderEpoch();
        int int53 = serializableConsumerRecord47.serializedValueSize();
        org.apache.kafka.common.header.Headers headers54 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', (long) '4', 0L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 10, (int) 'a', (java.io.Serializable) wildcardClass40, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers54);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(headers54);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.timestamp();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedValueSize();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord59.value();
        int int68 = serializableConsumerRecord59.serializedKeySize();
        int int69 = serializableConsumerRecord59.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord93.leaderEpoch();
        java.lang.String str95 = serializableConsumerRecord93.toString();
        java.io.Serializable serializable96 = serializableConsumerRecord93.key();
        int int97 = serializableConsumerRecord93.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))" + "'", str95, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertEquals("'" + serializable96 + "' != '" + (short) 0 + "'", serializable96, (short) 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100.0f + "'", serializable7, 100.0f);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str10, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (short) 10, serializable3, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        long long9 = serializableConsumerRecord5.checksum();
        long long10 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord67.leaderEpoch();
        java.io.Serializable serializable70 = serializableConsumerRecord67.key();
        long long71 = serializableConsumerRecord67.timestamp();
        java.lang.CharSequence charSequence72 = serializableConsumerRecord67.value();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 0, 0L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers73, "");
        java.lang.Class<?> wildcardClass76 = headerIterableConsumerRecord75.getClass();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (byte) 10 + "'", serializable70, (byte) 10);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence72, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedKeySize();
        java.lang.Class<?> wildcardClass10 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = 97, serialized key size = 35, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (short) 1, (-1L), (java.io.Serializable) wildcardClass10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        int int12 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord42.value();
        long long45 = serializableConsumerRecord42.timestamp();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 0, 97L, timestampType31, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47);
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        java.lang.String str67 = serializableConsumerRecord64.toString();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        long long69 = serializableConsumerRecord64.timestamp();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) ' ', (long) '4', timestampType13, (java.lang.Long) (-1L), (int) (byte) 10, (int) (short) 0, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers70);
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord72.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.io.Serializable serializable13 = serializableConsumerRecord9.key();
        int int14 = serializableConsumerRecord9.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord9.topic();
        int int16 = serializableConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord29.timestampType();
        java.io.Serializable serializable32 = serializableConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.String str36 = serializableConsumerRecord35.topic();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord35.leaderEpoch();
        long long38 = serializableConsumerRecord35.timestamp();
        long long39 = serializableConsumerRecord35.offset();
        int int40 = serializableConsumerRecord35.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 100, (long) (short) 10, (-1L), timestampType17, (long) 100, (int) (short) 10, (int) 'a', serializableConsumerRecord35, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 1.0f + "'", serializable32, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str36, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.io.Serializable serializable59 = serializableConsumerRecord57.key();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord57.timestampType();
        long long61 = serializableConsumerRecord57.offset();
        java.lang.String str62 = serializableConsumerRecord57.topic();
        long long63 = serializableConsumerRecord57.checksum();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord57.value();
        int int65 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType70, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int77 = serializableConsumerRecord76.serializedValueSize();
        int int78 = serializableConsumerRecord76.serializedValueSize();
        long long79 = serializableConsumerRecord76.timestamp();
        java.lang.String str80 = serializableConsumerRecord76.topic();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord76.headers();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord76.value();
        int int83 = serializableConsumerRecord76.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int90 = serializableConsumerRecord89.serializedValueSize();
        int int91 = serializableConsumerRecord89.serializedValueSize();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord89.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> objConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, 32L, 10L, timestampType18, (java.lang.Long) 52L, 35, (int) (short) 0, (java.lang.Object) serializableConsumerRecord57, serializableConsumerRecord76, headers92);
        java.lang.String str94 = serializableConsumerRecord57.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertNull(timestampType60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType15, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        int int23 = serializableConsumerRecord21.serializedKeySize();
        int int24 = serializableConsumerRecord21.serializedKeySize();
        int int25 = serializableConsumerRecord21.serializedKeySize();
        int int26 = serializableConsumerRecord21.partition();
        java.lang.String str27 = serializableConsumerRecord21.topic();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord21.value();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord21.leaderEpoch();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord21.headers();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord21.headers();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord21.getClass();
        java.lang.CharSequence charSequence34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 0, 100L, (java.io.Serializable) wildcardClass33, charSequence34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 52, (long) 32, (long) '4', timestampType4, 0L, (int) (short) -1, (int) (byte) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 97, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = null)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedKeySize();
        int int67 = serializableConsumerRecord59.serializedValueSize();
        long long68 = serializableConsumerRecord59.offset();
        int int69 = serializableConsumerRecord59.serializedValueSize();
        java.lang.String str70 = serializableConsumerRecord59.topic();
        long long71 = serializableConsumerRecord59.offset();
        long long72 = serializableConsumerRecord59.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L + "'", long71 == 100L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 10L + "'", long72 == 10L);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        int int96 = serializableConsumerRecord95.serializedKeySize();
        int int97 = serializableConsumerRecord95.partition();
        long long98 = serializableConsumerRecord95.offset();
        java.io.Serializable serializable99 = serializableConsumerRecord95.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
        org.junit.Assert.assertEquals("'" + serializable99 + "' != '" + (byte) 0 + "'", serializable99, (byte) 0);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        long long68 = serializableConsumerRecord62.timestamp();
        int int69 = serializableConsumerRecord62.serializedValueSize();
        java.lang.String str70 = serializableConsumerRecord62.toString();
        java.lang.String str71 = serializableConsumerRecord62.topic();
        java.io.Serializable serializable72 = serializableConsumerRecord62.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)", (int) (short) 100, (-1L), serializable72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord74.timestampType();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str71, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(serializable72);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        java.lang.String str19 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        java.io.Serializable serializable36 = serializableConsumerRecord34.key();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord34.timestampType();
        long long38 = serializableConsumerRecord34.offset();
        java.lang.String str39 = serializableConsumerRecord34.topic();
        long long40 = serializableConsumerRecord34.checksum();
        long long41 = serializableConsumerRecord34.checksum();
        java.lang.String str42 = serializableConsumerRecord34.topic();
        long long43 = serializableConsumerRecord34.timestamp();
        java.lang.String str44 = serializableConsumerRecord34.topic();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (-1), 32L, timestampType20, (long) 35, 10, (int) (short) 1, (java.io.Serializable) wildcardClass45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) (short) 10, (long) 52, (long) 35, timestampType20, (long) (short) -1, 0, 100, serializable51, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int54 = serializableConsumerRecord53.partition();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (-1.0d) + "'", serializable16, (-1.0d));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertNull(timestampType37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.partition();
        java.lang.String str10 = serializableConsumerRecord8.topic();
        java.lang.String str11 = serializableConsumerRecord8.toString();
        long long12 = serializableConsumerRecord8.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) 32, (java.io.Serializable) timestampType13, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord15.headers();
        java.io.Serializable serializable17 = serializableConsumerRecord15.key();
        int int18 = serializableConsumerRecord15.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + serializable17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.String str65 = serializableConsumerRecord64.topic();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        long long67 = serializableConsumerRecord64.checksum();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord64.leaderEpoch();
        long long69 = serializableConsumerRecord64.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "hi!" + "'", str65, "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        long long46 = serializableConsumerRecord44.checksum();
        long long47 = serializableConsumerRecord44.offset();
        java.lang.String str48 = serializableConsumerRecord44.topic();
        int int49 = serializableConsumerRecord44.partition();
        int int50 = serializableConsumerRecord44.serializedValueSize();
        int int51 = serializableConsumerRecord44.partition();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.partition();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        long long46 = serializableConsumerRecord43.offset();
        int int47 = serializableConsumerRecord43.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord43.timestampType();
        int int49 = serializableConsumerRecord43.serializedKeySize();
        java.io.Serializable serializable50 = serializableConsumerRecord43.key();
        java.lang.Class<?> wildcardClass51 = serializable50.getClass();
        java.lang.CharSequence charSequence52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) 97, (long) (byte) 10, timestampType29, (long) 100, 35, (int) ' ', serializable50, charSequence52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) -1, 97L, (long) 'a', timestampType15, 10L, (int) (short) 0, (int) (short) -1, serializable50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!), partition = 100, leaderEpoch = null, offset = 32, null = 0, serialized key size = 10, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) '4', (long) 52, serializable50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 97, serialized key size = -1, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.String, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord58.leaderEpoch();
        long long80 = serializableConsumerRecord58.checksum();
        int int81 = serializableConsumerRecord58.partition();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord58.headers();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(headers82);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        int int84 = serializableConsumerRecord83.serializedValueSize();
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord83.headers();
        long long86 = serializableConsumerRecord83.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L + "'", long86 == 100L);
    }
}

