import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord23.headers();
        int int27 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable29 = serializableConsumerRecord23.key();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        java.io.Serializable serializable32 = serializableConsumerRecord23.key();
        long long33 = serializableConsumerRecord23.checksum();
        long long34 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord23.headers();
        int int36 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 10 + "'", serializable29, 10);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertNotNull(headers31);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 10 + "'", serializable32, 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        int int67 = serializableConsumerRecord59.partition();
        java.io.Serializable serializable68 = serializableConsumerRecord59.key();
        int int69 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(serializable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        long long18 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        int int23 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass14 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        long long19 = serializableConsumerRecord17.timestamp();
        long long20 = serializableConsumerRecord17.timestamp();
        long long21 = serializableConsumerRecord17.checksum();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord17.value();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "" + "'", charSequence22, "");
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        long long15 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.checksum();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        java.io.Serializable serializable6 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', 0L, serializable6, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) (short) 0, 100L, serializableConsumerRecord8, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        java.io.Serializable serializable43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType20, (long) 0, 0, 0, serializable43, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass46 = timestampType20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 1, (long) 35, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        long long52 = serializableConsumerRecord50.offset();
        int int53 = serializableConsumerRecord50.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 35L + "'", long52 == 35L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord6 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 100, (long) 100, (java.io.Serializable) wildcardClass4, (java.lang.CharSequence) "");
        java.io.Serializable serializable7 = serializableConsumerRecord6.key();
        java.io.Serializable serializable8 = serializableConsumerRecord6.key();
        long long9 = serializableConsumerRecord6.timestamp();
        long long10 = serializableConsumerRecord6.offset();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(serializable7);
        org.junit.Assert.assertNotNull(serializable8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        long long12 = serializableConsumerRecord5.checksum();
        java.lang.String str13 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        int int15 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 1.0f + "'", serializable10, 1.0f);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord64.headers();
        int int69 = serializableConsumerRecord64.serializedValueSize();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord64.value();
        int int71 = serializableConsumerRecord64.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 32 + "'", int69 == 32);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 32 + "'", int71 == 32);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        java.lang.CharSequence charSequence93 = serializableConsumerRecord88.value();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence93, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord23.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord23.timestampType();
        int int31 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable32 = serializableConsumerRecord23.key();
        java.lang.Class<?> wildcardClass33 = serializable32.getClass();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertNull(timestampType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + 10 + "'", serializable32, 10);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "");
        int int18 = serializableConsumerRecord17.partition();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord17.value();
        long long20 = serializableConsumerRecord17.timestamp();
        long long21 = serializableConsumerRecord17.offset();
        long long22 = serializableConsumerRecord17.checksum();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord17.headers();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "" + "'", charSequence19, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType29, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers47);
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType66, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers84);
        java.util.Optional<java.lang.Integer> intOptional86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType21, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47, headers61, headers84, intOptional86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int94 = serializableConsumerRecord93.partition();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 10, (long) 'a', (long) 100, timestampType11, (java.lang.Long) 100L, (int) (byte) 10, (int) (byte) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", headers61, intOptional95);
        java.lang.String str97 = serializableConsumerRecord96.toString();
        int int98 = serializableConsumerRecord96.partition();
        java.lang.String str99 = serializableConsumerRecord96.topic();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str97, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "hi!" + "'", str99, "hi!");
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        java.io.Serializable serializable22 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType34, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass24, timestampType34);
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType34, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) 100, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        long long61 = serializableConsumerRecord59.checksum();
        int int62 = serializableConsumerRecord59.serializedValueSize();
        int int63 = serializableConsumerRecord59.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence60, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str16 = serializableConsumerRecord13.topic();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long36 = serializableConsumerRecord35.offset();
        int int37 = serializableConsumerRecord35.partition();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 10, (long) 1, (long) (-1), timestampType26, 97L, (int) (short) 0, 10, (java.io.Serializable) timestampType38, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        java.io.Serializable serializable60 = serializableConsumerRecord58.key();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord58.timestampType();
        long long62 = serializableConsumerRecord58.offset();
        java.lang.String str63 = serializableConsumerRecord58.topic();
        long long64 = serializableConsumerRecord58.checksum();
        long long65 = serializableConsumerRecord58.checksum();
        int int66 = serializableConsumerRecord58.serializedKeySize();
        long long67 = serializableConsumerRecord58.checksum();
        java.lang.String str68 = serializableConsumerRecord58.topic();
        long long69 = serializableConsumerRecord58.checksum();
        long long70 = serializableConsumerRecord58.offset();
        java.lang.Class<?> wildcardClass71 = serializableConsumerRecord58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement> strComparableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (java.lang.reflect.AnnotatedElement) wildcardClass71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>> annotatedElementConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )", 0, (long) 'a', (long) (short) 0, timestampType26, (long) 0, (int) '#', (int) '#', (java.lang.reflect.AnnotatedElement) wildcardClass71, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement> intOptionalConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) (short) 100, intOptional17, (java.lang.reflect.AnnotatedElement) wildcardClass71);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertNull(timestampType61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (-1), 100L, (long) 32, timestampType18, (long) '4', (int) (byte) 0, (int) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)");
        long long50 = serializableConsumerRecord49.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 32L + "'", long50 == 32L);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + 100.0f + "'", serializable7, 100.0f);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 100.0f + "'", serializable11, 100.0f);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.io.Serializable serializable93 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) 0, (long) (short) 100, timestampType17, (long) (-1), (-1), 52, serializable93, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence96 = serializableConsumerRecord95.value();
        long long97 = serializableConsumerRecord95.offset();
        java.util.Optional<java.lang.Integer> intOptional98 = serializableConsumerRecord95.leaderEpoch();
        java.lang.Class<?> wildcardClass99 = intOptional98.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "hi!" + "'", charSequence96, "hi!");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        java.lang.CharSequence charSequence15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence15);
        java.io.Serializable serializable17 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.partition();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord27.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        java.lang.String str45 = serializableConsumerRecord42.toString();
        int int46 = serializableConsumerRecord42.serializedValueSize();
        long long47 = serializableConsumerRecord42.checksum();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        java.lang.reflect.Type type52 = null;
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord63.value();
        long long66 = serializableConsumerRecord63.timestamp();
        long long67 = serializableConsumerRecord63.checksum();
        int int68 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 1, type52, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 52L, 97L, timestampType18, (java.lang.Long) 0L, (int) ' ', (-1), (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers48, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str81 = serializableConsumerRecord80.topic();
        int int82 = serializableConsumerRecord80.partition();
        java.lang.String str83 = serializableConsumerRecord80.topic();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord80.headers();
        java.lang.CharSequence charSequence85 = serializableConsumerRecord80.value();
        int int86 = serializableConsumerRecord80.serializedValueSize();
        java.lang.Class<?> wildcardClass87 = serializableConsumerRecord80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) 32, 0L, timestampType30, (-1L), 1, (int) (short) 1, (java.io.Serializable) wildcardClass87, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, (long) 1, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (byte) 10 + "'", serializable17, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str45, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.String str46 = serializableConsumerRecord45.toString();
        java.lang.String str47 = serializableConsumerRecord45.toString();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str47, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence23);
        long long25 = serializableConsumerRecord24.offset();
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord24.leaderEpoch();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord24.headers();
        java.lang.String str28 = serializableConsumerRecord24.toString();
        long long29 = serializableConsumerRecord24.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        java.lang.String str46 = serializableConsumerRecord41.topic();
        long long47 = serializableConsumerRecord41.offset();
        int int48 = serializableConsumerRecord41.serializedValueSize();
        long long49 = serializableConsumerRecord41.timestamp();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType> strConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.record.TimestampType>("hi!", (int) '#', 0L, (long) (byte) 100, timestampType14, (java.lang.Long) 10L, (int) (byte) -1, 32, "hi!", timestampType30, headers50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str64 = serializableConsumerRecord63.topic();
        int int65 = serializableConsumerRecord63.partition();
        java.lang.Class<?> wildcardClass66 = serializableConsumerRecord63.getClass();
        java.lang.CharSequence charSequence67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (-1), 97L, (java.lang.reflect.AnnotatedElement) wildcardClass66, charSequence67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))", 0, (long) (byte) 1, (long) (byte) 100, timestampType14, (long) 'a', (int) (short) 0, (int) (short) 0, (java.io.Serializable) 97L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        java.lang.Class<?> wildcardClass71 = timestampType14.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str28, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord67.timestampType();
        java.lang.Class<?> wildcardClass69 = timestampType68.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 52, 10L, (java.io.Serializable) wildcardClass69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord10.timestampType();
        int int25 = serializableConsumerRecord10.serializedKeySize();
        int int26 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType14, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        long long40 = serializableConsumerRecord39.checksum();
        int int41 = serializableConsumerRecord39.partition();
        int int42 = serializableConsumerRecord39.serializedValueSize();
        int int43 = serializableConsumerRecord39.serializedValueSize();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord39.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 1.0f + "'", serializable9, 1.0f);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        long long93 = serializableConsumerRecord88.timestamp();
        long long94 = serializableConsumerRecord88.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 32L + "'", long93 == 32L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        int int21 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType27, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        int int35 = serializableConsumerRecord33.serializedValueSize();
        long long36 = serializableConsumerRecord33.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType22, serializableConsumerRecord33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 35, (long) (byte) 1, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable64 = serializableConsumerRecord63.key();
        long long65 = serializableConsumerRecord63.checksum();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        int int67 = serializableConsumerRecord63.serializedKeySize();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int78 = serializableConsumerRecord77.partition();
        java.lang.String str79 = serializableConsumerRecord77.topic();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord77.timestampType();
        long long81 = serializableConsumerRecord77.timestamp();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType46, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass68, headers71, headers82);
        java.util.Optional<java.lang.Integer> intOptional84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 32, (long) '#', (long) (byte) 10, timestampType4, (java.lang.Long) 1L, (int) (short) 100, (int) (byte) 100, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", headers82, intOptional84);
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        java.util.Optional<java.lang.Integer> intOptional87 = serializableConsumerRecord85.leaderEpoch();
        int int88 = serializableConsumerRecord85.partition();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str79, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)" + "'", charSequence86, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)");
        org.junit.Assert.assertNull(intOptional87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 32 + "'", int88 == 32);
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        int int14 = serializableConsumerRecord12.partition();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        java.lang.String str16 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        long long34 = serializableConsumerRecord31.checksum();
        java.lang.String str35 = serializableConsumerRecord31.topic();
        java.lang.String str36 = serializableConsumerRecord31.toString();
        int int37 = serializableConsumerRecord31.serializedKeySize();
        int int38 = serializableConsumerRecord31.serializedKeySize();
        java.lang.Class<?> wildcardClass39 = serializableConsumerRecord31.getClass();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        int int53 = serializableConsumerRecord51.serializedKeySize();
        long long54 = serializableConsumerRecord51.offset();
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord51.timestampType();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord51.headers();
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord67.value();
        long long70 = serializableConsumerRecord67.timestamp();
        java.io.Serializable serializable71 = serializableConsumerRecord67.key();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord67.timestampType();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord67.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, 0L, 10L, timestampType17, (java.lang.Long) 52L, 0, (int) '#', (java.io.Serializable) wildcardClass39, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers56, intOptional74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (-1), (long) (byte) 1, (java.io.Serializable) timestampType17, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNull(timestampType55);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable71 + "' != '" + (short) 1 + "'", serializable71, (short) 1);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertNotNull(intOptional74);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        java.io.Serializable serializable80 = serializableConsumerRecord76.key();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (byte) 100, (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (short) 100, (int) (byte) 1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers82);
        int int84 = serializableConsumerRecord83.serializedValueSize();
        int int85 = serializableConsumerRecord83.partition();
        int int86 = serializableConsumerRecord83.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        long long13 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        long long48 = serializableConsumerRecord44.offset();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType18, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str64 = serializableConsumerRecord63.topic();
        long long65 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord63.headers();
        long long67 = serializableConsumerRecord63.checksum();
        int int68 = serializableConsumerRecord63.partition();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType18, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.util.Optional<java.lang.Integer> intOptional73 = serializableConsumerRecord71.leaderEpoch();
        java.lang.CharSequence charSequence74 = serializableConsumerRecord71.value();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNull(timestampType47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", charSequence72, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", charSequence74, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        long long9 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord15.headers();
        java.lang.String str17 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord15.timestampType();
        java.io.Serializable serializable22 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        int int36 = serializableConsumerRecord34.serializedValueSize();
        long long37 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord34.headers();
        long long39 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) 'a', (long) '4', (long) 100, timestampType18, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 100, serializable22, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers40);
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord41.timestampType();
        java.lang.Class<?> wildcardClass43 = timestampType42.getClass();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType48, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers66);
        long long68 = serializableConsumerRecord67.timestamp();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 100, (long) (byte) 100, (java.lang.reflect.AnnotatedElement) wildcardClass43, (java.lang.reflect.Type) wildcardClass69);
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType75, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int82 = serializableConsumerRecord81.serializedValueSize();
        int int83 = serializableConsumerRecord81.serializedValueSize();
        long long84 = serializableConsumerRecord81.offset();
        java.lang.CharSequence charSequence85 = serializableConsumerRecord81.value();
        java.io.Serializable serializable86 = serializableConsumerRecord81.key();
        java.lang.String str87 = serializableConsumerRecord81.topic();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord81.timestampType();
        java.lang.String str89 = serializableConsumerRecord81.toString();
        long long90 = serializableConsumerRecord81.offset();
        long long91 = serializableConsumerRecord81.timestamp();
        int int92 = serializableConsumerRecord81.partition();
        java.lang.String str93 = serializableConsumerRecord81.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> genericDeclarationConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) 'a', (java.lang.reflect.GenericDeclaration) wildcardClass43, serializableConsumerRecord81);
        long long95 = serializableConsumerRecord81.offset();
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertEquals("'" + serializable86 + "' != '" + 10.0f + "'", serializable86, 10.0f);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "hi!" + "'", str87, "hi!");
        org.junit.Assert.assertNull(timestampType88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str89, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 1L + "'", long90 == 1L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "hi!" + "'", str93, "hi!");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L + "'", long95 == 1L);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        long long21 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        long long23 = serializableConsumerRecord10.offset();
        java.lang.String str24 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str24, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, (long) (byte) 0, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", charSequence4);
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        long long8 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.partition();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord58.timestampType();
        int int82 = serializableConsumerRecord58.serializedKeySize();
        int int83 = serializableConsumerRecord58.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNull(timestampType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence8);
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        java.io.Serializable serializable31 = serializableConsumerRecord29.key();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord29.timestampType();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass33, timestampType43);
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int63 = serializableConsumerRecord62.serializedValueSize();
        long long64 = serializableConsumerRecord62.checksum();
        int int65 = serializableConsumerRecord62.serializedKeySize();
        java.lang.String str66 = serializableConsumerRecord62.toString();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord62.value();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 100, (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) 1, 100L, timestampType12, (java.lang.Long) 32L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass33, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers68);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertNull(timestampType32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertNotNull(headers68);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord11.timestampType();
        int int13 = serializableConsumerRecord11.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType19, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        int int27 = serializableConsumerRecord25.serializedValueSize();
        long long28 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers29 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType14, serializableConsumerRecord25);
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord25.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable43 = serializableConsumerRecord42.key();
        long long44 = serializableConsumerRecord42.checksum();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        int int46 = serializableConsumerRecord42.serializedKeySize();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.header.Headers> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) ' ', (-1L), intOptional31, headers47);
        java.lang.Class<?> wildcardClass49 = intOptionalConsumerRecord48.getClass();
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(headers29);
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        int int60 = serializableConsumerRecord57.serializedValueSize();
        int int61 = serializableConsumerRecord57.serializedKeySize();
        long long62 = serializableConsumerRecord57.checksum();
        java.io.Serializable serializable63 = serializableConsumerRecord57.key();
        int int64 = serializableConsumerRecord57.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
        org.junit.Assert.assertNotNull(serializable63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.lang.Class<?> wildcardClass9 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(charSequence7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType22, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long48 = serializableConsumerRecord47.checksum();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord47.value();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        java.io.Serializable serializable57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) '#', (long) (byte) 100, serializable57, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) ' ', (long) (short) 100, (long) 1, timestampType50, (long) (-1), 97, (-1), (java.io.Serializable) timestampType61, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable80 = serializableConsumerRecord79.key();
        long long81 = serializableConsumerRecord79.offset();
        int int82 = serializableConsumerRecord79.serializedValueSize();
        int int83 = serializableConsumerRecord79.partition();
        java.io.Serializable serializable84 = serializableConsumerRecord79.key();
        java.io.Serializable serializable85 = serializableConsumerRecord79.key();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType87 = serializableConsumerRecord79.timestampType();
        long long88 = serializableConsumerRecord79.offset();
        int int89 = serializableConsumerRecord79.serializedKeySize();
        int int90 = serializableConsumerRecord79.serializedKeySize();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) 1, (-1L), timestampType61, (java.lang.Long) 32L, (int) (byte) 0, (int) (short) 1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers91);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence49, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable85 + "' != '" + (short) 1 + "'", serializable85, (short) 1);
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertNull(timestampType87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertNotNull(headers91);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType24, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType24, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass54, (java.lang.CharSequence) "hi!", headers62);
        int int64 = serializableConsumerRecord63.partition();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 32, 0L, (java.io.Serializable) timestampType65, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType72, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = serializableConsumerRecord78.value();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord78.value();
        long long81 = serializableConsumerRecord78.timestamp();
        long long82 = serializableConsumerRecord78.offset();
        long long83 = serializableConsumerRecord78.checksum();
        long long84 = serializableConsumerRecord78.offset();
        java.lang.CharSequence charSequence85 = serializableConsumerRecord78.value();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (short) -1, (long) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType65, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers86);
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertNotNull(headers86);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType32, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int39 = serializableConsumerRecord38.serializedValueSize();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        int int41 = serializableConsumerRecord38.serializedKeySize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable54 = serializableConsumerRecord53.key();
        long long55 = serializableConsumerRecord53.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType22, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers42, intOptional56);
        int int58 = serializableConsumerRecord57.partition();
        int int59 = serializableConsumerRecord57.serializedKeySize();
        java.lang.Class<?> wildcardClass60 = serializableConsumerRecord57.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.String str59 = serializableConsumerRecord57.topic();
        java.lang.CharSequence charSequence60 = serializableConsumerRecord57.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        int int68 = serializableConsumerRecord66.partition();
        java.lang.String str69 = serializableConsumerRecord66.topic();
        java.lang.String str70 = serializableConsumerRecord66.topic();
        int int71 = serializableConsumerRecord66.serializedValueSize();
        int int72 = serializableConsumerRecord66.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", (int) (byte) -1, (long) 'a', (long) (short) 10, timestampType18, (long) 'a', 10, (int) (short) 100, serializableConsumerRecord57, serializableConsumerRecord66);
        int int74 = serializableConsumerRecord57.serializedValueSize();
        long long75 = serializableConsumerRecord57.timestamp();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord57.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.io.Serializable serializable92 = serializableConsumerRecord88.key();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord88.timestampType();
        long long94 = serializableConsumerRecord88.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + "hi!" + "'", serializable92, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        int int94 = serializableConsumerRecord92.partition();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        long long96 = serializableConsumerRecord92.timestamp();
        java.util.Optional<java.lang.Integer> intOptional97 = serializableConsumerRecord92.leaderEpoch();
        java.lang.CharSequence charSequence98 = serializableConsumerRecord92.value();
        long long99 = serializableConsumerRecord92.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertNotNull(intOptional97);
        org.junit.Assert.assertEquals("'" + charSequence98 + "' != '" + "hi!" + "'", charSequence98, "hi!");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 10L + "'", long99 == 10L);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        java.lang.CharSequence charSequence7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence7);
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) (byte) 1, (long) 10, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        long long13 = serializableConsumerRecord12.offset();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 10 + "'", serializable9, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        long long10 = serializableConsumerRecord5.checksum();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        int int15 = serializableConsumerRecord13.partition();
        java.lang.String str16 = serializableConsumerRecord13.topic();
        long long17 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        java.lang.String str37 = serializableConsumerRecord32.topic();
        long long38 = serializableConsumerRecord32.checksum();
        long long39 = serializableConsumerRecord32.checksum();
        java.lang.String str40 = serializableConsumerRecord32.topic();
        long long41 = serializableConsumerRecord32.timestamp();
        int int42 = serializableConsumerRecord32.serializedValueSize();
        java.lang.String str43 = serializableConsumerRecord32.topic();
        int int44 = serializableConsumerRecord32.serializedValueSize();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord32.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String> annotatedElementConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 100, 97L, 100L, timestampType18, (long) (-1), (int) '4', (int) (byte) 100, (java.lang.reflect.AnnotatedElement) wildcardClass45, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, (long) 32, 0L, timestampType18, (long) (short) 10, (int) (short) 10, 10, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType10, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.toString();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord16.value();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord16.leaderEpoch();
        int int21 = serializableConsumerRecord16.serializedKeySize();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) (byte) 0, (java.io.Serializable) wildcardClass22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', 0L, (java.io.Serializable) wildcardClass22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int27 = serializableConsumerRecord26.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable13 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        int int50 = serializableConsumerRecord48.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType33, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str62 = serializableConsumerRecord61.topic();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord61.timestampType();
        java.io.Serializable serializable64 = serializableConsumerRecord61.key();
        long long65 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType70, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int77 = serializableConsumerRecord76.serializedValueSize();
        long long78 = serializableConsumerRecord76.offset();
        int int79 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (long) 97, timestampType33, (java.lang.Long) (-1L), (int) (byte) 0, 32, serializableConsumerRecord61, intOptional80, headers87);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 1, (-1L), 0L, timestampType14, (long) 1, 100, (int) (byte) 10, (java.io.Serializable) 97, intOptional80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) -1, (long) (short) 1, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.lang.String str92 = serializableConsumerRecord91.topic();
        int int93 = serializableConsumerRecord91.partition();
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (-1.0d) + "'", serializable64, (-1.0d));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence4);
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + (byte) 10 + "'", serializable6, (byte) 10);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 10 + "'", serializable8, (byte) 10);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.checksum();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        int int11 = serializableConsumerRecord9.partition();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        java.lang.String str13 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        java.io.Serializable serializable33 = serializableConsumerRecord31.key();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord31.timestampType();
        java.lang.Class<?> wildcardClass35 = serializableConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType45, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass35, timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 0, (long) 52, (long) (short) 1, timestampType14, 100L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass35, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord50.leaderEpoch();
        long long52 = serializableConsumerRecord50.offset();
        int int53 = serializableConsumerRecord50.partition();
        int int54 = serializableConsumerRecord50.serializedKeySize();
        long long55 = serializableConsumerRecord50.timestamp();
        long long56 = serializableConsumerRecord50.timestamp();
        java.lang.CharSequence charSequence57 = serializableConsumerRecord50.value();
        int int58 = serializableConsumerRecord50.serializedKeySize();
        long long59 = serializableConsumerRecord50.offset();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence57, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord16.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        int int20 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType21, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType21, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int36 = serializableConsumerRecord35.partition();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord88.headers();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord88.value();
        java.lang.String str95 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence94, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str95, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.toString();
        long long94 = serializableConsumerRecord88.checksum();
        int int95 = serializableConsumerRecord88.partition();
        java.lang.String str96 = serializableConsumerRecord88.topic();
        int int97 = serializableConsumerRecord88.serializedKeySize();
        long long98 = serializableConsumerRecord88.timestamp();
        java.lang.String str99 = serializableConsumerRecord88.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 32L + "'", long98 == 32L);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.partition();
        int int18 = serializableConsumerRecord16.partition();
        long long19 = serializableConsumerRecord16.timestamp();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord16.leaderEpoch();
        long long21 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        int int33 = serializableConsumerRecord31.partition();
        java.lang.String str34 = serializableConsumerRecord31.topic();
        java.lang.String str35 = serializableConsumerRecord31.topic();
        int int36 = serializableConsumerRecord31.serializedValueSize();
        long long37 = serializableConsumerRecord31.timestamp();
        long long38 = serializableConsumerRecord31.checksum();
        java.lang.Class<?> wildcardClass39 = serializableConsumerRecord31.getClass();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        java.io.Serializable serializable52 = serializableConsumerRecord50.key();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord50.timestampType();
        long long54 = serializableConsumerRecord50.offset();
        java.lang.String str55 = serializableConsumerRecord50.topic();
        long long56 = serializableConsumerRecord50.offset();
        int int57 = serializableConsumerRecord50.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord50.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) '#', 100L, 52L, timestampType22, (long) 32, (int) '4', 100, (java.lang.reflect.GenericDeclaration) wildcardClass39, intOptional58);
        java.lang.Class<?> wildcardClass60 = intOptional58.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (short) 10, (long) (short) 0, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (long) 97, (java.io.Serializable) wildcardClass60, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertNull(timestampType53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        int int32 = serializableConsumerRecord29.serializedKeySize();
        int int33 = serializableConsumerRecord29.partition();
        java.io.Serializable serializable34 = serializableConsumerRecord29.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType14, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) -1, (long) (short) 100, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long38 = serializableConsumerRecord37.timestamp();
        long long39 = serializableConsumerRecord37.offset();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L + "'", long39 == 100L);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        long long13 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord5.headers();
        int int15 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass19 = timestampType18.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        java.lang.String str18 = serializableConsumerRecord13.topic();
        long long19 = serializableConsumerRecord13.checksum();
        long long20 = serializableConsumerRecord13.checksum();
        int int21 = serializableConsumerRecord13.serializedKeySize();
        long long22 = serializableConsumerRecord13.checksum();
        java.lang.String str23 = serializableConsumerRecord13.topic();
        long long24 = serializableConsumerRecord13.checksum();
        long long25 = serializableConsumerRecord13.offset();
        java.lang.Class<?> wildcardClass26 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) 1, (long) 0, (java.io.Serializable) wildcardClass26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        long long29 = serializableConsumerRecord28.offset();
        java.lang.CharSequence charSequence30 = serializableConsumerRecord28.value();
        int int31 = serializableConsumerRecord28.partition();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", charSequence30, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        java.io.Serializable serializable39 = serializableConsumerRecord37.key();
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord37.timestampType();
        long long41 = serializableConsumerRecord37.offset();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers42, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType11, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers42);
        int int46 = serializableConsumerRecord45.serializedValueSize();
        java.lang.String str47 = serializableConsumerRecord45.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + (short) 1 + "'", serializable39, (short) 1);
        org.junit.Assert.assertNull(timestampType40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str47, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        long long26 = serializableConsumerRecord23.timestamp();
        long long27 = serializableConsumerRecord23.offset();
        long long28 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        int int49 = serializableConsumerRecord47.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType32, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional50);
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        java.io.Serializable serializable67 = serializableConsumerRecord63.key();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType18, (java.lang.Long) 10L, (int) '#', 35, timestampType32, "hi!", headers68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord78.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '#', (long) 100, (long) 52, timestampType32, (long) 1, 1, (int) (byte) 100, (java.io.Serializable) timestampType79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.Object obj85 = new java.lang.Object();
        java.lang.Class<?> wildcardClass86 = obj85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) 52, (long) 32, timestampType32, 10L, (int) (short) 0, (int) (byte) 100, (java.io.Serializable) wildcardClass86, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.lang.String str89 = serializableConsumerRecord88.toString();
        int int90 = serializableConsumerRecord88.partition();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 1 + "'", serializable67, (short) 1);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str89, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNotNull(intOptional91);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int16 = serializableConsumerRecord15.partition();
        int int17 = serializableConsumerRecord15.partition();
        long long18 = serializableConsumerRecord15.offset();
        java.lang.String str19 = serializableConsumerRecord15.toString();
        long long20 = serializableConsumerRecord15.checksum();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        java.io.Serializable serializable44 = serializableConsumerRecord42.key();
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord42.timestampType();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType56, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass46, timestampType56);
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence74 = serializableConsumerRecord73.value();
        java.io.Serializable serializable75 = serializableConsumerRecord73.key();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord73.timestampType();
        java.lang.Class<?> wildcardClass77 = serializableConsumerRecord73.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType56, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass77, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType21, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 1, (long) 100, (java.io.Serializable) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> objConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, 10L, (java.lang.Object) serializableConsumerRecord84, serializableConsumerRecord85);
        long long87 = serializableConsumerRecord84.checksum();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord84.headers();
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (short) 1 + "'", serializable44, (short) 1);
        org.junit.Assert.assertNull(timestampType45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "hi!" + "'", charSequence74, "hi!");
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNull(timestampType76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.partition();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, 10L, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        int int11 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord92.leaderEpoch();
        java.lang.String str97 = serializableConsumerRecord92.topic();
        long long98 = serializableConsumerRecord92.checksum();
        java.lang.String str99 = serializableConsumerRecord92.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 10L + "'", long98 == 10L);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str99, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType43, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        java.lang.String str51 = serializableConsumerRecord49.topic();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord49.getClass();
        java.lang.CharSequence charSequence53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType33, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass52, charSequence53);
        java.util.Optional<java.lang.Integer> intOptional59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("hi!", (int) (byte) 10, (long) 'a', (long) (byte) 10, timestampType33, 0L, 52, (int) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", intOptional59);
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType69, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int76 = serializableConsumerRecord75.serializedValueSize();
        int int77 = serializableConsumerRecord75.serializedValueSize();
        long long78 = serializableConsumerRecord75.offset();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord75.headers();
        long long80 = serializableConsumerRecord75.offset();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String> headersConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.String>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 100, 0L, headers81, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) '4', (-1L), 0L, timestampType11, (java.lang.Long) 32L, (int) (byte) 0, (int) '4', (java.io.Serializable) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers81);
        int int85 = serializableConsumerRecord84.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord84.leaderEpoch();
        int int87 = serializableConsumerRecord84.partition();
        java.lang.String str88 = serializableConsumerRecord84.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 1L + "'", long80 == 1L);
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str88, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        java.lang.String str41 = serializableConsumerRecord39.toString();
        int int42 = serializableConsumerRecord39.serializedValueSize();
        long long43 = serializableConsumerRecord39.offset();
        int int44 = serializableConsumerRecord39.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str41, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.partition();
        int int14 = serializableConsumerRecord12.partition();
        long long15 = serializableConsumerRecord12.offset();
        java.lang.String str16 = serializableConsumerRecord12.toString();
        long long17 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType53, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass43, timestampType53);
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.io.Serializable serializable72 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        java.lang.Class<?> wildcardClass74 = serializableConsumerRecord70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType53, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType18, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType77, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 1, (long) 100, (java.io.Serializable) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord81.timestampType();
        int int83 = serializableConsumerRecord81.serializedKeySize();
        long long84 = serializableConsumerRecord81.checksum();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord81.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (short) 1 + "'", serializable72, (short) 1);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNotNull(intOptional85);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        long long41 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType61, (long) 0, 0, 0, serializable84, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional89 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 100, (long) (short) 0, 10L, timestampType22, (java.lang.Long) 100L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers43, intOptional89);
        java.lang.String str91 = serializableConsumerRecord90.topic();
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord90.timestampType();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str91, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        long long12 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass14 = timestampType13.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.checksum();
        long long10 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 0, (long) (short) -1, (long) (byte) -1, timestampType34, (long) 'a', 32, (int) (byte) 0, (java.io.Serializable) (-1L), charSequence94);
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord95.leaderEpoch();
        long long97 = serializableConsumerRecord95.offset();
        org.apache.kafka.common.header.Headers headers98 = serializableConsumerRecord95.headers();
        java.util.Optional<java.lang.Integer> intOptional99 = serializableConsumerRecord95.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertNotNull(headers98);
        org.junit.Assert.assertNotNull(intOptional99);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        int int14 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType22, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable74 = serializableConsumerRecord73.key();
        int int75 = serializableConsumerRecord73.serializedKeySize();
        long long76 = serializableConsumerRecord73.timestamp();
        int int77 = serializableConsumerRecord73.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable74, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        java.lang.String str73 = serializableConsumerRecord67.toString();
        java.lang.String str74 = serializableConsumerRecord67.toString();
        org.apache.kafka.common.header.Headers headers75 = serializableConsumerRecord67.headers();
        long long76 = serializableConsumerRecord67.checksum();
        java.lang.String str77 = serializableConsumerRecord67.topic();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str73, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str74, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "hi!" + "'", str77, "hi!");
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        int int11 = serializableConsumerRecord9.partition();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        java.lang.String str13 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        java.io.Serializable serializable33 = serializableConsumerRecord31.key();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord31.timestampType();
        java.lang.Class<?> wildcardClass35 = serializableConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType45, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass35, timestampType45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 0, (long) 52, (long) (short) 1, timestampType14, 100L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass35, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord50.leaderEpoch();
        long long52 = serializableConsumerRecord50.offset();
        int int53 = serializableConsumerRecord50.partition();
        int int54 = serializableConsumerRecord50.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord50.leaderEpoch();
        long long56 = serializableConsumerRecord50.offset();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 52L + "'", long52 == 52L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 52L + "'", long56 == 52L);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        long long19 = serializableConsumerRecord10.timestamp();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        long long17 = serializableConsumerRecord13.offset();
        int int18 = serializableConsumerRecord13.partition();
        long long19 = serializableConsumerRecord13.offset();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord13.leaderEpoch();
        long long21 = serializableConsumerRecord13.checksum();
        java.lang.String str22 = serializableConsumerRecord13.toString();
        long long23 = serializableConsumerRecord13.timestamp();
        int int24 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord13.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, (long) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers25, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(headers25);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        int int67 = serializableConsumerRecord59.partition();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord59.headers();
        java.lang.String str69 = serializableConsumerRecord59.topic();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord59.value();
        int int71 = serializableConsumerRecord59.serializedKeySize();
        java.lang.String str72 = serializableConsumerRecord59.toString();
        int int73 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str72, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        long long63 = serializableConsumerRecord59.checksum();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        int int65 = serializableConsumerRecord59.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord10.leaderEpoch();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord13.headers();
        java.lang.String str16 = serializableConsumerRecord13.toString();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 10, (long) 32, 0L, timestampType4, (long) 52, 32, 35, (java.io.Serializable) wildcardClass18, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 100.0f + "'", serializable14, 100.0f);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str16, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.lang.Class<?> wildcardClass12 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence8, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        long long10 = serializableConsumerRecord5.checksum();
        long long11 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.serializedValueSize();
        int int81 = serializableConsumerRecord58.serializedValueSize();
        java.lang.CharSequence charSequence82 = serializableConsumerRecord58.value();
        java.lang.Class<?> wildcardClass83 = charSequence82.getClass();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        long long13 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        long long11 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        long long13 = serializableConsumerRecord5.checksum();
        int int14 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType44, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int51 = serializableConsumerRecord50.serializedValueSize();
        long long52 = serializableConsumerRecord50.offset();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord63.value();
        long long66 = serializableConsumerRecord63.timestamp();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord63.leaderEpoch();
        int int68 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord63.leaderEpoch();
        java.lang.Class<?> wildcardClass70 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (-1), (long) ' ', serializableConsumerRecord50, (java.lang.reflect.AnnotatedElement) wildcardClass70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 100, (long) (short) 0, 32L, timestampType31, (long) (byte) 10, 0, 32, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable77 = null;
        org.apache.kafka.common.header.Headers headers79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType86 = serializableConsumerRecord85.timestampType();
        int int87 = serializableConsumerRecord85.partition();
        int int88 = serializableConsumerRecord85.serializedValueSize();
        long long89 = serializableConsumerRecord85.offset();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord85.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 100, (long) (short) 100, (long) (short) 1, timestampType31, (java.lang.Long) 97L, (int) (short) 1, (int) ' ', headerIterable77, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)", headers79, intOptional90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(intOptional90);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedValueSize();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord59.headers();
        long long69 = serializableConsumerRecord59.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord13.headers();
        long long91 = serializableConsumerRecord13.timestamp();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord13.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNotNull(intOptional92);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.offset();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long20 = serializableConsumerRecord19.checksum();
        long long21 = serializableConsumerRecord19.checksum();
        long long22 = serializableConsumerRecord19.checksum();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        long long40 = serializableConsumerRecord37.offset();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord37.headers();
        long long43 = serializableConsumerRecord37.checksum();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord37.headers();
        java.lang.Class<?> wildcardClass45 = headers44.getClass();
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int62 = serializableConsumerRecord61.serializedValueSize();
        long long63 = serializableConsumerRecord61.checksum();
        int int64 = serializableConsumerRecord61.serializedKeySize();
        java.lang.String str65 = serializableConsumerRecord61.toString();
        java.lang.CharSequence charSequence66 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 100, (long) (short) 1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 1, (long) 52, (long) (byte) -1, timestampType23, (java.lang.Long) 0L, (int) (byte) 100, (int) '#', (java.io.Serializable) wildcardClass45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 0, 0L, (long) 35, timestampType4, (java.lang.Long) 0L, (int) (short) 0, 1, timestampTypeEnum8, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", headers67);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNull(timestampType41);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.checksum();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        long long20 = serializableConsumerRecord10.offset();
        long long21 = serializableConsumerRecord10.checksum();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        long long24 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        long long17 = serializableConsumerRecord10.offset();
        int int18 = serializableConsumerRecord10.partition();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.partition();
        java.lang.String str18 = serializableConsumerRecord16.topic();
        java.lang.String str19 = serializableConsumerRecord16.toString();
        long long20 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (byte) 1, 32L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord35.timestampType();
        int int37 = serializableConsumerRecord35.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType43, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        int int51 = serializableConsumerRecord49.serializedValueSize();
        long long52 = serializableConsumerRecord49.offset();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType38, serializableConsumerRecord49);
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord49.getClass();
        java.lang.Comparable<java.lang.String> strComparable56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) (byte) -1, 52L, timestampType21, (long) 1, (int) (byte) 1, (int) (short) 0, (java.io.Serializable) wildcardClass55, strComparable56);
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.lang.Class<?> wildcardClass78 = serializableConsumerRecord74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', (long) 52, (java.io.Serializable) wildcardClass78, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord80.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord80.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", 35, (long) 0, (long) (byte) 0, timestampType21, 52L, (int) (short) 0, (-1), (java.io.Serializable) timestampType82, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord84.timestampType();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str19, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long49 = serializableConsumerRecord48.offset();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str61 = serializableConsumerRecord60.topic();
        int int62 = serializableConsumerRecord60.partition();
        java.lang.String str63 = serializableConsumerRecord60.topic();
        java.lang.String str64 = serializableConsumerRecord60.topic();
        java.lang.Class<?> wildcardClass65 = serializableConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long73 = serializableConsumerRecord72.checksum();
        long long74 = serializableConsumerRecord72.checksum();
        int int75 = serializableConsumerRecord72.partition();
        java.io.Serializable serializable76 = serializableConsumerRecord72.key();
        org.apache.kafka.common.header.Headers headers77 = serializableConsumerRecord72.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", (int) (short) 100, (long) 100, (long) 1, timestampType51, (java.lang.Long) 1L, 10, (int) '4', (java.io.Serializable) wildcardClass65, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers77);
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + 100 + "'", serializable50, 100);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertEquals("'" + serializable76 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable76, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers77);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord15.headers();
        java.lang.String str17 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord15.timestampType();
        java.io.Serializable serializable22 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        int int36 = serializableConsumerRecord34.serializedValueSize();
        long long37 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord34.headers();
        long long39 = serializableConsumerRecord34.offset();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) 'a', (long) '4', (long) 100, timestampType18, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 100, serializable22, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers40);
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord41.timestampType();
        java.lang.Class<?> wildcardClass43 = timestampType42.getClass();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType48, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers66);
        long long68 = serializableConsumerRecord67.timestamp();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 100, (long) (byte) 100, (java.lang.reflect.AnnotatedElement) wildcardClass43, (java.lang.reflect.Type) wildcardClass69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 97, (long) 'a', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int73 = serializableConsumerRecord72.serializedKeySize();
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1L + "'", long39 == 1L);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) 100, (-1L), serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertNull(serializable6);
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))" + "'", charSequence7, "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertNotNull(headers8);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (byte) -1, (long) 100, (java.io.Serializable) timestampType16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType43, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType43, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType78, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence85 = serializableConsumerRecord84.value();
        java.io.Serializable serializable86 = serializableConsumerRecord84.key();
        org.apache.kafka.common.record.TimestampType timestampType87 = serializableConsumerRecord84.timestampType();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord84.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType43, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers88);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 0, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.io.Serializable serializable92 = serializableConsumerRecord91.key();
        java.lang.Class<?> wildcardClass93 = serializableConsumerRecord91.getClass();
        java.lang.CharSequence charSequence94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) 'a', (long) ' ', (long) (byte) 10, timestampType16, (long) 35, (int) (byte) 1, (int) (byte) 100, (java.io.Serializable) wildcardClass93, charSequence94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String> typeConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', 97L, (java.lang.reflect.Type) wildcardClass93, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + charSequence85 + "' != '" + "hi!" + "'", charSequence85, "hi!");
        org.junit.Assert.assertEquals("'" + serializable86 + "' != '" + (short) 1 + "'", serializable86, (short) 1);
        org.junit.Assert.assertNull(timestampType87);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + (short) 0 + "'", serializable92, (short) 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        int int32 = serializableConsumerRecord30.serializedKeySize();
        int int33 = serializableConsumerRecord30.serializedKeySize();
        int int34 = serializableConsumerRecord30.partition();
        java.io.Serializable serializable35 = serializableConsumerRecord30.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType15, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        int int69 = serializableConsumerRecord66.serializedKeySize();
        int int70 = serializableConsumerRecord66.partition();
        java.io.Serializable serializable71 = serializableConsumerRecord66.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType51, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (byte) 1, (-1L), 100L, timestampType15, (long) (short) -1, (int) (byte) 0, (-1), (java.io.Serializable) timestampType51, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord74.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 1 + "'", serializable35, (short) 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertEquals("'" + serializable71 + "' != '" + (short) 1 + "'", serializable71, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType15, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        long long23 = serializableConsumerRecord21.offset();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        java.lang.CharSequence charSequence36 = serializableConsumerRecord34.value();
        long long37 = serializableConsumerRecord34.timestamp();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord34.leaderEpoch();
        int int39 = serializableConsumerRecord34.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord34.leaderEpoch();
        java.lang.Class<?> wildcardClass41 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement> serializableConsumerRecordConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (-1), (long) ' ', serializableConsumerRecord21, (java.lang.reflect.AnnotatedElement) wildcardClass41);
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str50 = serializableConsumerRecord49.topic();
        int int51 = serializableConsumerRecord49.partition();
        java.io.Serializable serializable52 = serializableConsumerRecord49.key();
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (short) 100, (long) 32, (long) (byte) 0, timestampType4, (java.lang.Long) 0L, 10, (int) (byte) -1, (java.io.Serializable) wildcardClass41, charSequence43, headers53);
        int int55 = serializableConsumerRecord54.serializedKeySize();
        int int56 = serializableConsumerRecord54.partition();
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (-1.0d) + "'", serializable52, (-1.0d));
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        java.lang.Class<?> wildcardClass63 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (int) ' ', (long) (byte) 0, (java.io.Serializable) wildcardClass63, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord65.headers();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType14, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        java.lang.String str22 = serializableConsumerRecord20.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", str22, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = timestampType18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord11.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType15, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (-1), (long) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        java.io.Serializable serializable20 = serializableConsumerRecord19.key();
        int int21 = serializableConsumerRecord19.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 1.0f + "'", serializable14, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", serializable20, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.partition();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 10L, (java.io.Serializable) timestampType15, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.lang.CharSequence charSequence21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int32 = serializableConsumerRecord31.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        java.lang.Class<?> wildcardClass49 = serializableConsumerRecord47.getClass();
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        int int63 = serializableConsumerRecord61.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord61.leaderEpoch();
        java.io.Serializable serializable65 = serializableConsumerRecord61.key();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord61.leaderEpoch();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType72, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int79 = serializableConsumerRecord78.partition();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord78.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType33, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67, intOptional80);
        long long82 = serializableConsumerRecord81.offset();
        java.lang.String str83 = serializableConsumerRecord81.topic();
        long long84 = serializableConsumerRecord81.checksum();
        long long85 = serializableConsumerRecord81.offset();
        java.lang.CharSequence charSequence86 = serializableConsumerRecord81.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", 52, 97L, (long) 1, timestampType15, 0L, 0, (int) (short) 100, charSequence21, serializableConsumerRecord81);
        int int88 = serializableConsumerRecord81.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L + "'", long82 == 100L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str83, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence86, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord8.headers();
        org.apache.kafka.common.header.Headers headers14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) -1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers13, headers14);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        java.io.Serializable serializable3 = null;
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", 35, 32L, serializable3, charSequence4);
        long long6 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int16 = serializableConsumerRecord15.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord15.timestampType();
        java.io.Serializable serializable18 = serializableConsumerRecord15.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (-1), (long) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        java.io.Serializable serializable40 = serializableConsumerRecord38.key();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        java.lang.CharSequence charSequence43 = serializableConsumerRecord38.value();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord38.value();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord38.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) -1, (long) 10, (long) (byte) -1, timestampType24, (long) ' ', 97, (int) (byte) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers45, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass48 = headerIterableConsumerRecord47.getClass();
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 1.0f + "'", serializable18, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertNull(timestampType41);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType47, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional65);
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType72, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = serializableConsumerRecord78.value();
        int int80 = serializableConsumerRecord78.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord78.leaderEpoch();
        java.io.Serializable serializable82 = serializableConsumerRecord78.key();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType33, (java.lang.Long) 10L, (int) '#', 35, timestampType47, "hi!", headers83);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType33, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType16, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType33, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, 100L, (java.io.Serializable) 35, (java.lang.CharSequence) "hi!");
        long long91 = serializableConsumerRecord90.offset();
        long long92 = serializableConsumerRecord90.checksum();
        int int93 = serializableConsumerRecord90.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 1.0f + "'", serializable15, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 52 + "'", int80 == 52);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 1 + "'", serializable82, (short) 1);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 100L + "'", long91 == 100L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord13.toString();
        java.lang.Class<?> wildcardClass19 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )", 35, (long) 1, (java.io.Serializable) wildcardClass19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) 'a', (long) '4', serializable3, (java.lang.CharSequence) "");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        long long8 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 10.0f + "'", serializable16, 10.0f);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        long long14 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.offset();
        long long16 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord9.headers();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord9.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord9.value();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType23, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        int int31 = serializableConsumerRecord29.serializedValueSize();
        java.lang.String str32 = serializableConsumerRecord29.topic();
        java.lang.CharSequence charSequence33 = serializableConsumerRecord29.value();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord29.leaderEpoch();
        int int35 = serializableConsumerRecord29.partition();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord29.getClass();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        java.io.Serializable serializable49 = serializableConsumerRecord47.key();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        long long51 = serializableConsumerRecord47.offset();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.header.Headers headers54 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) '#', (-1L), (long) (byte) 100, timestampType14, (java.lang.Long) 100L, 35, 32, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.reflect.GenericDeclaration) wildcardClass36, headers54);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNull(timestampType50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertNull(timestampType53);
        org.junit.Assert.assertNotNull(headers54);
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        java.io.Serializable serializable6 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (short) 10, serializable6, (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.toString();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        int int12 = serializableConsumerRecord8.partition();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord8.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', (long) (byte) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers13, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        int int29 = serializableConsumerRecord23.partition();
        long long30 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord23.timestampType();
        int int32 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        long long9 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        java.lang.Class<?> wildcardClass35 = intOptional34.getClass();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord46.value();
        long long49 = serializableConsumerRecord46.timestamp();
        int int50 = serializableConsumerRecord46.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        long long68 = serializableConsumerRecord62.checksum();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord62.timestampType();
        java.lang.String str70 = serializableConsumerRecord62.topic();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object> genericDeclarationConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 100, (long) (byte) 10, (long) 100, timestampType17, (java.lang.Long) 10L, (int) (byte) 10, 52, (java.lang.reflect.GenericDeclaration) wildcardClass35, (java.lang.Object) intOptional51, headers71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (-1), 1L, timestampType17, (long) 100, (-1), (int) ' ', (java.io.Serializable) 100.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long79 = serializableConsumerRecord78.offset();
        java.lang.Class<?> wildcardClass80 = serializableConsumerRecord78.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        long long21 = serializableConsumerRecord10.checksum();
        long long22 = serializableConsumerRecord10.offset();
        int int23 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable24 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 1 + "'", serializable24, (short) 1);
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedKeySize();
        long long12 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.timestamp();
        long long15 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 10.0f + "'", serializable16, 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.checksum();
        int int28 = serializableConsumerRecord23.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        java.lang.String str30 = serializableConsumerRecord23.topic();
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord23.leaderEpoch();
        int int32 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType13, (java.lang.Long) 10L, (int) '#', 35, timestampType27, "hi!", headers63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", 35, 1L, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNotNull(headers63);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        java.lang.String str23 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        java.lang.String str96 = serializableConsumerRecord92.toString();
        long long97 = serializableConsumerRecord92.offset();
        java.lang.String str98 = serializableConsumerRecord92.topic();
        org.apache.kafka.common.header.Headers headers99 = serializableConsumerRecord92.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str96, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(headers99);
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        java.lang.String str32 = serializableConsumerRecord25.toString();
        java.lang.String str33 = serializableConsumerRecord25.toString();
        java.lang.CharSequence charSequence34 = serializableConsumerRecord25.value();
        java.lang.CharSequence charSequence35 = serializableConsumerRecord25.value();
        int int36 = serializableConsumerRecord25.serializedValueSize();
        long long37 = serializableConsumerRecord25.checksum();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str32, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str33, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, (long) 32, (java.io.Serializable) wildcardClass11, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        java.lang.Class<?> wildcardClass15 = timestampType14.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, 100L, (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable> charSequenceConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", 97, 97L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        java.io.Serializable serializable22 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType34, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass24, timestampType34);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        java.lang.String str41 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable46 = null;
        org.apache.kafka.common.header.Headers headers48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str55 = serializableConsumerRecord54.topic();
        java.io.Serializable serializable56 = serializableConsumerRecord54.key();
        java.io.Serializable serializable57 = serializableConsumerRecord54.key();
        long long58 = serializableConsumerRecord54.timestamp();
        java.util.Optional<java.lang.Integer> intOptional59 = serializableConsumerRecord54.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", (int) (byte) -1, (long) (short) 100, 100L, timestampType42, (java.lang.Long) 0L, (int) '4', (int) (short) 10, serializable46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers48, intOptional59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str41, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (-1.0d) + "'", serializable56, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable57 + "' != '" + (-1.0d) + "'", serializable57, (-1.0d));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(intOptional59);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord16.leaderEpoch();
        java.lang.Class<?> wildcardClass20 = intOptional19.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, (long) 100, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )", (int) '#', 35L, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str91 = serializableConsumerRecord88.topic();
        int int92 = serializableConsumerRecord88.serializedValueSize();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord88.headers();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        java.io.Serializable serializable95 = serializableConsumerRecord88.key();
        long long96 = serializableConsumerRecord88.offset();
        java.lang.Class<?> wildcardClass97 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable95 + "' != '" + "hi!" + "'", serializable95, "hi!");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        long long66 = serializableConsumerRecord64.checksum();
        java.io.Serializable serializable67 = serializableConsumerRecord64.key();
        java.lang.String str68 = serializableConsumerRecord64.topic();
        int int69 = serializableConsumerRecord64.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (byte) 10 + "'", serializable67, (byte) 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType16, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int23 = serializableConsumerRecord22.serializedValueSize();
        int int24 = serializableConsumerRecord22.serializedValueSize();
        long long25 = serializableConsumerRecord22.offset();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType11, serializableConsumerRecord22);
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord22.leaderEpoch();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord22.value();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        long long9 = serializableConsumerRecord5.checksum();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        java.io.Serializable serializable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType24, (long) 0, 0, 0, serializable47, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass50 = timestampType24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.io.Serializable) timestampType53, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable74 = serializableConsumerRecord73.key();
        long long75 = serializableConsumerRecord73.checksum();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord73.value();
        java.lang.Class<?> wildcardClass77 = charSequence76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable> strComparableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 100, (long) (byte) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.io.Serializable) wildcardClass77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, (long) 32, (long) (byte) -1, timestampType53, (long) '4', (int) (byte) 0, (int) (byte) 1, (java.io.Serializable) wildcardClass77, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int81 = serializableConsumerRecord80.partition();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord80.headers();
        long long83 = serializableConsumerRecord80.offset();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 1 + "'", serializable74, (short) 1);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 32L + "'", long83 == 32L);
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        java.lang.String str23 = serializableConsumerRecord10.toString();
        java.lang.String str24 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        long long20 = serializableConsumerRecord10.checksum();
        long long21 = serializableConsumerRecord10.timestamp();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (short) 1 + "'", serializable10, (short) 1);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str37 = serializableConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord36.timestampType();
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType38, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence43);
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType58, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType45, (long) '#', 1, 0, (java.io.Serializable) timestampType58, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType68, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int75 = serializableConsumerRecord74.serializedValueSize();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        long long77 = serializableConsumerRecord74.timestamp();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) 1, (long) '#', timestampType19, (java.lang.Long) 1L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers78);
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) '#', 1L, timestampType19, 0L, 1, 1, (java.io.Serializable) wildcardClass84, (java.lang.CharSequence) "hi!");
        java.lang.String str87 = serializableConsumerRecord86.toString();
        long long88 = serializableConsumerRecord86.checksum();
        java.lang.String str89 = serializableConsumerRecord86.topic();
        int int90 = serializableConsumerRecord86.partition();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord86.leaderEpoch();
        int int92 = serializableConsumerRecord86.partition();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)" + "'", str87, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str89, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 32 + "'", int90 == 32);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 32 + "'", int92 == 32);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        java.io.Serializable serializable43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType20, (long) 0, 0, 0, serializable43, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord47.leaderEpoch();
        long long49 = serializableConsumerRecord47.checksum();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord47.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord47.leaderEpoch();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str59 = serializableConsumerRecord58.topic();
        java.io.Serializable serializable60 = serializableConsumerRecord58.key();
        long long61 = serializableConsumerRecord58.offset();
        int int62 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> annotatedElementConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 100, (long) ' ', (java.lang.reflect.AnnotatedElement) wildcardClass52, serializableConsumerRecord58);
        int int64 = serializableConsumerRecord58.partition();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (byte) -1 + "'", serializable60, (byte) -1);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 52L + "'", long61 == 52L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedValueSize();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord59.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType18, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence23);
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType38, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType25, (long) '#', 1, 0, (java.io.Serializable) timestampType38, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) (short) 1, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        int int45 = serializableConsumerRecord44.serializedKeySize();
        long long46 = serializableConsumerRecord44.checksum();
        java.lang.String str47 = serializableConsumerRecord44.topic();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long9 = serializableConsumerRecord8.checksum();
        long long10 = serializableConsumerRecord8.checksum();
        long long11 = serializableConsumerRecord8.checksum();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        java.lang.String str15 = serializableConsumerRecord14.toString();
        java.io.Serializable serializable16 = serializableConsumerRecord14.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord14.timestampType();
        int int18 = serializableConsumerRecord14.partition();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))" + "'", str15, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))");
        org.junit.Assert.assertTrue("'" + serializable16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        long long66 = serializableConsumerRecord64.checksum();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        java.lang.String str68 = serializableConsumerRecord64.toString();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        int int71 = serializableConsumerRecord64.partition();
        int int72 = serializableConsumerRecord64.partition();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord64.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str68, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(headers73);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable36 = serializableConsumerRecord35.key();
        long long37 = serializableConsumerRecord35.checksum();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        int int39 = serializableConsumerRecord35.serializedKeySize();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord35.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass40, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int50 = serializableConsumerRecord49.partition();
        java.lang.String str51 = serializableConsumerRecord49.topic();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord49.timestampType();
        long long53 = serializableConsumerRecord49.timestamp();
        org.apache.kafka.common.header.Headers headers54 = serializableConsumerRecord49.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType18, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass40, headers43, headers54);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 52, (long) 97, (long) 0, timestampType10, (long) (byte) 1, (int) (byte) 100, 97, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str51, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(headers54);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", charSequence58, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long40 = serializableConsumerRecord39.checksum();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord39.headers();
        int int43 = serializableConsumerRecord39.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        int int71 = serializableConsumerRecord67.partition();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 10, (long) (short) -1, (java.io.Serializable) wildcardClass72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        int int75 = serializableConsumerRecord74.partition();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + false + "'", serializable13, false);
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord13.timestampType();
        java.lang.String str90 = serializableConsumerRecord13.toString();
        java.lang.String str91 = serializableConsumerRecord13.toString();
        int int92 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional93 = serializableConsumerRecord13.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str90, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertNotNull(intOptional93);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        long long12 = serializableConsumerRecord8.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, 52L, (java.io.Serializable) timestampType13, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        int int16 = serializableConsumerRecord15.partition();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord30.timestampType();
        long long34 = serializableConsumerRecord30.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord30.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass38 = headerIterableConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        int int46 = serializableConsumerRecord44.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) (short) 1, (long) (byte) -1, timestampType13, (java.lang.Long) 32L, (int) (byte) 10, (int) 'a', (java.lang.reflect.Type) wildcardClass38, intOptional48, headers61);
        java.lang.Class<?> wildcardClass63 = timestampType13.getClass();
        java.lang.CharSequence charSequence64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) (short) -1, 32L, (java.io.Serializable) wildcardClass63, charSequence64);
        int int66 = serializableConsumerRecord65.partition();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        int int96 = serializableConsumerRecord92.serializedKeySize();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional98 = serializableConsumerRecord92.leaderEpoch();
        java.lang.String str99 = serializableConsumerRecord92.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str99, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.checksum();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + false + "'", serializable12, false);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str12 = serializableConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord11.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord11.key();
        java.lang.String str15 = serializableConsumerRecord11.toString();
        long long16 = serializableConsumerRecord11.checksum();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", 0, 52L, (java.io.Serializable) wildcardClass17, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", 32, 97L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        int int23 = serializableConsumerRecord21.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (-1.0d) + "'", serializable14, (-1.0d));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", str22, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        int int26 = serializableConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType15, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord43.value();
        long long47 = serializableConsumerRecord43.offset();
        java.io.Serializable serializable48 = serializableConsumerRecord43.key();
        java.lang.String str49 = serializableConsumerRecord43.toString();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord43.getClass();
        java.lang.CharSequence charSequence51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, 0L, (long) 35, timestampType15, 0L, (int) (byte) 100, 1, (java.io.Serializable) wildcardClass50, charSequence51);
        org.apache.kafka.common.header.Headers headers53 = serializableConsumerRecord52.headers();
        java.lang.String str54 = serializableConsumerRecord52.topic();
        java.io.Serializable serializable55 = serializableConsumerRecord52.key();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(headers53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str54, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(serializable55);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.lang.String str25 = serializableConsumerRecord23.toString();
        java.lang.String str26 = serializableConsumerRecord23.toString();
        int int27 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str25, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str26, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        long long7 = serializableConsumerRecord5.timestamp();
        long long8 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + false + "'", serializable6, false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        long long21 = serializableConsumerRecord10.timestamp();
        int int22 = serializableConsumerRecord10.partition();
        int int23 = serializableConsumerRecord10.serializedKeySize();
        long long24 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable25 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 1 + "'", serializable25, (short) 1);
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        int int21 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType27, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        int int35 = serializableConsumerRecord33.serializedValueSize();
        long long36 = serializableConsumerRecord33.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType22, serializableConsumerRecord33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 35, (long) (byte) 1, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable64 = serializableConsumerRecord63.key();
        long long65 = serializableConsumerRecord63.checksum();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        int int67 = serializableConsumerRecord63.serializedKeySize();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int78 = serializableConsumerRecord77.partition();
        java.lang.String str79 = serializableConsumerRecord77.topic();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord77.timestampType();
        long long81 = serializableConsumerRecord77.timestamp();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType46, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass68, headers71, headers82);
        java.util.Optional<java.lang.Integer> intOptional84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 32, (long) '#', (long) (byte) 10, timestampType4, (java.lang.Long) 1L, (int) (short) 100, (int) (byte) 100, (java.io.Serializable) timestampType22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", headers82, intOptional84);
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord85.headers();
        long long87 = serializableConsumerRecord85.checksum();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str79, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNotNull(headers86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        java.io.Serializable serializable93 = serializableConsumerRecord92.key();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord92.headers();
        org.apache.kafka.common.record.TimestampType timestampType96 = serializableConsumerRecord92.timestampType();
        int int97 = serializableConsumerRecord92.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord92.timestampType();
        long long99 = serializableConsumerRecord92.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + 0 + "'", serializable93, 0);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertTrue("'" + timestampType96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 10L + "'", long99 == 10L);
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType16, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int23 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) 1, (long) 0, timestampType7, 10L, (int) (short) 100, (int) (short) 1, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass24);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.partition();
        long long29 = serializableConsumerRecord27.checksum();
        int int30 = serializableConsumerRecord27.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.partition();
        int int18 = serializableConsumerRecord16.partition();
        long long19 = serializableConsumerRecord16.offset();
        java.lang.String str20 = serializableConsumerRecord16.toString();
        long long21 = serializableConsumerRecord16.checksum();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str40 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.lang.CharSequence charSequence46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType41, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence46);
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType61, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType48, (long) '#', 1, 0, (java.io.Serializable) timestampType61, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType71, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int78 = serializableConsumerRecord77.serializedValueSize();
        int int79 = serializableConsumerRecord77.serializedKeySize();
        long long80 = serializableConsumerRecord77.timestamp();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) 1, (long) '#', timestampType22, (java.lang.Long) 1L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType48, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers81);
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) '#', 1L, timestampType22, 0L, 1, 1, (java.io.Serializable) wildcardClass87, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', 32L, (java.io.Serializable) wildcardClass87, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        long long92 = serializableConsumerRecord91.checksum();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.toString();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord88.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        java.lang.Object obj34 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        java.io.Serializable serializable47 = serializableConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord45.timestampType();
        long long49 = serializableConsumerRecord45.offset();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration> objConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 100, (-1L), (long) (byte) -1, timestampType28, (long) 97, (int) (byte) 1, (int) (byte) 1, obj34, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 10L, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int54 = serializableConsumerRecord53.serializedKeySize();
        int int55 = serializableConsumerRecord53.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 1 + "'", serializable47, (short) 1);
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        long long14 = serializableConsumerRecord10.timestamp();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord54.leaderEpoch();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        java.lang.Class<?> wildcardClass57 = serializableConsumerRecord54.getClass();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        long long42 = serializableConsumerRecord39.checksum();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + 10L + "'", serializable41, 10L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        java.lang.String str15 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.partition();
        int int31 = serializableConsumerRecord29.partition();
        long long32 = serializableConsumerRecord29.timestamp();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord29.leaderEpoch();
        long long34 = serializableConsumerRecord29.checksum();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 10, 0L, timestampType35, (long) 52, 0, (int) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, 0L, (long) (byte) 1, timestampType16, 1L, (int) (byte) 10, 52, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        long long44 = serializableConsumerRecord43.offset();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        long long9 = serializableConsumerRecord5.checksum();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        long long8 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        long long11 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "hi!" + "'", charSequence6, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "hi!" + "'", charSequence7, "hi!");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        int int67 = serializableConsumerRecord59.partition();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord59.headers();
        java.lang.String str69 = serializableConsumerRecord59.topic();
        java.lang.String str70 = serializableConsumerRecord59.toString();
        int int71 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (short) 10, serializable3, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertNull(serializable7);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "hi!" + "'", charSequence6, "hi!");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.timestamp();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        long long68 = serializableConsumerRecord62.timestamp();
        int int69 = serializableConsumerRecord62.serializedValueSize();
        java.lang.String str70 = serializableConsumerRecord62.toString();
        java.lang.String str71 = serializableConsumerRecord62.topic();
        java.io.Serializable serializable72 = serializableConsumerRecord62.key();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) 0, (-1L), (java.io.Serializable) timestampType74, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 10L + "'", long68 == 10L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str71, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(serializable72);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int6 = serializableConsumerRecord5.serializedKeySize();
        long long7 = serializableConsumerRecord5.checksum();
        int int8 = serializableConsumerRecord5.partition();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        org.apache.kafka.common.header.Headers headers3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long10 = serializableConsumerRecord9.offset();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord9.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.AnnotatedElement> headersConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (-1), 52L, headers3, (java.lang.reflect.AnnotatedElement) wildcardClass11);
        java.lang.Class<?> wildcardClass13 = headersConsumerRecord12.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        long long15 = serializableConsumerRecord10.offset();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.serializedValueSize();
        java.io.Serializable serializable67 = serializableConsumerRecord64.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord64.timestampType();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord64.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 32 + "'", int66 == 32);
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (byte) 10 + "'", serializable67, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType30, (long) '#', 1, 0, (java.io.Serializable) timestampType43, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType43, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord62);
        java.io.Serializable serializable69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str77 = serializableConsumerRecord76.topic();
        int int78 = serializableConsumerRecord76.partition();
        java.lang.String str79 = serializableConsumerRecord76.topic();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 10, (long) (short) 0, (long) (byte) 1, timestampType43, (java.lang.Long) 10L, 0, (int) (short) 0, serializable69, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers80);
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord81.headers();
        java.io.Serializable serializable83 = serializableConsumerRecord81.key();
        int int84 = serializableConsumerRecord81.partition();
        int int85 = serializableConsumerRecord81.serializedKeySize();
        long long86 = serializableConsumerRecord81.checksum();
        java.lang.String str87 = serializableConsumerRecord81.toString();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNull(serializable83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 10L + "'", long86 == 10L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str87, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.partition();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str11, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.lang.String str66 = serializableConsumerRecord64.topic();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord64.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertNotNull(headers67);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        long long12 = serializableConsumerRecord5.timestamp();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        int int14 = serializableConsumerRecord5.serializedValueSize();
        long long15 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord8.getClass();
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 100, 97L, (java.io.Serializable) wildcardClass11, charSequence12);
        java.lang.String str14 = serializableConsumerRecord13.toString();
        long long15 = serializableConsumerRecord13.offset();
        int int16 = serializableConsumerRecord13.serializedValueSize();
        long long17 = serializableConsumerRecord13.checksum();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence8);
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        int int37 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType38, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType38, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int63 = serializableConsumerRecord62.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord62.timestampType();
        java.io.Serializable serializable65 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType66, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.String str69 = serializableConsumerRecord68.topic();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 0, (long) (byte) 100, (long) (-1), timestampType38, (long) 100, (int) (byte) 1, (int) (short) 100, intOptional70, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 100, 35L, 10L, timestampType12, 0L, 52, 10, (java.io.Serializable) (byte) 1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord74.leaderEpoch();
        long long76 = serializableConsumerRecord74.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + 1.0f + "'", serializable65, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str69, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 10L + "'", long76 == 10L);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.checksum();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.String str81 = serializableConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord58.leaderEpoch();
        int int83 = serializableConsumerRecord58.partition();
        int int84 = serializableConsumerRecord58.serializedKeySize();
        long long85 = serializableConsumerRecord58.timestamp();
        java.lang.String str86 = serializableConsumerRecord58.topic();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.partition();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord8.leaderEpoch();
        long long11 = serializableConsumerRecord8.checksum();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord8.value();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord8.headers();
        java.io.Serializable serializable14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.io.Serializable> headersConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 0, (long) 97, headers13, serializable14);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers13);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', 0L, (long) '4', timestampType25, (long) (byte) 10, (int) (short) 0, 100, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int78 = serializableConsumerRecord77.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 100, (long) (short) 10, (java.io.Serializable) timestampType79, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        long long61 = serializableConsumerRecord59.offset();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        java.lang.CharSequence charSequence63 = serializableConsumerRecord59.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord59.value();
        int int65 = serializableConsumerRecord59.serializedValueSize();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L + "'", long61 == 100L);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        int int16 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) (short) 0, serializableConsumerRecord13, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        int int20 = serializableConsumerRecord13.partition();
        long long21 = serializableConsumerRecord13.timestamp();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        long long9 = serializableConsumerRecord5.timestamp();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        long long11 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        int int52 = serializableConsumerRecord50.serializedKeySize();
        int int53 = serializableConsumerRecord50.serializedKeySize();
        int int54 = serializableConsumerRecord50.partition();
        java.io.Serializable serializable55 = serializableConsumerRecord50.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType35, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord50);
        java.io.Serializable serializable60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord70.headers();
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        java.io.Serializable serializable84 = serializableConsumerRecord82.key();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord82.timestampType();
        long long86 = serializableConsumerRecord82.offset();
        java.lang.String str87 = serializableConsumerRecord82.topic();
        long long88 = serializableConsumerRecord82.checksum();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord82.timestampType();
        java.lang.CharSequence charSequence90 = serializableConsumerRecord82.value();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord82.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>> headerIterableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 32L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers71, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 100, (long) 97, (long) 10, timestampType35, (java.lang.Long) 1L, (int) (short) -1, 0, serializable60, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers71);
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord93.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) -1, (long) 'a', 52L, timestampType14, (java.lang.Long) 32L, 1, 0, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers94);
        java.lang.CharSequence charSequence96 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", 0, (long) (-1), (java.io.Serializable) timestampType14, charSequence96);
        int int98 = serializableConsumerRecord97.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "hi!" + "'", charSequence90, "hi!");
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.timestamp();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.offset();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str24 = serializableConsumerRecord23.topic();
        int int25 = serializableConsumerRecord23.partition();
        java.lang.String str26 = serializableConsumerRecord23.topic();
        java.io.Serializable serializable27 = serializableConsumerRecord23.key();
        long long28 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int52 = serializableConsumerRecord51.partition();
        java.lang.String str53 = serializableConsumerRecord51.topic();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType42, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType54, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers57 = serializableConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int64 = serializableConsumerRecord63.partition();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (byte) 1, (long) (short) 100, 0L, timestampType14, (java.lang.Long) 10L, (int) (byte) -1, 0, (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", headers57, intOptional65);
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType74, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable81 = serializableConsumerRecord80.key();
        long long82 = serializableConsumerRecord80.checksum();
        java.util.Optional<java.lang.Integer> intOptional83 = serializableConsumerRecord80.leaderEpoch();
        int int84 = serializableConsumerRecord80.serializedKeySize();
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord80.headers();
        java.lang.Class<?> wildcardClass86 = headers85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) 1, (long) 35, timestampType29, (-1L), (int) (short) 100, (int) (short) 1, (java.io.Serializable) wildcardClass86, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int89 = serializableConsumerRecord88.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (-1.0d) + "'", serializable27, (-1.0d));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str53, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertNotNull(intOptional83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence10 = serializableConsumerRecord9.value();
        int int11 = serializableConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int27 = serializableConsumerRecord26.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord42.getClass();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        int int58 = serializableConsumerRecord56.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional59 = serializableConsumerRecord56.leaderEpoch();
        java.io.Serializable serializable60 = serializableConsumerRecord56.key();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord56.headers();
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType67, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int74 = serializableConsumerRecord73.partition();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord73.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType28, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass44, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers62, intOptional75);
        long long77 = serializableConsumerRecord76.offset();
        java.lang.String str78 = serializableConsumerRecord76.topic();
        long long79 = serializableConsumerRecord76.checksum();
        long long80 = serializableConsumerRecord76.offset();
        java.lang.String str81 = serializableConsumerRecord76.topic();
        long long82 = serializableConsumerRecord76.timestamp();
        java.lang.String str83 = serializableConsumerRecord76.topic();
        int int84 = serializableConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord76.headers();
        java.lang.String str86 = serializableConsumerRecord76.topic();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord76.value();
        int int88 = serializableConsumerRecord76.serializedKeySize();
        java.lang.String str89 = serializableConsumerRecord76.toString();
        java.lang.String str90 = serializableConsumerRecord76.topic();
        java.lang.Class<?> wildcardClass91 = serializableConsumerRecord76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) '#', 1L, timestampType13, (long) ' ', 0, 100, (java.io.Serializable) wildcardClass91, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord93.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(intOptional59);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L + "'", long77 == 100L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str78, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L + "'", long80 == 100L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str83, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str86, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence87, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str89, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str90, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        int int12 = serializableConsumerRecord5.partition();
        java.lang.String str13 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.partition();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        long long87 = serializableConsumerRecord84.timestamp();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord84.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str86, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
        org.junit.Assert.assertNotNull(intOptional88);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long40 = serializableConsumerRecord39.checksum();
        java.lang.CharSequence charSequence41 = serializableConsumerRecord39.value();
        java.lang.CharSequence charSequence42 = serializableConsumerRecord39.value();
        long long43 = serializableConsumerRecord39.checksum();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord39.value();
        java.lang.CharSequence charSequence45 = serializableConsumerRecord39.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence41, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence42, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence44, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence45, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        long long12 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.String str20 = serializableConsumerRecord18.topic();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord18.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable29 = serializableConsumerRecord28.key();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord28.headers();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        java.lang.String str46 = serializableConsumerRecord41.topic();
        long long47 = serializableConsumerRecord41.offset();
        int int48 = serializableConsumerRecord41.serializedValueSize();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord41.value();
        long long50 = serializableConsumerRecord41.checksum();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord41.value();
        java.io.Serializable serializable52 = serializableConsumerRecord41.key();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) (byte) -1, 52L, timestampType4, (java.lang.Long) 10L, 32, 32, serializableConsumerRecord18, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", headers30, intOptional53);
        java.lang.String str55 = serializableConsumerRecord18.toString();
        java.io.Serializable serializable56 = serializableConsumerRecord18.key();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 1.0f + "'", serializable29, 1.0f);
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 1 + "'", serializable56, (short) 1);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        int int67 = serializableConsumerRecord64.serializedKeySize();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord64.headers();
        java.lang.String str69 = serializableConsumerRecord64.topic();
        long long70 = serializableConsumerRecord64.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType16, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence23 = serializableConsumerRecord22.value();
        int int24 = serializableConsumerRecord22.serializedKeySize();
        long long25 = serializableConsumerRecord22.offset();
        java.lang.Class<?> wildcardClass26 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, 100L, (java.io.Serializable) wildcardClass26, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        long long43 = serializableConsumerRecord39.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 10, (long) 10, (java.lang.Object) wildcardClass26, (java.lang.Object) serializableConsumerRecord39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String> typeConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) -1, (long) (short) 0, (java.lang.reflect.Type) wildcardClass26, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) (short) 0, (long) 'a', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        int int50 = serializableConsumerRecord48.partition();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intOptional51);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional45, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass49 = intOptionalConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType10, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int52 = serializableConsumerRecord51.partition();
        int int53 = serializableConsumerRecord51.serializedKeySize();
        org.apache.kafka.common.header.Headers headers54 = serializableConsumerRecord51.headers();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(headers54);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType18, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType18, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        java.io.Serializable serializable31 = serializableConsumerRecord30.key();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (-1.0d) + "'", serializable31, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (-1.0d) + "'", serializable32, (-1.0d));
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType31, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType31, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long57 = serializableConsumerRecord56.checksum();
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long66 = serializableConsumerRecord65.checksum();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long74 = serializableConsumerRecord73.timestamp();
        int int75 = serializableConsumerRecord73.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord73.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 0, (long) 10, 1L, timestampType13, (java.lang.Long) 100L, (int) (short) 10, (int) (byte) 1, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType58, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", headers67, intOptional76);
        java.lang.Class<?> wildcardClass78 = timestampType13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 0, (long) (short) 100, (java.io.Serializable) timestampType13, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (byte) 10, (long) 'a', (java.io.Serializable) 52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        int int65 = serializableConsumerRecord64.serializedValueSize();
        int int66 = serializableConsumerRecord64.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord9.headers();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        java.io.Serializable serializable13 = serializableConsumerRecord9.key();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        long long33 = serializableConsumerRecord29.offset();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 0, 52L, (long) (short) 0, timestampType15, 0L, (int) '4', (int) (short) 100, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int37 = serializableConsumerRecord36.partition();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 100.0f + "'", serializable13, 100.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        int int15 = serializableConsumerRecord10.partition();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType14, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + 10L + "'", serializable41, 10L);
        org.junit.Assert.assertNotNull(intOptional42);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.partition();
        java.lang.String str10 = serializableConsumerRecord8.topic();
        java.lang.String str11 = serializableConsumerRecord8.toString();
        long long12 = serializableConsumerRecord8.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (byte) 1, 32L, (java.io.Serializable) timestampType13, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str16 = serializableConsumerRecord15.topic();
        java.lang.String str17 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord15.headers();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))" + "'", str16, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))" + "'", str17, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord13.value();
        int int17 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord13.leaderEpoch();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord13.leaderEpoch();
        java.lang.Class<?> wildcardClass21 = intOptional20.getClass();
        java.lang.CharSequence charSequence22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) 'a', (long) ' ', (java.io.Serializable) wildcardClass21, charSequence22);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long12 = serializableConsumerRecord11.checksum();
        java.lang.Class<?> wildcardClass13 = serializableConsumerRecord11.getClass();
        org.apache.kafka.common.record.TimestampType timestampType18 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType18, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence25 = serializableConsumerRecord24.value();
        java.io.Serializable serializable26 = serializableConsumerRecord24.key();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord24.timestampType();
        long long28 = serializableConsumerRecord24.offset();
        java.lang.String str29 = serializableConsumerRecord24.topic();
        long long30 = serializableConsumerRecord24.offset();
        long long31 = serializableConsumerRecord24.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object> genericDeclarationConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object>("hi!", (int) (byte) 100, (long) '4', (java.lang.reflect.GenericDeclaration) wildcardClass13, (java.lang.Object) long31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 100, 97L, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + charSequence25 + "' != '" + "hi!" + "'", charSequence25, "hi!");
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + (short) 1 + "'", serializable26, (short) 1);
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable46 = serializableConsumerRecord45.key();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        java.lang.String str48 = serializableConsumerRecord45.toString();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord45.headers();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(serializable46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str48, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers49);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.offset();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        long long21 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 35, (long) (short) -1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int94 = serializableConsumerRecord93.serializedValueSize();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord93.value();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord93.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", charSequence95, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional96);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        long long10 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        long long12 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        int int14 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 1, (long) 100, (long) '4', timestampType4, (-1L), (int) ' ', (int) '4', (java.io.Serializable) true, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int11 = serializableConsumerRecord10.partition();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        java.io.Serializable serializable93 = serializableConsumerRecord92.key();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord92.headers();
        org.apache.kafka.common.record.TimestampType timestampType96 = serializableConsumerRecord92.timestampType();
        int int97 = serializableConsumerRecord92.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord92.timestampType();
        int int99 = serializableConsumerRecord92.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + 0 + "'", serializable93, 0);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertTrue("'" + timestampType96 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType96.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        int int11 = serializableConsumerRecord9.partition();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord9.headers();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int32 = serializableConsumerRecord31.partition();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord31.leaderEpoch();
        java.io.Serializable serializable34 = serializableConsumerRecord31.key();
        java.lang.String str35 = serializableConsumerRecord31.toString();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable48 = serializableConsumerRecord47.key();
        long long49 = serializableConsumerRecord47.offset();
        long long50 = serializableConsumerRecord47.timestamp();
        long long51 = serializableConsumerRecord47.timestamp();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) -1, (long) (-1), timestampType36, headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str63 = serializableConsumerRecord62.topic();
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord62.timestampType();
        java.io.Serializable serializable65 = serializableConsumerRecord62.key();
        java.lang.String str66 = serializableConsumerRecord62.toString();
        long long67 = serializableConsumerRecord62.checksum();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord62.value();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord75.timestampType();
        int int77 = serializableConsumerRecord75.partition();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord75.headers();
        long long79 = serializableConsumerRecord75.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord75.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int87 = serializableConsumerRecord86.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord86.leaderEpoch();
        long long89 = serializableConsumerRecord86.checksum();
        int int90 = serializableConsumerRecord86.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord86.leaderEpoch();
        int int92 = serializableConsumerRecord86.serializedKeySize();
        long long93 = serializableConsumerRecord86.timestamp();
        long long94 = serializableConsumerRecord86.offset();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object> typeConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) 10, (long) 52, 0L, timestampType36, (java.lang.Long) 100L, 32, 1, (java.lang.reflect.Type) wildcardClass69, (java.lang.Object) serializableConsumerRecord75, headers95);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ))", 100, (long) (byte) -1, (long) ' ', timestampType15, (long) (short) -1, (int) (short) -1, 35, (java.io.Serializable) 52, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + false + "'", serializable34, false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (-1.0d) + "'", serializable65, (-1.0d));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(headers95);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        long long43 = serializableConsumerRecord39.offset();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord39.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType25, 0L, 32, (int) (byte) 10, headers46, serializableConsumerRecord47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        java.io.Serializable serializable78 = serializableConsumerRecord76.key();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord76.timestampType();
        long long80 = serializableConsumerRecord76.offset();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord76.headers();
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord76.timestampType();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType62, 0L, 32, (int) (byte) 10, headers83, serializableConsumerRecord84);
        java.lang.CharSequence charSequence86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) (short) 0, (long) (short) 10, timestampType25, (long) (byte) 100, (int) (byte) 10, 97, (java.io.Serializable) timestampType62, charSequence86);
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord87.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '4', (java.io.Serializable) timestampType88, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (short) 100, (long) 'a', (long) (short) 10, timestampType4, 10L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType88, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str93 = serializableConsumerRecord92.topic();
        java.io.Serializable serializable94 = serializableConsumerRecord92.key();
        long long95 = serializableConsumerRecord92.checksum();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertNull(timestampType45);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNull(timestampType79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertNull(timestampType82);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + timestampType88 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType88.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + serializable94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 10L + "'", long95 == 10L);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.partition();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 10.0f + "'", serializable16, 10.0f);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        long long21 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        java.lang.Class<?> wildcardClass15 = serializable14.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 100, serializable14, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int18 = serializableConsumerRecord17.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType13, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int20 = serializableConsumerRecord19.serializedValueSize();
        java.lang.String str21 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord50.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType34, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers52);
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType71, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers89);
        java.util.Optional<java.lang.Integer> intOptional91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType26, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers52, headers66, headers89, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord19, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers66);
        long long94 = serializableConsumerRecord19.checksum();
        java.lang.Class<?> wildcardClass95 = serializableConsumerRecord19.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) -1, (long) 10, (java.io.Serializable) wildcardClass95, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 0, (long) '4', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        long long8 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "hi!" + "'", charSequence6, "hi!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        int int60 = serializableConsumerRecord57.serializedValueSize();
        java.lang.String str61 = serializableConsumerRecord57.topic();
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord57.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str61, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(intOptional20);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType32, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int39 = serializableConsumerRecord38.serializedValueSize();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        int int41 = serializableConsumerRecord38.serializedKeySize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable54 = serializableConsumerRecord53.key();
        long long55 = serializableConsumerRecord53.checksum();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType22, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers42, intOptional56);
        long long58 = serializableConsumerRecord57.offset();
        java.lang.String str59 = serializableConsumerRecord57.topic();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord57.timestampType();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 32L + "'", long58 == 32L);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str59, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.offset();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        long long13 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        long long13 = serializableConsumerRecord12.timestamp();
        long long14 = serializableConsumerRecord12.offset();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord12.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord12.leaderEpoch();
        int int17 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord12.headers();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType19, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence24);
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        long long45 = serializableConsumerRecord42.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        long long60 = serializableConsumerRecord58.checksum();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType26, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers47, intOptional61);
        java.io.Serializable serializable66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (byte) -1, (long) (short) 1, timestampType26, (long) (byte) 100, (int) (byte) 1, 97, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.lang.String str69 = serializableConsumerRecord68.toString();
        long long70 = serializableConsumerRecord68.timestamp();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord68.headers();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord68.headers();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(timestampType46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertNotNull(headers72);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str44 = serializableConsumerRecord43.topic();
        int int45 = serializableConsumerRecord43.partition();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord43.value();
        long long47 = serializableConsumerRecord43.checksum();
        int int48 = serializableConsumerRecord43.partition();
        int int49 = serializableConsumerRecord43.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", 100, (long) 10, (long) (byte) -1, timestampType31, (long) (byte) -1, (int) ' ', 1, (java.io.Serializable) timestampType50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType22, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int29 = serializableConsumerRecord28.serializedValueSize();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) 1, (long) 0, timestampType13, 10L, (int) (short) 100, (int) (short) 1, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        java.lang.Class<?> wildcardClass35 = timestampType34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) -1, (long) 10, (java.io.Serializable) wildcardClass35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 97, (long) (short) -1, (java.io.Serializable) wildcardClass35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        long long91 = serializableConsumerRecord88.offset();
        long long92 = serializableConsumerRecord88.offset();
        java.lang.Class<?> wildcardClass93 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 0L + "'", long91 == 0L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType18, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence32);
        java.io.Serializable serializable34 = serializableConsumerRecord33.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        int int36 = serializableConsumerRecord33.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.String str50 = serializableConsumerRecord47.toString();
        java.lang.CharSequence charSequence51 = serializableConsumerRecord47.value();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>> objConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", 0, (long) '#', (long) (short) 10, timestampType18, 97L, (int) 'a', (-1), (java.lang.Object) serializableConsumerRecord33, intOptional52);
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord33.timestampType();
        java.lang.String str55 = serializableConsumerRecord33.topic();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (byte) 10 + "'", serializable34, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str55, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        java.io.Serializable serializable93 = serializableConsumerRecord92.key();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord92.headers();
        java.lang.String str96 = serializableConsumerRecord92.topic();
        long long97 = serializableConsumerRecord92.timestamp();
        long long98 = serializableConsumerRecord92.offset();
        int int99 = serializableConsumerRecord92.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + 0 + "'", serializable93, 0);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        int int67 = serializableConsumerRecord59.partition();
        java.io.Serializable serializable68 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord59.headers();
        java.lang.CharSequence charSequence71 = serializableConsumerRecord59.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(serializable68);
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence71, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int23 = serializableConsumerRecord22.partition();
        java.lang.String str24 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord22.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, 10L, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) ' ', (java.io.Serializable) timestampType28, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.io.Serializable serializable34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 100L, (long) '4', timestampType28, (long) 52, 35, (int) (byte) 0, serializable34, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType44, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers62);
        long long64 = serializableConsumerRecord63.timestamp();
        long long65 = serializableConsumerRecord63.timestamp();
        long long66 = serializableConsumerRecord63.timestamp();
        int int67 = serializableConsumerRecord63.serializedKeySize();
        java.lang.String str68 = serializableConsumerRecord63.topic();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable80 = serializableConsumerRecord79.key();
        long long81 = serializableConsumerRecord79.checksum();
        long long82 = serializableConsumerRecord79.timestamp();
        java.lang.CharSequence charSequence83 = serializableConsumerRecord79.value();
        int int84 = serializableConsumerRecord79.serializedValueSize();
        java.lang.Class<?> wildcardClass85 = serializableConsumerRecord79.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.Type> serializableConsumerRecordConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 100, 35L, timestampType28, (long) 52, 0, 0, serializableConsumerRecord63, (java.lang.reflect.Type) wildcardClass85);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) '4', 97L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str24, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "hi!" + "'", str68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        int int12 = serializableConsumerRecord9.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        org.apache.kafka.common.header.Headers headers39 = serializableConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType21, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers39);
        long long41 = serializableConsumerRecord40.timestamp();
        long long42 = serializableConsumerRecord40.offset();
        int int43 = serializableConsumerRecord40.serializedValueSize();
        java.lang.String str44 = serializableConsumerRecord40.topic();
        long long45 = serializableConsumerRecord40.checksum();
        long long46 = serializableConsumerRecord40.timestamp();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long53 = serializableConsumerRecord52.timestamp();
        int int54 = serializableConsumerRecord52.serializedKeySize();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type> objConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) (-1), (long) 32, timestampType13, (long) 'a', 52, 1, (java.lang.Object) serializableConsumerRecord40, (java.lang.reflect.Type) wildcardClass55);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        long long16 = serializableConsumerRecord13.offset();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, (-1L), (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int23 = serializableConsumerRecord22.partition();
        long long24 = serializableConsumerRecord22.offset();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord22.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord21.value();
        long long24 = serializableConsumerRecord21.timestamp();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', (long) 52, (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord27.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long46 = serializableConsumerRecord45.checksum();
        long long47 = serializableConsumerRecord45.checksum();
        long long48 = serializableConsumerRecord45.checksum();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType49, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable64 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType65, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 97, (long) 100, (long) '#', timestampType49, (long) 97, (int) '4', 0, (java.io.Serializable) timestampType65, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.Class<?> wildcardClass70 = timestampType65.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 97, (long) 52, (long) (short) -1, timestampType29, (long) (byte) 0, 35, (int) (short) 10, (java.io.Serializable) timestampType65, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence87 = serializableConsumerRecord86.value();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional89 = serializableConsumerRecord86.leaderEpoch();
        java.io.Serializable serializable90 = serializableConsumerRecord86.key();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord86.value();
        long long92 = serializableConsumerRecord86.timestamp();
        int int93 = serializableConsumerRecord86.serializedValueSize();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord86.value();
        long long95 = serializableConsumerRecord86.timestamp();
        java.lang.Class<?> wildcardClass96 = serializableConsumerRecord86.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, 100L, (long) (short) 0, timestampType29, (long) 0, 10, (int) (short) 1, (java.io.Serializable) wildcardClass96, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + 100.0f + "'", serializable64, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + charSequence87 + "' != '" + "hi!" + "'", charSequence87, "hi!");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertEquals("'" + serializable90 + "' != '" + (short) 1 + "'", serializable90, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "hi!" + "'", charSequence94, "hi!");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        long long19 = serializableConsumerRecord16.offset();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, 100L, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord22.headers();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence35 = serializableConsumerRecord34.value();
        int int36 = serializableConsumerRecord34.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord34.leaderEpoch();
        long long38 = serializableConsumerRecord34.checksum();
        int int39 = serializableConsumerRecord34.serializedValueSize();
        long long40 = serializableConsumerRecord34.timestamp();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord34.headers();
        long long42 = serializableConsumerRecord34.timestamp();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.Type> headersConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.Type>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) 35, headers23, (java.lang.reflect.Type) wildcardClass43);
        java.lang.Class<?> wildcardClass45 = headers23.getClass();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertEquals("'" + charSequence35 + "' != '" + "hi!" + "'", charSequence35, "hi!");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        java.lang.String str28 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        long long12 = serializableConsumerRecord9.offset();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str33 = serializableConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord32.timestampType();
        java.lang.CharSequence charSequence39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType34, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence39);
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord40.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType41, (long) '#', 1, 0, (java.io.Serializable) timestampType54, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType64, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int71 = serializableConsumerRecord70.serializedValueSize();
        int int72 = serializableConsumerRecord70.serializedKeySize();
        long long73 = serializableConsumerRecord70.timestamp();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord70.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) 1, (long) '#', timestampType15, (java.lang.Long) 1L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType41, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers74);
        long long76 = serializableConsumerRecord75.checksum();
        int int77 = serializableConsumerRecord75.partition();
        java.lang.String str78 = serializableConsumerRecord75.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str78, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType12, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int19 = serializableConsumerRecord18.serializedValueSize();
        int int20 = serializableConsumerRecord18.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord18.timestampType();
        long long22 = serializableConsumerRecord18.timestamp();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType29, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int36 = serializableConsumerRecord35.serializedValueSize();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        int int38 = serializableConsumerRecord35.serializedKeySize();
        int int39 = serializableConsumerRecord35.serializedKeySize();
        java.lang.String str40 = serializableConsumerRecord35.toString();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord35.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int48 = serializableConsumerRecord47.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord47.leaderEpoch();
        long long50 = serializableConsumerRecord47.checksum();
        int int51 = serializableConsumerRecord47.serializedKeySize();
        java.io.Serializable serializable52 = serializableConsumerRecord47.key();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) (byte) -1, (long) (byte) 0, timestampType4, (java.lang.Long) 97L, (int) (short) 100, (int) (byte) -1, (java.io.Serializable) wildcardClass23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", headers41, intOptional53);
        int int55 = serializableConsumerRecord54.serializedValueSize();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        int int57 = serializableConsumerRecord54.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str40, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1L) + "'", long50 == (-1L));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + 1.0f + "'", serializable52, 1.0f);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))" + "'", charSequence56, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.offset();
        int int21 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord13.value();
        java.io.Serializable serializable18 = serializableConsumerRecord13.key();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        int int20 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str21 = serializableConsumerRecord13.topic();
        int int22 = serializableConsumerRecord13.partition();
        long long23 = serializableConsumerRecord13.timestamp();
        java.io.Serializable serializable24 = serializableConsumerRecord13.key();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", 100, (long) (short) 0, (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + 10.0f + "'", serializable24, 10.0f);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType24, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional42);
        java.io.Serializable serializable47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType24, (long) 0, 0, 0, serializable47, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass50 = timestampType24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable68 = serializableConsumerRecord67.key();
        int int69 = serializableConsumerRecord67.serializedKeySize();
        java.lang.Class<?> wildcardClass70 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 10, (long) (short) 1, (long) (short) 10, timestampType53, 100L, (int) (short) -1, 52, (java.io.Serializable) wildcardClass70, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) (byte) 0, (java.io.Serializable) wildcardClass70, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        long long75 = serializableConsumerRecord74.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.io.Serializable serializable30 = serializableConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        long long32 = serializableConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord28.headers();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord28.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType14, 0L, 32, (int) (byte) 10, headers35, serializableConsumerRecord36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.io.Serializable serializable67 = serializableConsumerRecord65.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord65.timestampType();
        long long69 = serializableConsumerRecord65.offset();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord65.headers();
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType51, 0L, 32, (int) (byte) 10, headers72, serializableConsumerRecord73);
        java.lang.CharSequence charSequence75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) (short) 0, (long) (short) 10, timestampType14, (long) (byte) 100, (int) (byte) 10, 97, (java.io.Serializable) timestampType51, charSequence75);
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord76.timestampType();
        long long78 = serializableConsumerRecord76.offset();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 1 + "'", serializable30, (short) 1);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 1 + "'", serializable67, (short) 1);
        org.junit.Assert.assertNull(timestampType68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNull(timestampType71);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        long long8 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType14, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int21 = serializableConsumerRecord20.serializedKeySize();
        int int22 = serializableConsumerRecord20.serializedKeySize();
        int int23 = serializableConsumerRecord20.serializedKeySize();
        long long24 = serializableConsumerRecord20.timestamp();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        long long20 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        long long23 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        long long10 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        java.lang.Object obj10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Object> charSequenceConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Object>("hi!", 10, (long) (byte) -1, (java.lang.CharSequence) "", obj10);
        java.lang.Class<?> wildcardClass12 = charSequenceConsumerRecord11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        int int52 = serializableConsumerRecord50.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord50.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType35, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional53);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType35, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        java.io.Serializable serializable78 = serializableConsumerRecord76.key();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord76.timestampType();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType35, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType35, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>> annotatedElementConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 35, (long) 52, (java.lang.reflect.AnnotatedElement) wildcardClass12, intOptional88);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) (byte) -1, (java.io.Serializable) 52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNull(timestampType79);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertNotNull(intOptional88);
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.lang.String str66 = serializableConsumerRecord64.topic();
        java.io.Serializable serializable67 = serializableConsumerRecord64.key();
        java.io.Serializable serializable68 = serializableConsumerRecord64.key();
        java.io.Serializable serializable69 = serializableConsumerRecord64.key();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (byte) 10 + "'", serializable67, (byte) 10);
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (byte) 10 + "'", serializable68, (byte) 10);
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (byte) 10 + "'", serializable69, (byte) 10);
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        long long11 = serializableConsumerRecord5.offset();
        long long12 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord8.headers();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord8.value();
        int int14 = serializableConsumerRecord8.serializedValueSize();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord8.value();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, (long) 'a', (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.String str20 = serializableConsumerRecord18.topic();
        java.lang.String str21 = serializableConsumerRecord18.topic();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", charSequence19, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str21, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)", 1, (-1L), (java.io.Serializable) wildcardClass11, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        int int16 = serializableConsumerRecord13.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNotNull(headers7);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        long long79 = serializableConsumerRecord58.offset();
        java.lang.String str80 = serializableConsumerRecord58.toString();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord58.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str80, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType81);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        int int21 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType37, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers55);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType74, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers92);
        java.util.Optional<java.lang.Integer> intOptional94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType29, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers55, headers69, headers92, intOptional94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 0, 0L, (long) (short) 1, timestampType12, (java.lang.Long) 100L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "", headers92);
        java.util.Optional<java.lang.Integer> intOptional97 = serializableConsumerRecord96.leaderEpoch();
        int int98 = serializableConsumerRecord96.serializedKeySize();
        long long99 = serializableConsumerRecord96.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertNotNull(intOptional97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 0L + "'", long99 == 0L);
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        long long16 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        int int20 = serializableConsumerRecord13.partition();
        long long21 = serializableConsumerRecord13.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>> objConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 0, (long) ' ', (java.lang.Object) serializableConsumerRecord13, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.lang.String str24 = serializableConsumerRecord13.topic();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        long long22 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord29.getClass();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        java.io.Serializable serializable47 = serializableConsumerRecord43.key();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord43.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType54, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int61 = serializableConsumerRecord60.partition();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType15, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers49, intOptional62);
        long long64 = serializableConsumerRecord63.offset();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        long long66 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord63.timestampType();
        java.lang.CharSequence charSequence72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 100, (long) 10, (long) 52, timestampType67, (long) (short) 100, 1, (int) (short) 100, (java.io.Serializable) (-1), charSequence72);
        long long74 = serializableConsumerRecord73.checksum();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + serializable47 + "' != '" + (short) 1 + "'", serializable47, (short) 1);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L + "'", long64 == 100L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 100L + "'", long74 == 100L);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        long long26 = serializableConsumerRecord23.checksum();
        long long27 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(headers28);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str6, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str7, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        int int36 = serializableConsumerRecord33.serializedKeySize();
        int int37 = serializableConsumerRecord33.partition();
        java.io.Serializable serializable38 = serializableConsumerRecord33.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType18, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord33);
        org.apache.kafka.common.record.TimestampType timestampType49 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType49, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence56 = serializableConsumerRecord55.value();
        int int57 = serializableConsumerRecord55.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord55.leaderEpoch();
        long long59 = serializableConsumerRecord55.checksum();
        int int60 = serializableConsumerRecord55.serializedValueSize();
        java.io.Serializable serializable61 = serializableConsumerRecord55.key();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 35, (long) (short) 1, (long) (short) 0, timestampType18, (java.lang.Long) 10L, 52, 32, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) -1, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNotNull(headers62);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        int int62 = serializableConsumerRecord59.serializedKeySize();
        long long63 = serializableConsumerRecord59.checksum();
        int int64 = serializableConsumerRecord59.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        java.io.Serializable serializable22 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType34, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass24, timestampType34);
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType34, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) 100, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        long long61 = serializableConsumerRecord59.checksum();
        int int62 = serializableConsumerRecord59.partition();
        java.lang.Class<?> wildcardClass63 = serializableConsumerRecord59.getClass();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence60, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.partition();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        long long87 = serializableConsumerRecord84.timestamp();
        long long88 = serializableConsumerRecord84.offset();
        java.lang.CharSequence charSequence89 = serializableConsumerRecord84.value();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str86, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence89, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord12.headers();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        java.lang.Comparable<java.lang.String> strComparable20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str35 = serializableConsumerRecord34.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord34.timestampType();
        java.lang.CharSequence charSequence41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType36, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence41);
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.serializedValueSize();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        int int62 = serializableConsumerRecord59.serializedKeySize();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable75 = serializableConsumerRecord74.key();
        long long76 = serializableConsumerRecord74.checksum();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 52, (long) ' ', 10L, timestampType43, (java.lang.Long) 10L, (int) '4', 97, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers63, intOptional77);
        java.util.Optional<java.lang.Integer> intOptional79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>> charSequenceConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) -1, (long) 35, timestampType15, (java.lang.Long) 52L, (int) (byte) 1, (int) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", strComparable20, headers63, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 0L, (java.io.Serializable) 52L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertNotNull(intOptional77);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(intOptional22);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        int int14 = serializableConsumerRecord12.partition();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord12.headers();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord12.value();
        java.io.Serializable serializable18 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        int int27 = serializableConsumerRecord25.partition();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord25.leaderEpoch();
        java.io.Serializable serializable30 = serializableConsumerRecord25.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord25.timestampType();
        long long33 = serializableConsumerRecord25.offset();
        long long34 = serializableConsumerRecord25.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, 10L, timestampType19, headers35);
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        java.lang.CharSequence charSequence52 = serializableConsumerRecord50.value();
        long long53 = serializableConsumerRecord50.timestamp();
        java.io.Serializable serializable54 = serializableConsumerRecord50.key();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord50.headers();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord50.timestampType();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord50.leaderEpoch();
        java.lang.String str58 = serializableConsumerRecord50.toString();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.io.Serializable serializable72 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        long long74 = serializableConsumerRecord70.offset();
        java.lang.String str75 = serializableConsumerRecord70.topic();
        long long76 = serializableConsumerRecord70.offset();
        int int77 = serializableConsumerRecord70.serializedValueSize();
        java.lang.CharSequence charSequence78 = serializableConsumerRecord70.value();
        long long79 = serializableConsumerRecord70.checksum();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord70.value();
        java.io.Serializable serializable81 = serializableConsumerRecord70.key();
        int int82 = serializableConsumerRecord70.partition();
        long long83 = serializableConsumerRecord70.checksum();
        long long84 = serializableConsumerRecord70.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord70.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord91.timestampType();
        int int93 = serializableConsumerRecord91.serializedValueSize();
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) '#', 100L, timestampType19, (java.lang.Long) 35L, (int) (short) 0, (int) '#', (java.lang.Object) serializableConsumerRecord50, (java.lang.Object) serializableConsumerRecord70, headers94);
        java.lang.Class<?> wildcardClass96 = serializableConsumerRecord70.getClass();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (-1.0d) + "'", serializable18, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (-1.0d) + "'", serializable30, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertNull(timestampType56);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str58, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType59);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (short) 1 + "'", serializable72, (short) 1);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        int int8 = serializableConsumerRecord5.partition();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.io.Serializable serializable90 = serializableConsumerRecord88.key();
        java.lang.Class<?> wildcardClass91 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable90 + "' != '" + "hi!" + "'", serializable90, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str8, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        long long12 = serializableConsumerRecord5.timestamp();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int25 = serializableConsumerRecord24.partition();
        java.lang.Class<?> wildcardClass26 = serializableConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long34 = serializableConsumerRecord33.offset();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        int int37 = serializableConsumerRecord33.serializedValueSize();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)", 97, (long) 0, 32L, timestampType15, (java.lang.Long) 35L, (int) (short) 1, (int) (byte) 10, (java.io.Serializable) wildcardClass26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", headers38);
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType47, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int54 = serializableConsumerRecord53.serializedValueSize();
        int int55 = serializableConsumerRecord53.serializedValueSize();
        long long56 = serializableConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers57 = serializableConsumerRecord53.headers();
        long long58 = serializableConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord53.headers();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord53.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType65, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int72 = serializableConsumerRecord71.serializedValueSize();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        long long74 = serializableConsumerRecord71.offset();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord71.leaderEpoch();
        java.lang.Class<?> wildcardClass77 = intOptional76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.Type> headersConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) 10, (-1L), (long) (short) 100, timestampType15, (-1L), (int) ' ', (int) (short) 1, headers60, (java.lang.reflect.Type) wildcardClass77);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 100 + "'", int25 == 100);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L + "'", long34 == 100L);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1L + "'", long56 == 1L);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + 10.0f + "'", serializable75, 10.0f);
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        long long26 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "" + "'", charSequence29, "");
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        int int12 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 1.0f + "'", serializable10, 1.0f);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "");
        int int18 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.String str21 = serializableConsumerRecord17.toString();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )" + "'", str21, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord10.value();
        java.lang.String str24 = serializableConsumerRecord10.topic();
        long long25 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType14, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType24, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        java.lang.String str32 = serializableConsumerRecord30.topic();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord30.getClass();
        java.lang.CharSequence charSequence34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType14, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass33, charSequence34);
        int int36 = serializableConsumerRecord35.serializedValueSize();
        long long37 = serializableConsumerRecord35.checksum();
        long long38 = serializableConsumerRecord35.offset();
        long long39 = serializableConsumerRecord35.checksum();
        long long40 = serializableConsumerRecord35.timestamp();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 100 + "'", int36 == 100);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord67.headers();
        java.io.Serializable serializable74 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord67.timestampType();
        long long76 = serializableConsumerRecord67.checksum();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (byte) 10 + "'", serializable74, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.partition();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord19.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        int int23 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType24, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType44, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord46.leaderEpoch();
        java.io.Serializable serializable48 = serializableConsumerRecord46.key();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord64.headers();
        java.lang.String str67 = serializableConsumerRecord64.toString();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        long long69 = serializableConsumerRecord64.timestamp();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 100, 52L, timestampType24, (java.lang.Long) 35L, (int) ' ', (int) (short) 0, serializable48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, (long) (byte) 1, (java.io.Serializable) timestampType24, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.lang.Class<?> wildcardClass75 = timestampType24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String> annotatedElementConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 0, (long) (short) 0, (java.lang.reflect.AnnotatedElement) wildcardClass75, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + serializable48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        long long17 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.Class<?> wildcardClass19 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedValueSize();
        java.lang.String str67 = serializableConsumerRecord59.toString();
        java.lang.String str68 = serializableConsumerRecord59.topic();
        long long69 = serializableConsumerRecord59.offset();
        long long70 = serializableConsumerRecord59.checksum();
        java.io.Serializable serializable71 = serializableConsumerRecord59.key();
        long long72 = serializableConsumerRecord59.checksum();
        java.lang.Class<?> wildcardClass73 = serializableConsumerRecord59.getClass();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str67, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L + "'", long69 == 100L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(serializable71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1L + "'", long72 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord9.key();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int27 = serializableConsumerRecord26.partition();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord26.leaderEpoch();
        java.io.Serializable serializable29 = serializableConsumerRecord26.key();
        java.lang.String str30 = serializableConsumerRecord26.toString();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord26.headers();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord26.timestampType();
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 10, (long) (byte) 1, timestampType33, 35L, (int) (short) 1, (int) ' ', serializable37, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        java.lang.Object obj43 = null;
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable55 = serializableConsumerRecord54.key();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        long long57 = serializableConsumerRecord54.timestamp();
        java.lang.CharSequence charSequence58 = serializableConsumerRecord54.value();
        java.io.Serializable serializable59 = serializableConsumerRecord54.key();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord54.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers> objConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 0, (long) (short) 1, obj43, headers60);
        org.apache.kafka.common.header.Headers headers62 = null;
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence74 = serializableConsumerRecord73.value();
        long long75 = serializableConsumerRecord73.offset();
        java.lang.String str76 = serializableConsumerRecord73.topic();
        int int77 = serializableConsumerRecord73.partition();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord73.leaderEpoch();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", 32, (long) 32, (long) (byte) 1, timestampType13, (java.lang.Long) 52L, 32, (int) (short) -1, serializable37, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60, headers62, intOptional78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + false + "'", serializable29, false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str30, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "hi!" + "'", charSequence74, "hi!");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(intOptional78);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType22, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord74.leaderEpoch();
        long long76 = serializableConsumerRecord74.offset();
        int int77 = serializableConsumerRecord74.partition();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + 1.0f + "'", serializable78, 1.0f);
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        long long9 = serializableConsumerRecord5.timestamp();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        long long11 = serializableConsumerRecord5.checksum();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (byte) 10 + "'", serializable12, (byte) 10);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        long long21 = serializableConsumerRecord10.checksum();
        java.lang.String str22 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.partition();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        java.util.Optional<java.lang.Integer> intOptional87 = serializableConsumerRecord84.leaderEpoch();
        int int88 = serializableConsumerRecord84.serializedValueSize();
        java.io.Serializable serializable89 = serializableConsumerRecord84.key();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str86, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + serializable89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.String str46 = serializableConsumerRecord45.toString();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord45.leaderEpoch();
        int int48 = serializableConsumerRecord45.serializedValueSize();
        long long49 = serializableConsumerRecord45.timestamp();
        java.lang.String str50 = serializableConsumerRecord45.toString();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str50, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        int int10 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = serializableConsumerRecord26.value();
        int int28 = serializableConsumerRecord26.serializedKeySize();
        int int29 = serializableConsumerRecord26.serializedKeySize();
        int int30 = serializableConsumerRecord26.partition();
        java.io.Serializable serializable31 = serializableConsumerRecord26.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType11, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord26);
        java.io.Serializable serializable33 = serializableConsumerRecord26.key();
        long long34 = serializableConsumerRecord26.timestamp();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord26.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(intOptional35);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.checksum();
        long long15 = serializableConsumerRecord10.offset();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 100, (long) '#', (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord18.timestampType();
        int int20 = serializableConsumerRecord18.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        int int10 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        int int13 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str12, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, 0L, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional6 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertNotNull(intOptional6);
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        long long14 = serializableConsumerRecord10.checksum();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.timestamp();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord11.timestampType();
        int int13 = serializableConsumerRecord11.partition();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord11.headers();
        long long15 = serializableConsumerRecord11.timestamp();
        java.lang.String str16 = serializableConsumerRecord11.toString();
        long long17 = serializableConsumerRecord11.timestamp();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 32, (long) '#', (java.io.Serializable) wildcardClass18, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        long long21 = serializableConsumerRecord10.checksum();
        long long22 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        long long20 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        int int22 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(intOptional21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType22, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long48 = serializableConsumerRecord47.checksum();
        java.lang.CharSequence charSequence49 = serializableConsumerRecord47.value();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        java.io.Serializable serializable57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) '#', (long) (byte) 100, serializable57, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) ' ', (long) (short) 100, (long) 1, timestampType50, (long) (-1), 97, (-1), (java.io.Serializable) timestampType61, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType71, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence78 = serializableConsumerRecord77.value();
        int int79 = serializableConsumerRecord77.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord77.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord77.leaderEpoch();
        long long82 = serializableConsumerRecord77.checksum();
        java.lang.Class<?> wildcardClass83 = serializableConsumerRecord77.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) (byte) -1, (long) 100, timestampType50, (long) '#', 97, (int) (short) -1, (java.io.Serializable) wildcardClass83, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.io.Serializable serializable86 = serializableConsumerRecord85.key();
        long long87 = serializableConsumerRecord85.offset();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence49, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(serializable86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord13.value();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        java.lang.String str17 = serializableConsumerRecord13.topic();
        java.lang.String str18 = serializableConsumerRecord13.toString();
        java.lang.String str19 = serializableConsumerRecord13.toString();
        long long20 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord13.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str28 = serializableConsumerRecord27.topic();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        java.util.Optional<java.lang.Integer> intOptional30 = serializableConsumerRecord27.leaderEpoch();
        int int31 = serializableConsumerRecord27.serializedKeySize();
        java.io.Serializable serializable32 = serializableConsumerRecord27.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.record.TimestampType> headerIterableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) 'a', 97L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers21, timestampType33);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (-1.0d) + "'", serializable32, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        long long48 = serializableConsumerRecord44.offset();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType18, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str64 = serializableConsumerRecord63.topic();
        long long65 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord63.headers();
        long long67 = serializableConsumerRecord63.checksum();
        int int68 = serializableConsumerRecord63.partition();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType18, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.lang.CharSequence charSequence74 = serializableConsumerRecord71.value();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNull(timestampType47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", charSequence72, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", charSequence74, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str22 = serializableConsumerRecord21.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType23, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence28);
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType43, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType30, (long) '#', 1, 0, (java.io.Serializable) timestampType43, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType43, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord62);
        java.io.Serializable serializable69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str77 = serializableConsumerRecord76.topic();
        int int78 = serializableConsumerRecord76.partition();
        java.lang.String str79 = serializableConsumerRecord76.topic();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord76.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 10, (long) (short) 0, (long) (byte) 1, timestampType43, (java.lang.Long) 10L, 0, (int) (short) 0, serializable69, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers80);
        int int82 = serializableConsumerRecord81.serializedKeySize();
        java.lang.String str83 = serializableConsumerRecord81.toString();
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str83, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        java.lang.String str96 = serializableConsumerRecord92.toString();
        long long97 = serializableConsumerRecord92.timestamp();
        long long98 = serializableConsumerRecord92.offset();
        java.util.Optional<java.lang.Integer> intOptional99 = serializableConsumerRecord92.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str96, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1L + "'", long98 == 1L);
        org.junit.Assert.assertNotNull(intOptional99);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str25 = serializableConsumerRecord24.topic();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType36, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int43 = serializableConsumerRecord42.serializedValueSize();
        java.lang.String str44 = serializableConsumerRecord42.topic();
        java.lang.Class<?> wildcardClass45 = serializableConsumerRecord42.getClass();
        java.lang.CharSequence charSequence46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType26, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass45, charSequence46);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass60 = serializableConsumerRecord59.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 0, 97L, (java.io.Serializable) wildcardClass60, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) 10, (long) (byte) 10, timestampType26, 1L, (int) (short) 1, 0, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        int int65 = serializableConsumerRecord64.serializedValueSize();
        int int66 = serializableConsumerRecord64.serializedValueSize();
        int int67 = serializableConsumerRecord64.serializedKeySize();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord64.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 32, (long) ' ', 10L, timestampType4, (long) 0, 35, 35, (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord70.headers();
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.Class<?> wildcardClass50 = headers49.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 35, 35L, (long) 52, timestampType31, (long) '4', (int) (byte) 0, (int) (short) 1, (java.io.Serializable) wildcardClass50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int65 = serializableConsumerRecord64.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord64.timestampType();
        java.io.Serializable serializable67 = serializableConsumerRecord64.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType68, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.String str71 = serializableConsumerRecord70.topic();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord70.leaderEpoch();
        java.io.Serializable serializable73 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord70.timestampType();
        java.io.Serializable serializable75 = serializableConsumerRecord70.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (short) 100, (long) (short) 1, (long) 32, timestampType31, (long) 97, (int) (byte) 10, 10, serializable75, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + 1.0f + "'", serializable67, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str71, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + serializable73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType74 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType74.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        java.io.Serializable serializable32 = serializableConsumerRecord25.key();
        long long33 = serializableConsumerRecord25.checksum();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord25.getClass();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.timestamp();
        org.apache.kafka.common.header.Headers headers89 = serializableConsumerRecord13.headers();
        int int90 = serializableConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNotNull(headers89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        long long16 = serializableConsumerRecord14.offset();
        long long17 = serializableConsumerRecord14.checksum();
        java.io.Serializable serializable18 = serializableConsumerRecord14.key();
        java.lang.String str19 = serializableConsumerRecord14.topic();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str19, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType14, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        long long40 = serializableConsumerRecord39.checksum();
        int int41 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord39.headers();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.lang.Class<?> wildcardClass44 = serializable43.getClass();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (byte) 100 + "'", serializable43, (byte) 100);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord12.headers();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str32 = serializableConsumerRecord31.topic();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        java.lang.CharSequence charSequence38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType33, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence38);
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String> genericDeclarationConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.String>("", (int) (short) 10, (long) (byte) 0, (long) (byte) -1, timestampType15, (-1L), 1, 0, (java.lang.reflect.GenericDeclaration) wildcardClass43, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) '#', (long) (short) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str48 = serializableConsumerRecord47.topic();
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))" + "'", str48, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = 32, serialized key size = 10, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence12 = serializableConsumerRecord11.value();
        long long13 = serializableConsumerRecord11.offset();
        java.lang.String str14 = serializableConsumerRecord11.toString();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration> serializableConsumerRecordConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) -1, (long) (byte) 100, serializableConsumerRecord11, (java.lang.reflect.GenericDeclaration) wildcardClass27);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 1, (long) ' ', (java.io.Serializable) (short) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str14, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int18 = serializableConsumerRecord17.partition();
        java.lang.String str19 = serializableConsumerRecord17.topic();
        java.lang.String str20 = serializableConsumerRecord17.toString();
        long long21 = serializableConsumerRecord17.checksum();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        int int36 = serializableConsumerRecord34.serializedKeySize();
        int int37 = serializableConsumerRecord34.serializedKeySize();
        int int38 = serializableConsumerRecord34.serializedKeySize();
        java.lang.String str39 = serializableConsumerRecord34.toString();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) 97, (long) (short) 100, timestampType8, (java.lang.Long) (-1L), 0, (int) '4', (java.io.Serializable) timestampType22, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str54 = serializableConsumerRecord53.topic();
        int int55 = serializableConsumerRecord53.partition();
        java.lang.String str56 = serializableConsumerRecord53.topic();
        java.lang.String str57 = serializableConsumerRecord53.topic();
        int int58 = serializableConsumerRecord53.serializedKeySize();
        long long59 = serializableConsumerRecord53.timestamp();
        java.io.Serializable serializable60 = serializableConsumerRecord53.key();
        int int61 = serializableConsumerRecord53.serializedValueSize();
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 97, (long) 0, (java.io.Serializable) wildcardClass62, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long72 = serializableConsumerRecord71.checksum();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.String> objConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.String>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) 'a', (-1L), (long) (byte) -1, timestampType8, (java.lang.Long) 97L, 0, 32, (java.lang.Object) 0, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", headers73);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str39, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (-1.0d) + "'", serializable60, (-1.0d));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(headers73);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        int int16 = serializableConsumerRecord13.partition();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) -1, (long) (short) 10, serializableConsumerRecord13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        int int21 = serializableConsumerRecord13.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        long long20 = serializableConsumerRecord16.offset();
        java.lang.String str21 = serializableConsumerRecord16.topic();
        long long22 = serializableConsumerRecord16.offset();
        int int23 = serializableConsumerRecord16.serializedValueSize();
        java.lang.CharSequence charSequence24 = serializableConsumerRecord16.value();
        long long25 = serializableConsumerRecord16.checksum();
        java.lang.CharSequence charSequence26 = serializableConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord16.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str39 = serializableConsumerRecord38.topic();
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord38.timestampType();
        java.lang.CharSequence charSequence45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType40, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.record.TimestampType> headerIterableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.record.TimestampType>("hi!", (int) (short) -1, 35L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers28, timestampType40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 52, 97L, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.timestamp();
        long long23 = serializableConsumerRecord10.checksum();
        int int24 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(headers25);
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 10.0f + "'", serializable14, 10.0f);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        int int14 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) -1, (java.io.Serializable) timestampType69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        int int72 = serializableConsumerRecord71.serializedValueSize();
        long long73 = serializableConsumerRecord71.checksum();
        long long74 = serializableConsumerRecord71.offset();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) -1, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 97, (long) (short) 1, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        long long9 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertNull(serializable7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", 10, (long) (short) 10, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str12, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.offset();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        long long47 = serializableConsumerRecord44.offset();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        java.io.Serializable serializable50 = serializableConsumerRecord44.key();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + 100 + "'", serializable46, 100);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + 100 + "'", serializable50, 100);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNull(timestampType20);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long14 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long25 = serializableConsumerRecord24.offset();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 10, (long) (byte) -1, (long) (byte) 10, timestampType15, (-1L), 1, 97, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int42 = serializableConsumerRecord41.partition();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord41.leaderEpoch();
        java.io.Serializable serializable44 = serializableConsumerRecord41.key();
        java.lang.String str45 = serializableConsumerRecord41.toString();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord41.timestampType();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord41.headers();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord41.timestampType();
        java.io.Serializable serializable52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 10, (long) (byte) 1, timestampType48, 35L, (int) (short) 1, (int) ' ', serializable52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        long long71 = serializableConsumerRecord67.offset();
        java.lang.String str72 = serializableConsumerRecord67.topic();
        long long73 = serializableConsumerRecord67.checksum();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord67.timestampType();
        java.lang.String str75 = serializableConsumerRecord67.topic();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) 52, (long) '4', timestampType15, (java.lang.Long) (-1L), 1, (int) (byte) 10, (java.io.Serializable) timestampType55, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", headers76);
        java.lang.Class<?> wildcardClass78 = headers76.getClass();
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L + "'", long25 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + false + "'", serializable44, false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str45, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        long long14 = serializableConsumerRecord10.timestamp();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord13.value();
        java.io.Serializable serializable18 = serializableConsumerRecord13.key();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        int int20 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str21 = serializableConsumerRecord13.topic();
        int int22 = serializableConsumerRecord13.serializedValueSize();
        long long23 = serializableConsumerRecord13.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int34 = serializableConsumerRecord33.partition();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord45.timestampType();
        int int47 = serializableConsumerRecord45.partition();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord45.headers();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        int int63 = serializableConsumerRecord61.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional64 = serializableConsumerRecord61.leaderEpoch();
        java.io.Serializable serializable65 = serializableConsumerRecord61.key();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord61.leaderEpoch();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType> intOptionalConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) 32, (long) (byte) 10, timestampType36, (java.lang.Long) 1L, 1, 10, intOptional49, timestampType50, headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) 0, serializableConsumerRecord13, timestampType36);
        long long70 = serializableConsumerRecord13.checksum();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertNotNull(intOptional64);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        int int37 = serializableConsumerRecord35.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord35.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType20, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional38);
        java.io.Serializable serializable43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType20, (long) 0, 0, 0, serializable43, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass46 = timestampType20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 0, (long) (short) 100, (java.io.Serializable) timestampType49, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.io.Serializable serializable52 = serializableConsumerRecord51.key();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord51.leaderEpoch();
        java.io.Serializable serializable54 = serializableConsumerRecord51.key();
        java.lang.String str55 = serializableConsumerRecord51.toString();
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + serializable52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + serializable54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str55, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.offset();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord10.headers();
        int int23 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str20, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        int int15 = serializableConsumerRecord13.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int31 = serializableConsumerRecord30.partition();
        java.lang.String str32 = serializableConsumerRecord30.topic();
        java.lang.String str33 = serializableConsumerRecord30.toString();
        long long34 = serializableConsumerRecord30.checksum();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long46 = serializableConsumerRecord45.offset();
        int int47 = serializableConsumerRecord45.partition();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord45.timestampType();
        java.lang.Class<?> wildcardClass49 = timestampType48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) (byte) -1, 0L, timestampType35, (long) (short) 100, 10, (int) (short) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (byte) 0, (long) (byte) 1, (long) 'a', timestampType17, 52L, (int) (short) 1, 35, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        long long63 = serializableConsumerRecord61.timestamp();
        java.io.Serializable serializable64 = serializableConsumerRecord61.key();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence> headerIterableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (int) (byte) 10, 0L, 0L, timestampType17, (long) '#', 0, (int) (short) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers65, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str32, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str33, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (-1.0d) + "'", serializable64, (-1.0d));
        org.junit.Assert.assertNotNull(headers65);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNull(timestampType20);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.timestamp();
        java.lang.String str23 = serializableConsumerRecord10.toString();
        java.lang.String str24 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.Class<?> wildcardClass19 = headers18.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord67.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord67.headers();
        long long75 = serializableConsumerRecord67.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertTrue("'" + timestampType73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        long long10 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "hi!" + "'", charSequence9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord64.timestampType();
        long long66 = serializableConsumerRecord64.timestamp();
        int int67 = serializableConsumerRecord64.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        long long10 = serializableConsumerRecord5.checksum();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.timestamp();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        java.io.Serializable serializable3 = null;
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) (short) 10, serializable3, charSequence4);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord12.headers();
        java.lang.String str14 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable19 = null;
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType25, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int32 = serializableConsumerRecord31.serializedValueSize();
        int int33 = serializableConsumerRecord31.serializedValueSize();
        long long34 = serializableConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord31.headers();
        long long36 = serializableConsumerRecord31.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) 'a', (long) '4', (long) 100, timestampType15, (java.lang.Long) 97L, (int) (short) 0, (int) (byte) 100, serializable19, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers37);
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord38.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) (byte) -1, (long) (byte) 1, (java.io.Serializable) wildcardClass40, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType14, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int21 = serializableConsumerRecord20.serializedKeySize();
        int int22 = serializableConsumerRecord20.serializedKeySize();
        long long23 = serializableConsumerRecord20.offset();
        java.io.Serializable serializable24 = serializableConsumerRecord20.key();
        long long25 = serializableConsumerRecord20.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (-1.0d) + "'", serializable24, (-1.0d));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 52L + "'", long25 == 52L);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int33 = serializableConsumerRecord32.partition();
        java.lang.String str34 = serializableConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType23, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType35, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str47 = serializableConsumerRecord46.topic();
        int int48 = serializableConsumerRecord46.partition();
        java.lang.String str49 = serializableConsumerRecord46.topic();
        java.lang.String str50 = serializableConsumerRecord46.topic();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord46.timestampType();
        int int52 = serializableConsumerRecord46.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord46.timestampType();
        java.lang.CharSequence charSequence54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 100, 52L, timestampType35, (long) ' ', (-1), 1, (java.io.Serializable) timestampType53, charSequence54);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord67.value();
        long long70 = serializableConsumerRecord67.timestamp();
        long long71 = serializableConsumerRecord67.checksum();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str85 = serializableConsumerRecord84.topic();
        org.apache.kafka.common.record.TimestampType timestampType86 = serializableConsumerRecord84.timestampType();
        java.lang.CharSequence charSequence91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType86, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence91);
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord92.timestampType();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 100, (long) 32, (long) 32, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers74, intOptional94);
        int int96 = serializableConsumerRecord95.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType93 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType93.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) 'a', (long) (byte) 100, "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord23.headers();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        long long26 = serializableConsumerRecord23.checksum();
        java.io.Serializable serializable27 = serializableConsumerRecord23.key();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + 10 + "'", serializable27, 10);
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        long long66 = serializableConsumerRecord64.checksum();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        java.lang.String str68 = serializableConsumerRecord64.toString();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        int int71 = serializableConsumerRecord64.partition();
        java.lang.String str72 = serializableConsumerRecord64.toString();
        long long73 = serializableConsumerRecord64.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str68, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str72, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        int int18 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(headers7);
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        java.io.Serializable serializable22 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType28, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable35 = serializableConsumerRecord34.key();
        long long36 = serializableConsumerRecord34.checksum();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord34.leaderEpoch();
        int int38 = serializableConsumerRecord34.serializedKeySize();
        int int39 = serializableConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord34.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) 0, 52L, timestampType18, (java.lang.Long) 35L, 35, 10, serializable22, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 10, (long) (short) 0, (java.io.Serializable) 'a', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        java.lang.Class<?> wildcardClass51 = serializableConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, (long) 52, 0L, timestampType18, (long) (short) 100, (int) (short) 100, (int) (short) 0, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 100, 0L, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass51);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 1 + "'", serializable35, (short) 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord13.headers();
        java.io.Serializable serializable17 = serializableConsumerRecord13.key();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType46, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence53 = serializableConsumerRecord52.value();
        int int54 = serializableConsumerRecord52.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord52.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType37, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType37, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType72, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence79 = serializableConsumerRecord78.value();
        java.io.Serializable serializable80 = serializableConsumerRecord78.key();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord78.timestampType();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord78.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType37, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers82);
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord83.headers();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord83.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '4', (long) 10, serializableConsumerRecord13, (java.lang.Object) intOptional85);
        long long87 = serializableConsumerRecord13.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "hi!" + "'", charSequence53, "hi!");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertEquals("'" + charSequence79 + "' != '" + "hi!" + "'", charSequence79, "hi!");
        org.junit.Assert.assertEquals("'" + serializable80 + "' != '" + (short) 1 + "'", serializable80, (short) 1);
        org.junit.Assert.assertNull(timestampType81);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.partition();
        int int12 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        long long14 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + 10.0f + "'", serializable13, 10.0f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        java.io.Serializable serializable40 = serializableConsumerRecord39.key();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertNull(serializable40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long10 = serializableConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers> strConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.common.header.Headers>("hi!", (int) (short) 1, (long) '#', "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )", headers12);
        java.lang.Class<?> wildcardClass14 = strConsumerRecord13.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord8.headers();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord8.headers();
        int int12 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str35 = serializableConsumerRecord34.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord34.timestampType();
        java.lang.CharSequence charSequence41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType36, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence41);
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord55.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType56, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType43, (long) '#', 1, 0, (java.io.Serializable) timestampType56, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType69, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence76 = serializableConsumerRecord75.value();
        int int77 = serializableConsumerRecord75.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType56, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord75);
        java.io.Serializable serializable82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str90 = serializableConsumerRecord89.topic();
        int int91 = serializableConsumerRecord89.partition();
        java.lang.String str92 = serializableConsumerRecord89.topic();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord89.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 10, (long) (short) 0, (long) (byte) 1, timestampType56, (java.lang.Long) 10L, 0, (int) (short) 0, serializable82, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers93);
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord94.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> objConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", 32, (long) (byte) 0, (java.lang.Object) serializableConsumerRecord8, serializableConsumerRecord94);
        java.lang.String str97 = serializableConsumerRecord8.toString();
        long long98 = serializableConsumerRecord8.timestamp();
        long long99 = serializableConsumerRecord8.checksum();
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(headers11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType56 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType56.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str97, "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + (-1L) + "'", long98 == (-1L));
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-1L) + "'", long99 == (-1L));
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.Class<?> wildcardClass17 = headers16.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        long long9 = serializableConsumerRecord5.offset();
        int int10 = serializableConsumerRecord5.partition();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.checksum();
        long long8 = serializableConsumerRecord5.checksum();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        long long18 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType18, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence23);
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType38, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType25, (long) '#', 1, 0, (java.io.Serializable) timestampType38, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) (short) 1, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        int int45 = serializableConsumerRecord44.serializedValueSize();
        long long46 = serializableConsumerRecord44.checksum();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord44.headers();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(headers47);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord25.topic();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord25.leaderEpoch();
        long long29 = serializableConsumerRecord25.timestamp();
        java.lang.Object obj30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (byte) 10, (long) (short) -1, timestampType11, 52L, (int) (byte) 100, (int) (short) 10, serializableConsumerRecord25, obj30);
        int int32 = serializableConsumerRecord25.serializedValueSize();
        long long33 = serializableConsumerRecord25.checksum();
        java.io.Serializable serializable34 = serializableConsumerRecord25.key();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        int int26 = serializableConsumerRecord23.serializedValueSize();
        java.lang.String str27 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord23.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hi!" + "'", str27, "hi!");
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.String str59 = serializableConsumerRecord57.topic();
        java.lang.CharSequence charSequence60 = serializableConsumerRecord57.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        int int68 = serializableConsumerRecord66.partition();
        java.lang.String str69 = serializableConsumerRecord66.topic();
        java.lang.String str70 = serializableConsumerRecord66.topic();
        int int71 = serializableConsumerRecord66.serializedValueSize();
        int int72 = serializableConsumerRecord66.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", (int) (byte) -1, (long) 'a', (long) (short) 10, timestampType18, (long) 'a', 10, (int) (short) 100, serializableConsumerRecord57, serializableConsumerRecord66);
        int int74 = serializableConsumerRecord57.serializedValueSize();
        java.lang.String str75 = serializableConsumerRecord57.topic();
        long long76 = serializableConsumerRecord57.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord11.timestampType();
        int int13 = serializableConsumerRecord11.partition();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord11.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord11.leaderEpoch();
        java.io.Serializable serializable16 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable30 = serializableConsumerRecord29.key();
        long long31 = serializableConsumerRecord29.checksum();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>> timestampTypeEnumConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) (byte) -1, 52L, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType18, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) (short) 1, (java.io.Serializable) 52L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (-1.0d) + "'", serializable16, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 1 + "'", serializable30, (short) 1);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(intOptional32);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        long long17 = serializableConsumerRecord14.checksum();
        long long18 = serializableConsumerRecord14.checksum();
        int int19 = serializableConsumerRecord14.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        long long13 = serializableConsumerRecord10.offset();
        long long14 = serializableConsumerRecord10.timestamp();
        long long15 = serializableConsumerRecord10.timestamp();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long13 = serializableConsumerRecord12.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (byte) 0, (long) (short) -1, timestampType14, (long) 52, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 10, (long) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord29.headers();
        java.lang.CharSequence charSequence31 = serializableConsumerRecord29.value();
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", charSequence31, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord84.leaderEpoch();
        java.lang.CharSequence charSequence87 = serializableConsumerRecord84.value();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord84.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertNull(charSequence87);
        org.junit.Assert.assertNotNull(intOptional88);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord5.headers();
        int int13 = serializableConsumerRecord5.partition();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        long long41 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable55 = serializableConsumerRecord54.key();
        long long56 = serializableConsumerRecord54.checksum();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType22, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers43, intOptional57);
        int int59 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord58.timestampType();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional61);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.checksum();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        long long17 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        long long20 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.io.Serializable serializable13 = serializableConsumerRecord10.key();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (short) 1 + "'", serializable13, (short) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        long long16 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (byte) 10 + "'", serializable8, (byte) 10);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long10 = serializableConsumerRecord9.offset();
        long long11 = serializableConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType43, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence50 = serializableConsumerRecord49.value();
        int int51 = serializableConsumerRecord49.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional52 = serializableConsumerRecord49.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType34, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional52);
        java.io.Serializable serializable57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType34, (long) 0, 0, 0, serializable57, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass60 = timestampType34.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass60, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.io.Serializable serializable63 = serializableConsumerRecord62.key();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord62.headers();
        java.lang.Class<?> wildcardClass65 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement> charSequenceConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 1, (long) (short) 1, 0L, timestampType12, 97L, 1, (int) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass65);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertNotNull(intOptional52);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(serializable63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord58.headers();
        long long80 = serializableConsumerRecord58.timestamp();
        long long81 = serializableConsumerRecord58.offset();
        long long82 = serializableConsumerRecord58.checksum();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord13.value();
        long long16 = serializableConsumerRecord13.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType25, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers43);
        long long45 = serializableConsumerRecord44.timestamp();
        long long46 = serializableConsumerRecord44.timestamp();
        java.lang.CharSequence charSequence47 = serializableConsumerRecord44.value();
        long long48 = serializableConsumerRecord44.checksum();
        int int49 = serializableConsumerRecord44.partition();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord44.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration> objConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)), partition = 35, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ))", 1, (long) 97, (java.lang.Object) serializableConsumerRecord13, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        int int52 = serializableConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long13 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord12.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int25 = serializableConsumerRecord24.partition();
        int int26 = serializableConsumerRecord24.partition();
        long long27 = serializableConsumerRecord24.offset();
        java.lang.String str28 = serializableConsumerRecord24.toString();
        long long29 = serializableConsumerRecord24.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord64.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType65, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass55, timestampType65);
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        java.io.Serializable serializable84 = serializableConsumerRecord82.key();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord82.timestampType();
        java.lang.Class<?> wildcardClass86 = serializableConsumerRecord82.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType65, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass86, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType30, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType89, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> headerIterableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 32, (-1L), (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers14, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 0, (long) (short) -1, 0L, timestampType30, (long) 0, 32, (int) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str28, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        long long17 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass19 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 100, (long) (byte) 100, (java.io.Serializable) wildcardClass19, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord21.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(intOptional22);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        long long88 = serializableConsumerRecord13.checksum();
        int int89 = serializableConsumerRecord13.partition();
        int int90 = serializableConsumerRecord13.serializedValueSize();
        int int91 = serializableConsumerRecord13.partition();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord13.value();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord13.timestampType();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "hi!" + "'", charSequence92, "hi!");
        org.junit.Assert.assertNull(timestampType93);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        long long11 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        java.lang.String str13 = serializableConsumerRecord9.topic();
        java.lang.String str14 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        int int29 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType35, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int42 = serializableConsumerRecord41.serializedValueSize();
        int int43 = serializableConsumerRecord41.serializedValueSize();
        long long44 = serializableConsumerRecord41.offset();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType30, serializableConsumerRecord41);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        int int61 = serializableConsumerRecord58.serializedKeySize();
        int int62 = serializableConsumerRecord58.serializedKeySize();
        long long63 = serializableConsumerRecord58.offset();
        int int64 = serializableConsumerRecord58.serializedValueSize();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType70, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord76.headers();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) 'a', (long) (byte) 100, timestampType15, (java.lang.Long) 0L, (int) (byte) 1, 97, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), value = )", headers65, intOptional79);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(intOptional79);
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        int int96 = serializableConsumerRecord95.serializedKeySize();
        long long97 = serializableConsumerRecord95.timestamp();
        int int98 = serializableConsumerRecord95.partition();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 10 + "'", int98 == 10);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + 10.0f + "'", serializable17, 10.0f);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }
}

