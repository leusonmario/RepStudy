import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.io.Serializable serializable30 = serializableConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        long long32 = serializableConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord28.headers();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord28.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType14, 0L, 32, (int) (byte) 10, headers35, serializableConsumerRecord36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long47 = serializableConsumerRecord46.offset();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord46.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)", (int) ' ', (long) (byte) 100, (long) 32, timestampType14, (long) '#', 1, (int) (byte) 100, serializableConsumerRecord46, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        int int51 = serializableConsumerRecord46.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 1 + "'", serializable30, (short) 1);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence48, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass18, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) 0, (long) ' ', (java.io.Serializable) (-1), (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence23 = serializableConsumerRecord22.value();
        java.io.Serializable serializable24 = serializableConsumerRecord22.key();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence23, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (-1) + "'", serializable24, (-1));
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        long long13 = serializableConsumerRecord9.timestamp();
        long long14 = serializableConsumerRecord9.checksum();
        int int15 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int49 = serializableConsumerRecord48.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.io.Serializable serializable67 = serializableConsumerRecord65.key();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord65.timestampType();
        long long69 = serializableConsumerRecord65.offset();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType39, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType50, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable83 = serializableConsumerRecord82.key();
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord82.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 97, (long) 10, timestampType39, 0L, 1, (int) (byte) 0, (java.io.Serializable) timestampType84, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) 35, (java.io.Serializable) timestampType39, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>> objConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) 100, (long) (byte) 10, 32L, timestampType17, (long) 1, 10, 35, (java.lang.Object) timestampType39, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + serializable67 + "' != '" + (short) 1 + "'", serializable67, (short) 1);
        org.junit.Assert.assertNull(timestampType68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + 100.0f + "'", serializable83, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        java.lang.reflect.Type type3 = null;
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord14.value();
        long long17 = serializableConsumerRecord14.timestamp();
        long long18 = serializableConsumerRecord14.checksum();
        int int19 = serializableConsumerRecord14.partition();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 1, type3, intOptional20);
        java.lang.Class<?> wildcardClass22 = intOptional20.getClass();
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord8.headers();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord8.value();
        java.io.Serializable serializable14 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord8.timestampType();
        java.lang.Class<?> wildcardClass16 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 97, (-1L), (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        long long19 = serializableConsumerRecord18.checksum();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord18.timestampType();
        long long21 = serializableConsumerRecord18.timestamp();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (-1.0d) + "'", serializable14, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 32L + "'", long9 == 32L);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType21, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence28 = serializableConsumerRecord27.value();
        java.io.Serializable serializable29 = serializableConsumerRecord27.key();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord27.timestampType();
        long long31 = serializableConsumerRecord27.offset();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord27.headers();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord27.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType13, 0L, 32, (int) (byte) 10, headers34, serializableConsumerRecord35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) -1, (long) (byte) 0, (java.io.Serializable) 10, (java.lang.CharSequence) "");
        org.apache.kafka.common.header.Headers headers39 = serializableConsumerRecord38.headers();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + (short) 1 + "'", serializable29, (short) 1);
        org.junit.Assert.assertNull(timestampType30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(headers39);
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.partition();
        int int15 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        long long92 = serializableConsumerRecord88.offset();
        java.lang.String str93 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str93, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord64.headers();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord64.leaderEpoch();
        int int70 = serializableConsumerRecord64.partition();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord64.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) '4', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord70.leaderEpoch();
        int int72 = serializableConsumerRecord70.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        org.apache.kafka.common.header.Headers headers11 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L + "'", long6 == 100L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers11);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass44, timestampType54);
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType54, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType19, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int92 = serializableConsumerRecord91.partition();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) '#', (long) (byte) 0, timestampType19, (java.lang.Long) 52L, (int) (short) 0, (int) (short) 100, serializable84, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93);
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord94.timestampType();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord94.headers();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        int int29 = serializableConsumerRecord23.partition();
        long long30 = serializableConsumerRecord23.checksum();
        int int31 = serializableConsumerRecord23.serializedValueSize();
        int int32 = serializableConsumerRecord23.partition();
        int int33 = serializableConsumerRecord23.partition();
        long long34 = serializableConsumerRecord23.timestamp();
        java.lang.String str35 = serializableConsumerRecord23.topic();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hi!" + "'", str35, "hi!");
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        long long8 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType17, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) (byte) 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long45 = serializableConsumerRecord44.checksum();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord44.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) -1 + "'", serializable9, (byte) -1);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord64.timestampType();
        long long67 = serializableConsumerRecord64.timestamp();
        long long68 = serializableConsumerRecord64.offset();
        java.lang.String str69 = serializableConsumerRecord64.topic();
        java.lang.String str70 = serializableConsumerRecord64.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        long long93 = serializableConsumerRecord88.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord88.timestampType();
        java.lang.Class<?> wildcardClass96 = timestampType95.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 32L + "'", long93 == 32L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord20.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        int int24 = serializableConsumerRecord20.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType25, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) -1, (long) (byte) 100, (long) (-1), timestampType25, 100L, (int) 'a', (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int50 = serializableConsumerRecord49.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord49.timestampType();
        java.io.Serializable serializable52 = serializableConsumerRecord49.key();
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType53, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.String str56 = serializableConsumerRecord55.topic();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord55.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>> intOptionalConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 0, (long) (byte) 100, (long) (-1), timestampType25, (long) 100, (int) (byte) 1, (int) (short) 100, intOptional57, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass60 = timestampType25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (short) 1, (long) 10, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + 1.0f + "'", serializable52, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str56, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str37 = serializableConsumerRecord36.topic();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord36.timestampType();
        java.lang.CharSequence charSequence43 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType38, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence43);
        org.apache.kafka.common.record.TimestampType timestampType45 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType58 = serializableConsumerRecord57.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType58, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType45, (long) '#', 1, 0, (java.io.Serializable) timestampType58, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType68, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int75 = serializableConsumerRecord74.serializedValueSize();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        long long77 = serializableConsumerRecord74.timestamp();
        org.apache.kafka.common.header.Headers headers78 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) (short) 1, (long) '#', timestampType19, (java.lang.Long) 1L, (int) (short) 10, (int) '4', (java.io.Serializable) timestampType45, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers78);
        java.lang.Object obj83 = new java.lang.Object();
        java.lang.Class<?> wildcardClass84 = obj83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) '#', 1L, timestampType19, 0L, 1, 1, (java.io.Serializable) wildcardClass84, (java.lang.CharSequence) "hi!");
        int int87 = serializableConsumerRecord86.serializedValueSize();
        long long88 = serializableConsumerRecord86.checksum();
        java.lang.Class<?> wildcardClass89 = serializableConsumerRecord86.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType58 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType58.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(headers78);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence8);
        long long10 = serializableConsumerRecord9.offset();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int25 = serializableConsumerRecord24.partition();
        int int26 = serializableConsumerRecord24.partition();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord24.value();
        int int28 = serializableConsumerRecord24.serializedKeySize();
        long long29 = serializableConsumerRecord24.offset();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord24.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        int int67 = serializableConsumerRecord65.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType50, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType50, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj79 = new java.lang.Object();
        java.lang.Class<?> wildcardClass80 = obj79.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType50, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "hi!", headers88);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) (byte) -1, (long) 35, timestampType15, (java.lang.Long) 10L, (int) (byte) 100, (int) 'a', (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers88);
        java.lang.String str91 = serializableConsumerRecord90.topic();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "hi!" + "'", str91, "hi!");
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType28, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional46);
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType28, (long) 0, 0, 0, serializable51, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable65 = serializableConsumerRecord64.key();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType71, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence78 = serializableConsumerRecord77.value();
        int int79 = serializableConsumerRecord77.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord77.leaderEpoch();
        java.io.Serializable serializable81 = serializableConsumerRecord77.key();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType10, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType28, serializableConsumerRecord64, headers82);
        java.io.Serializable serializable84 = serializableConsumerRecord64.key();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord64.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>> intOptionalConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 1, 0L, intOptional85, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Class<?> wildcardClass88 = intOptional85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 32, (-1L), (java.io.Serializable) wildcardClass88, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long91 = serializableConsumerRecord90.checksum();
        long long92 = serializableConsumerRecord90.offset();
        long long93 = serializableConsumerRecord90.checksum();
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable64 = serializableConsumerRecord63.key();
        long long65 = serializableConsumerRecord63.checksum();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        int int67 = serializableConsumerRecord63.serializedKeySize();
        int int68 = serializableConsumerRecord63.serializedValueSize();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord63.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType74, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int81 = serializableConsumerRecord80.serializedValueSize();
        long long82 = serializableConsumerRecord80.offset();
        int int83 = serializableConsumerRecord80.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord80.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 10, 10L, (long) 'a', timestampType22, (java.lang.Long) 32L, (int) '#', 100, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", headers69, intOptional84);
        org.apache.kafka.common.record.TimestampType timestampType86 = serializableConsumerRecord85.timestampType();
        java.lang.Object obj93 = new java.lang.Object();
        java.lang.Class<?> wildcardClass94 = obj93.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 100, (long) 100, (java.io.Serializable) wildcardClass94, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 97, (long) (byte) 10, (long) (byte) 0, timestampType86, (long) 35, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) "", (java.lang.CharSequence) "");
        java.lang.String str99 = serializableConsumerRecord98.topic();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1L + "'", long82 == 1L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str99, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str91 = serializableConsumerRecord88.topic();
        int int92 = serializableConsumerRecord88.serializedValueSize();
        long long93 = serializableConsumerRecord88.offset();
        org.apache.kafka.common.record.TimestampType timestampType94 = serializableConsumerRecord88.timestampType();
        long long95 = serializableConsumerRecord88.timestamp();
        int int96 = serializableConsumerRecord88.serializedValueSize();
        java.lang.Class<?> wildcardClass97 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType94 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType94.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 32L + "'", long95 == 32L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord23.timestampType();
        int int28 = serializableConsumerRecord23.partition();
        int int29 = serializableConsumerRecord23.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNull(timestampType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.io.Serializable serializable93 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) 0, (long) (short) 100, timestampType17, (long) (-1), (-1), 52, serializable93, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence96 = serializableConsumerRecord95.value();
        long long97 = serializableConsumerRecord95.offset();
        java.util.Optional<java.lang.Integer> intOptional98 = serializableConsumerRecord95.leaderEpoch();
        java.lang.String str99 = serializableConsumerRecord95.toString();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "hi!" + "'", charSequence96, "hi!");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 100, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str99, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 100, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        int int29 = serializableConsumerRecord23.partition();
        long long30 = serializableConsumerRecord23.checksum();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord23.timestampType();
        int int32 = serializableConsumerRecord23.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long10 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType19, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        long long26 = serializableConsumerRecord25.checksum();
        long long27 = serializableConsumerRecord25.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        java.io.Serializable serializable40 = serializableConsumerRecord38.key();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord38.timestampType();
        long long42 = serializableConsumerRecord38.offset();
        java.lang.String str43 = serializableConsumerRecord38.topic();
        long long44 = serializableConsumerRecord38.checksum();
        long long45 = serializableConsumerRecord38.checksum();
        java.lang.String str46 = serializableConsumerRecord38.topic();
        long long47 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable60 = serializableConsumerRecord59.key();
        long long61 = serializableConsumerRecord59.offset();
        int int62 = serializableConsumerRecord59.serializedValueSize();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int71 = serializableConsumerRecord70.partition();
        int int72 = serializableConsumerRecord70.partition();
        long long73 = serializableConsumerRecord70.timestamp();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) (byte) 1, (-1L), timestampType11, (java.lang.Long) 52L, (int) (byte) 100, (int) ' ', serializableConsumerRecord25, serializableConsumerRecord38, headers64, intOptional74);
        int int76 = serializableConsumerRecord38.serializedKeySize();
        int int77 = serializableConsumerRecord38.partition();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertNull(timestampType41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (short) 1 + "'", serializable60, (short) 1);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        long long10 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        int int32 = serializableConsumerRecord30.serializedKeySize();
        int int33 = serializableConsumerRecord30.serializedKeySize();
        int int34 = serializableConsumerRecord30.partition();
        java.io.Serializable serializable35 = serializableConsumerRecord30.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType15, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord30);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers51 = serializableConsumerRecord50.headers();
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        long long68 = serializableConsumerRecord62.checksum();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord62.timestampType();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord62.value();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>> headerIterableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 32L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers51, intOptional71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 100, (long) 97, (long) 10, timestampType15, (java.lang.Long) 1L, (int) (short) -1, 0, serializable40, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers51);
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord73.headers();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord73.timestampType();
        long long76 = serializableConsumerRecord73.checksum();
        int int77 = serializableConsumerRecord73.partition();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 1 + "'", serializable35, (short) 1);
        org.junit.Assert.assertNotNull(headers51);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.timestamp();
        java.lang.String str28 = serializableConsumerRecord23.topic();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord23.value();
        java.lang.String str30 = serializableConsumerRecord23.topic();
        int int31 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.io.Serializable serializable46 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord44.timestampType();
        long long48 = serializableConsumerRecord44.offset();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType18, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers49);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str64 = serializableConsumerRecord63.topic();
        long long65 = serializableConsumerRecord63.offset();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord63.headers();
        long long67 = serializableConsumerRecord63.checksum();
        int int68 = serializableConsumerRecord63.partition();
        java.lang.Class<?> wildcardClass69 = serializableConsumerRecord63.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType18, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass69, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.partition();
        long long74 = serializableConsumerRecord71.checksum();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNull(timestampType47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 52L + "'", long65 == 52L);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)" + "'", charSequence72, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 35L + "'", long74 == 35L);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        long long41 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable55 = serializableConsumerRecord54.key();
        long long56 = serializableConsumerRecord54.checksum();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType22, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers43, intOptional57);
        int int59 = serializableConsumerRecord58.serializedKeySize();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.lang.String str61 = serializableConsumerRecord58.topic();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        java.lang.Class<?> wildcardClass63 = serializable62.getClass();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + '#' + "'", serializable62, '#');
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord58.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(intOptional81);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord58.headers();
        long long80 = serializableConsumerRecord58.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord58.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNull(timestampType81);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        java.lang.Object obj7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Object> charSequenceConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Object>("hi!", 10, (long) (byte) -1, (java.lang.CharSequence) "", obj7);
        java.lang.Class<?> wildcardClass9 = charSequenceConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        int int49 = serializableConsumerRecord47.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional50 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType32, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType32, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence74 = serializableConsumerRecord73.value();
        java.io.Serializable serializable75 = serializableConsumerRecord73.key();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord73.timestampType();
        org.apache.kafka.common.header.Headers headers77 = serializableConsumerRecord73.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType32, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers77);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType32, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord84.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>> annotatedElementConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 35, (long) 52, (java.lang.reflect.AnnotatedElement) wildcardClass9, intOptional85);
        java.lang.Class<?> wildcardClass87 = intOptional85.getClass();
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertNotNull(intOptional50);
        org.junit.Assert.assertEquals("'" + charSequence74 + "' != '" + "hi!" + "'", charSequence74, "hi!");
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNull(timestampType76);
        org.junit.Assert.assertNotNull(headers77);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        long long17 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str6, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable52 = serializableConsumerRecord51.key();
        long long53 = serializableConsumerRecord51.checksum();
        java.lang.CharSequence charSequence54 = serializableConsumerRecord51.value();
        java.lang.Class<?> wildcardClass55 = charSequence54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement> charSequenceConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.AnnotatedElement>("", (int) '#', (long) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, (long) 52, (long) 0, timestampType19, 10L, (int) (short) 100, (-1), (java.lang.reflect.AnnotatedElement) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.io.Serializable serializable62 = null;
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable75 = serializableConsumerRecord74.key();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.lang.CharSequence charSequence78 = serializableConsumerRecord74.value();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord74.timestampType();
        long long80 = serializableConsumerRecord74.offset();
        int int81 = serializableConsumerRecord74.partition();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 35, (long) (short) 0, (long) ' ', timestampType19, (java.lang.Long) 97L, 1, (int) (byte) 1, serializable62, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers82);
        java.lang.Class<?> wildcardClass84 = headers82.getClass();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertNull(timestampType79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str7, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.io.Serializable serializable25 = serializableConsumerRecord22.key();
        int int26 = serializableConsumerRecord22.partition();
        int int27 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType43, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int89 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, (long) (byte) 100, (long) 1, timestampType13, (java.lang.Long) 10L, (-1), 100, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers79, intOptional91);
        long long93 = serializableConsumerRecord92.timestamp();
        long long94 = serializableConsumerRecord92.offset();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (-1.0d) + "'", serializable25, (-1.0d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 1.0f + "'", serializable42, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence95, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.partition();
        java.lang.String str13 = serializableConsumerRecord11.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int25 = serializableConsumerRecord24.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.lang.Class<?> wildcardClass42 = serializableConsumerRecord40.getClass();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        java.io.Serializable serializable58 = serializableConsumerRecord54.key();
        java.util.Optional<java.lang.Integer> intOptional59 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord54.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType65, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int72 = serializableConsumerRecord71.partition();
        java.util.Optional<java.lang.Integer> intOptional73 = serializableConsumerRecord71.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType26, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass42, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers60, intOptional73);
        long long75 = serializableConsumerRecord74.offset();
        java.lang.String str76 = serializableConsumerRecord74.topic();
        long long77 = serializableConsumerRecord74.checksum();
        long long78 = serializableConsumerRecord74.offset();
        java.lang.String str79 = serializableConsumerRecord74.topic();
        java.lang.Class<?> wildcardClass80 = serializableConsumerRecord74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type> timestampTypeConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', 0L, timestampType14, (java.lang.reflect.Type) wildcardClass80);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) (-1), (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord83.timestampType();
        java.lang.Class<?> wildcardClass85 = timestampType84.getClass();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 1 + "'", serializable58, (short) 1);
        org.junit.Assert.assertNotNull(intOptional59);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(intOptional73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L + "'", long75 == 100L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str76, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1L + "'", long77 == 1L);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L + "'", long78 == 100L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str79, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.checksum();
        int int8 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord93.leaderEpoch();
        java.lang.String str95 = serializableConsumerRecord93.toString();
        int int96 = serializableConsumerRecord93.partition();
        java.lang.CharSequence charSequence97 = serializableConsumerRecord93.value();
        java.io.Serializable serializable98 = serializableConsumerRecord93.key();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))" + "'", str95, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 10 + "'", int96 == 10);
        org.junit.Assert.assertEquals("'" + charSequence97 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence97, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable98 + "' != '" + (short) 0 + "'", serializable98, (short) 0);
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.String str92 = serializableConsumerRecord88.topic();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType13, (java.lang.Long) 10L, (int) '#', 35, timestampType27, "hi!", headers63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 97, (long) (short) -1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long67 = serializableConsumerRecord66.checksum();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable68, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        long long17 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) 100, (long) (short) 100, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.timestamp();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int33 = serializableConsumerRecord32.partition();
        java.lang.String str34 = serializableConsumerRecord32.topic();
        java.lang.String str35 = serializableConsumerRecord32.toString();
        long long36 = serializableConsumerRecord32.checksum();
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord32.timestampType();
        java.io.Serializable serializable41 = null;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType47, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str54 = serializableConsumerRecord53.toString();
        java.io.Serializable serializable55 = serializableConsumerRecord53.key();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord53.value();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord53.leaderEpoch();
        int int58 = serializableConsumerRecord53.serializedKeySize();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord53.headers();
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.io.Serializable serializable72 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        long long74 = serializableConsumerRecord70.offset();
        java.lang.String str75 = serializableConsumerRecord70.topic();
        long long76 = serializableConsumerRecord70.checksum();
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord70.timestampType();
        java.lang.CharSequence charSequence78 = serializableConsumerRecord70.value();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord70.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (short) -1, (long) 35, (long) 52, timestampType37, (java.lang.Long) 52L, (int) (byte) 100, 97, serializable41, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers59, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", 1, (long) 32, (long) (short) 1, timestampType4, (java.lang.Long) 32L, (int) (byte) 0, (int) 'a', (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", headers22, intOptional79);
        long long82 = serializableConsumerRecord81.checksum();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str35, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str54, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + 10.0f + "'", serializable55, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (short) 1 + "'", serializable72, (short) 1);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertNull(timestampType77);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 32L + "'", long82 == 32L);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        java.io.Serializable serializable12 = serializableConsumerRecord5.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.toString();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        int int55 = serializableConsumerRecord53.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord53.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType38, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional56);
        java.io.Serializable serializable61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType38, (long) 0, 0, 0, serializable61, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable75 = serializableConsumerRecord74.key();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        java.io.Serializable serializable91 = serializableConsumerRecord87.key();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord87.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType20, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType38, serializableConsumerRecord74, headers92);
        java.io.Serializable serializable94 = serializableConsumerRecord74.key();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord74.headers();
        org.apache.kafka.common.record.TimestampType timestampType97 = serializableConsumerRecord74.timestampType();
        int int98 = serializableConsumerRecord74.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) 'a', (long) (byte) 1, (long) 'a', timestampType11, 97L, (int) '#', (-1), "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", serializableConsumerRecord74);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 1 + "'", serializable91, (short) 1);
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 1 + "'", serializable94, (short) 1);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertNull(timestampType97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        long long8 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        long long8 = serializableConsumerRecord5.checksum();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str11, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        java.lang.Class<?> wildcardClass39 = serializableConsumerRecord37.getClass();
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        int int53 = serializableConsumerRecord51.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord51.leaderEpoch();
        java.io.Serializable serializable55 = serializableConsumerRecord51.key();
        java.util.Optional<java.lang.Integer> intOptional56 = serializableConsumerRecord51.leaderEpoch();
        org.apache.kafka.common.header.Headers headers57 = serializableConsumerRecord51.headers();
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType62, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int69 = serializableConsumerRecord68.partition();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType23, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass39, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers57, intOptional70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable> strComparableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.io.Serializable>("hi!", (int) (short) -1, (long) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass81 = strComparableConsumerRecord80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 97, (-1L), (long) 97, timestampType23, (long) (byte) 100, (int) (short) 100, (int) '#', (java.io.Serializable) wildcardClass81, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str91 = serializableConsumerRecord90.topic();
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord90.timestampType();
        java.io.Serializable serializable93 = serializableConsumerRecord90.key();
        long long94 = serializableConsumerRecord90.timestamp();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", (int) (byte) 10, 0L, (long) 32, timestampType4, (java.lang.Long) 32L, 100, (int) (byte) 100, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers95);
        long long97 = serializableConsumerRecord96.checksum();
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertNotNull(intOptional56);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + timestampType92 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType92.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + (-1.0d) + "'", serializable93, (-1.0d));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-1L) + "'", long94 == (-1L));
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 32L + "'", long97 == 32L);
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        int int25 = serializableConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType31, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        int int39 = serializableConsumerRecord37.serializedValueSize();
        long long40 = serializableConsumerRecord37.offset();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType26, serializableConsumerRecord37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 35, (long) (byte) 1, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable68 = serializableConsumerRecord67.key();
        long long69 = serializableConsumerRecord67.checksum();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord67.leaderEpoch();
        int int71 = serializableConsumerRecord67.serializedKeySize();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord67.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass72, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int82 = serializableConsumerRecord81.partition();
        java.lang.String str83 = serializableConsumerRecord81.topic();
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord81.timestampType();
        long long85 = serializableConsumerRecord81.timestamp();
        org.apache.kafka.common.header.Headers headers86 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers> genericDeclarationConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.common.header.Headers>("hi!", (int) (byte) 10, (long) 'a', 10L, timestampType50, (java.lang.Long) 0L, (int) (short) 100, (int) (short) 10, (java.lang.reflect.GenericDeclaration) wildcardClass72, headers75, headers86);
        java.util.Optional<java.lang.Integer> intOptional88 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 32, (long) '#', (long) (byte) 10, timestampType8, (java.lang.Long) 1L, (int) (short) 100, (int) (byte) 100, (java.io.Serializable) timestampType26, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", headers86, intOptional88);
        java.io.Serializable serializable93 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) -1, 100L, (long) (short) -1, timestampType26, 10L, 97, 52, serializable93, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str83, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertNotNull(headers86);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (-1L), (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers6 = serializableConsumerRecord5.headers();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        long long8 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertNotNull(headers6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str7, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        java.io.Serializable serializable48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType25, (long) 0, 0, 0, serializable48, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord65.value();
        long long68 = serializableConsumerRecord65.timestamp();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType25, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType25, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass77 = serializableConsumerRecord76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, 35L, (java.io.Serializable) wildcardClass77, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long80 = serializableConsumerRecord79.offset();
        long long81 = serializableConsumerRecord79.offset();
        int int82 = serializableConsumerRecord79.serializedKeySize();
        java.lang.Class<?> wildcardClass83 = serializableConsumerRecord79.getClass();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 35L + "'", long80 == 35L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 35L + "'", long81 == 35L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.timestamp();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(headers23);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )", 1, (long) 100, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 1.0d + "'", serializable6, 1.0d);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.checksum();
        long long25 = serializableConsumerRecord23.offset();
        java.lang.String str26 = serializableConsumerRecord23.toString();
        int int27 = serializableConsumerRecord23.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord23.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str26, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(timestampType28);
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        int int32 = serializableConsumerRecord30.partition();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord30.headers();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int48 = serializableConsumerRecord47.partition();
        java.lang.String str49 = serializableConsumerRecord47.topic();
        java.lang.String str50 = serializableConsumerRecord47.toString();
        long long51 = serializableConsumerRecord47.checksum();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long63 = serializableConsumerRecord62.offset();
        int int64 = serializableConsumerRecord62.partition();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        java.lang.Class<?> wildcardClass66 = timestampType65.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration> strComparableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) (byte) -1, 0L, timestampType52, (long) (short) 100, 10, (int) (short) 100, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.lang.reflect.GenericDeclaration) wildcardClass66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (byte) 0, (long) (byte) 1, (long) 'a', timestampType34, 52L, (int) (short) 1, 35, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", (-1), (long) 32, 52L, timestampType17, 0L, (int) (short) 100, 32, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", charSequence70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord80.timestampType();
        int int82 = serializableConsumerRecord80.partition();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord80.headers();
        int int84 = serializableConsumerRecord80.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord80.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) 0, (long) 1, timestampType17, (long) 35, 32, (int) '#', (java.io.Serializable) timestampType85, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str49, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str50, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + timestampType81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        long long10 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str12, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        int int21 = serializableConsumerRecord10.partition();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str11 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        long long18 = serializableConsumerRecord10.offset();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 10.0f + "'", serializable12, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) 97, serializableConsumerRecord3, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord11.leaderEpoch();
        long long14 = serializableConsumerRecord11.checksum();
        int int15 = serializableConsumerRecord11.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord11.leaderEpoch();
        long long17 = serializableConsumerRecord11.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) '#', (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", 0, (-1L), (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.lang.Class<?> wildcardClass20 = serializable19.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.lang.String str7 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.lang.Class<?> wildcardClass10 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType28, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional46);
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType28, (long) 0, 0, 0, serializable51, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        java.lang.CharSequence charSequence70 = serializableConsumerRecord68.value();
        long long71 = serializableConsumerRecord68.timestamp();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType28, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional72);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType28, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass80 = serializableConsumerRecord79.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, 35L, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) ' ', (long) (short) -1, serializableConsumerRecord82, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        long long85 = serializableConsumerRecord82.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int16 = serializableConsumerRecord15.partition();
        int int17 = serializableConsumerRecord15.partition();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord15.value();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        java.lang.Class<?> wildcardClass37 = intOptional36.getClass();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.lang.CharSequence charSequence50 = serializableConsumerRecord48.value();
        long long51 = serializableConsumerRecord48.timestamp();
        int int52 = serializableConsumerRecord48.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.io.Serializable serializable66 = serializableConsumerRecord64.key();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord64.timestampType();
        long long68 = serializableConsumerRecord64.offset();
        java.lang.String str69 = serializableConsumerRecord64.topic();
        long long70 = serializableConsumerRecord64.checksum();
        org.apache.kafka.common.record.TimestampType timestampType71 = serializableConsumerRecord64.timestampType();
        java.lang.String str72 = serializableConsumerRecord64.topic();
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object> genericDeclarationConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.lang.Object>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 100, (long) (byte) 10, (long) 100, timestampType19, (java.lang.Long) 10L, (int) (byte) 10, 52, (java.lang.reflect.GenericDeclaration) wildcardClass37, (java.lang.Object) intOptional53, headers73);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 0, (long) '#', (java.io.Serializable) timestampType19, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, 52L, (java.io.Serializable) timestampType19, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord78.headers();
        int int80 = serializableConsumerRecord78.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
        org.junit.Assert.assertNull(timestampType67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNull(timestampType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        java.io.Serializable serializable56 = serializableConsumerRecord54.key();
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord54.timestampType();
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType68, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass58, timestampType68);
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        java.io.Serializable serializable87 = serializableConsumerRecord85.key();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord85.timestampType();
        java.lang.Class<?> wildcardClass89 = serializableConsumerRecord85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType68, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass89, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 1, (long) 52, (long) (byte) 1, timestampType14, 32L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) 52L, (java.lang.CharSequence) "");
        long long94 = serializableConsumerRecord93.offset();
        long long95 = serializableConsumerRecord93.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertEquals("'" + serializable56 + "' != '" + (short) 1 + "'", serializable56, (short) 1);
        org.junit.Assert.assertNull(timestampType57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + (short) 1 + "'", serializable87, (short) 1);
        org.junit.Assert.assertNull(timestampType88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L + "'", long95 == 1L);
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        int int14 = serializableConsumerRecord5.partition();
        long long15 = serializableConsumerRecord5.timestamp();
        long long16 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType27, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional45);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        java.io.Serializable serializable62 = serializableConsumerRecord58.key();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType13, (java.lang.Long) 10L, (int) '#', 35, timestampType27, "hi!", headers63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 97, (long) (short) -1, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord66.headers();
        long long69 = serializableConsumerRecord66.checksum();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + (short) 1 + "'", serializable62, (short) 1);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str67, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long6 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass10 = headers9.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        long long33 = serializableConsumerRecord29.offset();
        int int34 = serializableConsumerRecord29.partition();
        java.lang.String str35 = serializableConsumerRecord29.topic();
        long long36 = serializableConsumerRecord29.offset();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord29.headers();
        java.lang.Iterable<org.apache.kafka.common.header.Header> headerIterable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str48 = serializableConsumerRecord47.topic();
        int int49 = serializableConsumerRecord47.partition();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.Type>("", (int) '4', 35L, headerIterable41, (java.lang.reflect.Type) wildcardClass50);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration> headerIterableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, 52L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers37, (java.lang.reflect.GenericDeclaration) wildcardClass50);
        java.lang.Object obj53 = new java.lang.Object();
        java.lang.Class<?> wildcardClass54 = obj53.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.reflect.Type> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 52, (long) 97, 0L, timestampType12, (long) 'a', (int) ' ', (-1), (java.io.Serializable) 52L, (java.lang.reflect.Type) wildcardClass54);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence> charSequenceConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (short) 100, (long) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int22 = serializableConsumerRecord21.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType37, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers55);
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType74, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers92);
        java.util.Optional<java.lang.Integer> intOptional94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType29, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers55, headers69, headers92, intOptional94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (short) 0, 0L, (long) (short) 1, timestampType12, (java.lang.Long) 100L, (int) (short) 10, (int) (byte) 0, (java.io.Serializable) timestampType23, (java.lang.CharSequence) "", headers92);
        java.lang.String str97 = serializableConsumerRecord96.toString();
        java.lang.String str98 = serializableConsumerRecord96.toString();
        java.lang.Class<?> wildcardClass99 = serializableConsumerRecord96.getClass();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertNotNull(headers92);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str97, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str98, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        int int11 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(intOptional12);
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType19, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence24);
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        long long45 = serializableConsumerRecord42.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        long long60 = serializableConsumerRecord58.checksum();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType26, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers47, intOptional61);
        java.io.Serializable serializable66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (byte) -1, (long) (short) 1, timestampType26, (long) (byte) 100, (int) (byte) 1, 97, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord68.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(timestampType46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(intOptional69);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord30.timestampType();
        long long34 = serializableConsumerRecord30.offset();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord30.headers();
        java.lang.String str36 = serializableConsumerRecord30.toString();
        java.lang.String str37 = serializableConsumerRecord30.toString();
        java.lang.String str38 = serializableConsumerRecord30.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) 35, (long) (byte) 1, timestampType15, (long) (-1), 10, (int) (byte) 100, (java.io.Serializable) 1, serializableConsumerRecord30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String> timestampTypeEnumConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))", (int) (byte) 0, (long) (byte) 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType15, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.Class<?> wildcardClass42 = timestampTypeEnumConsumerRecord41.getClass();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str36, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str37, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str38, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.serializedValueSize();
        long long81 = serializableConsumerRecord58.checksum();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord58.headers();
        int int83 = serializableConsumerRecord58.serializedValueSize();
        long long84 = serializableConsumerRecord58.offset();
        int int85 = serializableConsumerRecord58.serializedValueSize();
        long long86 = serializableConsumerRecord58.checksum();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-1L) + "'", long81 == (-1L));
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        int int62 = serializableConsumerRecord59.partition();
        int int63 = serializableConsumerRecord59.serializedValueSize();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(headers64);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        int int66 = serializableConsumerRecord59.serializedKeySize();
        int int67 = serializableConsumerRecord59.serializedValueSize();
        long long68 = serializableConsumerRecord59.offset();
        int int69 = serializableConsumerRecord59.serializedValueSize();
        java.lang.String str70 = serializableConsumerRecord59.topic();
        int int71 = serializableConsumerRecord59.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str70, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int29 = serializableConsumerRecord28.partition();
        java.lang.String str30 = serializableConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType19, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable51 = serializableConsumerRecord50.key();
        long long52 = serializableConsumerRecord50.checksum();
        java.util.Optional<java.lang.Integer> intOptional53 = serializableConsumerRecord50.leaderEpoch();
        int int54 = serializableConsumerRecord50.serializedKeySize();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum58 = null;
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        java.io.Serializable serializable71 = serializableConsumerRecord69.key();
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord69.timestampType();
        long long73 = serializableConsumerRecord69.offset();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord69.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 32L, (long) (byte) -1, timestampType19, (java.lang.Long) 10L, 32, (int) ' ', (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", timestampTypeEnum58, headers74);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str85 = serializableConsumerRecord84.toString();
        org.apache.kafka.common.record.TimestampType timestampType86 = serializableConsumerRecord84.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", 52, (long) (byte) 1, (long) (-1), timestampType19, (long) (byte) 100, (int) (byte) 100, 0, (java.io.Serializable) timestampType86, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        long long89 = serializableConsumerRecord88.offset();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str30, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 1 + "'", serializable51, (short) 1);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(intOptional53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertEquals("'" + serializable71 + "' != '" + (short) 1 + "'", serializable71, (short) 1);
        org.junit.Assert.assertNull(timestampType72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str85, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType86 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType86.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1L + "'", long89 == 1L);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = serializableConsumerRecord26.value();
        java.io.Serializable serializable28 = serializableConsumerRecord26.key();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord26.timestampType();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType40, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass30, timestampType40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int46 = serializableConsumerRecord45.serializedKeySize();
        java.lang.String str47 = serializableConsumerRecord45.topic();
        java.io.Serializable serializable48 = serializableConsumerRecord45.key();
        java.lang.Class<?> wildcardClass49 = serializableConsumerRecord45.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, (long) (byte) 100, (java.io.Serializable) wildcardClass49, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord51.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        long long70 = serializableConsumerRecord66.offset();
        java.lang.String str71 = serializableConsumerRecord66.topic();
        long long72 = serializableConsumerRecord66.offset();
        int int73 = serializableConsumerRecord66.partition();
        int int74 = serializableConsumerRecord66.serializedValueSize();
        long long75 = serializableConsumerRecord66.checksum();
        java.lang.Class<?> wildcardClass76 = serializableConsumerRecord66.getClass();
        org.apache.kafka.common.record.TimestampType timestampType82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType82, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence89 = serializableConsumerRecord88.value();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        long long91 = serializableConsumerRecord88.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType92 = serializableConsumerRecord88.timestampType();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) (byte) 100, (long) ' ', timestampType52, (java.lang.Long) 35L, 100, (int) (byte) 1, (java.io.Serializable) wildcardClass76, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93, intOptional94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (long) '#', (java.io.Serializable) '4', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 1 + "'", serializable28, (short) 1);
        org.junit.Assert.assertNull(timestampType29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str47, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable48, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + charSequence89 + "' != '" + "hi!" + "'", charSequence89, "hi!");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 52 + "'", int90 == 52);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNull(timestampType92);
        org.junit.Assert.assertNotNull(headers93);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int26 = serializableConsumerRecord25.partition();
        long long27 = serializableConsumerRecord25.checksum();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, 1L, (long) 10, timestampType15, (long) 0, (int) '4', 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers28);
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        java.io.Serializable serializable45 = serializableConsumerRecord43.key();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord43.timestampType();
        long long47 = serializableConsumerRecord43.offset();
        java.lang.String str48 = serializableConsumerRecord43.topic();
        long long49 = serializableConsumerRecord43.checksum();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord43.timestampType();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord43.leaderEpoch();
        java.lang.Class<?> wildcardClass52 = intOptional51.getClass();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable65 = serializableConsumerRecord64.key();
        long long66 = serializableConsumerRecord64.checksum();
        long long67 = serializableConsumerRecord64.timestamp();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord64.value();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord64.timestampType();
        java.lang.String str70 = serializableConsumerRecord64.topic();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord64.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) 10, (long) 32, 35L, timestampType15, (java.lang.Long) 0L, 1, (int) (byte) -1, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", headers71);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (short) 1 + "'", serializable45, (short) 1);
        org.junit.Assert.assertNull(timestampType46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
        org.junit.Assert.assertNull(timestampType50);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        java.lang.String str12 = serializableConsumerRecord10.toString();
        int int13 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.timestamp();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        org.apache.kafka.common.header.Headers headers30 = serializableConsumerRecord28.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType12, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers30);
        long long32 = serializableConsumerRecord31.timestamp();
        long long33 = serializableConsumerRecord31.timestamp();
        long long34 = serializableConsumerRecord31.offset();
        long long35 = serializableConsumerRecord31.checksum();
        long long36 = serializableConsumerRecord31.checksum();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) 1, (long) ' ', timestampType4, 100L, (-1), (int) '#', (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord39.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(headers30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNull(timestampType40);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        long long14 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 10, (long) (short) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long13 = serializableConsumerRecord12.checksum();
        int int14 = serializableConsumerRecord12.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable6 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        long long10 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        long long12 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + serializable6 + "' != '" + 100.0f + "'", serializable6, 100.0f);
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str8, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)))", 52, (long) (byte) 1, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long10 = serializableConsumerRecord9.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        int int46 = serializableConsumerRecord44.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType29, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str58 = serializableConsumerRecord57.topic();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        java.io.Serializable serializable60 = serializableConsumerRecord57.key();
        long long61 = serializableConsumerRecord57.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType66, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int73 = serializableConsumerRecord72.serializedValueSize();
        long long74 = serializableConsumerRecord72.offset();
        int int75 = serializableConsumerRecord72.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional76 = serializableConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (long) 97, timestampType29, (java.lang.Long) (-1L), (int) (byte) 0, 32, serializableConsumerRecord57, intOptional76, headers83);
        java.lang.Class<?> wildcardClass85 = headers83.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) ' ', 0L, (long) '#', timestampType11, (long) 1, (int) (byte) -1, (int) '4', (java.io.Serializable) wildcardClass85, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord87.headers();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + (-1.0d) + "'", serializable60, (-1.0d));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1L + "'", long74 == 1L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intOptional76);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        java.io.Serializable serializable3 = null;
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) 'a', serializable3, charSequence4);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 1, (long) 100, (long) '4', timestampType4, (-1L), (int) ' ', (int) '4', (java.io.Serializable) true, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int11 = serializableConsumerRecord10.partition();
        long long12 = serializableConsumerRecord10.timestamp();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )" + "'", str13, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence4);
        int int6 = serializableConsumerRecord5.partition();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)");
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + 10.0f + "'", serializable18, 10.0f);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str16 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord15.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType17, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        java.io.Serializable serializable37 = serializableConsumerRecord33.key();
        org.apache.kafka.common.header.Headers headers38 = serializableConsumerRecord33.headers();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord33.timestampType();
        long long40 = serializableConsumerRecord33.offset();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord33.headers();
        long long42 = serializableConsumerRecord33.timestamp();
        java.lang.String str43 = serializableConsumerRecord33.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (-1), 32L, (long) 52, timestampType17, (long) (short) 10, 10, (int) (short) 10, serializableConsumerRecord33, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 52, leaderEpoch = null, offset = 32, NoTimestampType = 10, serialized key size = 52, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, (long) 'a', (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = 32, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + serializable37 + "' != '" + (short) 1 + "'", serializable37, (short) 1);
        org.junit.Assert.assertNotNull(headers38);
        org.junit.Assert.assertNull(timestampType39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str43, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi!" + "'", str16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence22 = serializableConsumerRecord10.value();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.offset();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        long long18 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + 10.0f + "'", serializable19, 10.0f);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 10, (long) (byte) 10, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        java.io.Serializable serializable94 = serializableConsumerRecord93.key();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 0 + "'", serializable94, (short) 0);
        org.junit.Assert.assertNotNull(intOptional95);
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.timestamp();
        long long19 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord10.leaderEpoch();
        int int23 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str24 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str24, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        java.lang.String str19 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        org.apache.kafka.common.header.Headers headers50 = serializableConsumerRecord48.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType32, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers50);
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord62.headers();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord85.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType69, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers87);
        java.util.Optional<java.lang.Integer> intOptional89 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType24, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers50, headers64, headers87, intOptional89);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord17, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers64);
        long long92 = serializableConsumerRecord17.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 0, (long) (short) 100, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", serializableConsumerRecord17);
        java.io.Serializable serializable94 = serializableConsumerRecord17.key();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord17.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertNotNull(headers50);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable94 + "' != '" + (short) 1 + "'", serializable94, (short) 1);
        org.junit.Assert.assertNotNull(intOptional95);
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        long long12 = serializableConsumerRecord9.offset();
        int int13 = serializableConsumerRecord9.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord9.leaderEpoch();
        int int15 = serializableConsumerRecord9.partition();
        int int16 = serializableConsumerRecord9.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.common.header.Headers headers29 = null;
        java.util.Optional<java.lang.Integer> intOptional30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 10, 97L, (long) (byte) 0, timestampType17, (java.lang.Long) 1L, 32, (-1), (java.io.Serializable) timestampType27, charSequence28, headers29, intOptional30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        long long13 = serializableConsumerRecord9.timestamp();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord9.headers();
        java.io.Serializable serializable15 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        int int32 = serializableConsumerRecord30.serializedKeySize();
        long long33 = serializableConsumerRecord30.offset();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord30.headers();
        int int36 = serializableConsumerRecord30.partition();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord30.leaderEpoch();
        int int38 = serializableConsumerRecord30.partition();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord30.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.String> intOptionalConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.String>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, 10L, (long) 1, timestampType16, 0L, (int) (byte) 100, 35, intOptional39, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (-1.0d) + "'", serializable15, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(intOptional39);
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        java.lang.String str70 = serializableConsumerRecord68.topic();
        int int71 = serializableConsumerRecord68.partition();
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord68.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType82, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable89 = serializableConsumerRecord88.key();
        long long90 = serializableConsumerRecord88.offset();
        long long91 = serializableConsumerRecord88.timestamp();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 32, (long) 100, (long) 97, timestampType72, (java.lang.Long) 52L, 0, (int) '4', (java.io.Serializable) 10.0f, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers92);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + (short) 1 + "'", serializable89, (short) 1);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-1L) + "'", long91 == (-1L));
        org.junit.Assert.assertNotNull(headers92);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 100, 0L, (java.io.Serializable) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long45 = serializableConsumerRecord44.timestamp();
        java.lang.String str46 = serializableConsumerRecord44.toString();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        int int18 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        long long20 = serializableConsumerRecord13.timestamp();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (int) (byte) 10, (long) 'a', (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(headers24);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        long long9 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.Class<?> wildcardClass11 = headers10.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str6, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        java.lang.CharSequence charSequence7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence7);
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        int int18 = serializableConsumerRecord16.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord16.headers();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord16.leaderEpoch();
        java.io.Serializable serializable21 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.record.TimestampType> timestampTypeConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.record.TimestampType>("", (int) (short) 0, (long) (byte) 0, timestampType10, timestampType22);
        java.lang.Class<?> wildcardClass24 = timestampTypeConsumerRecord23.getClass();
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (byte) 10 + "'", serializable9, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (-1.0d) + "'", serializable21, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType30, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional48, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass52 = intOptionalConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType13, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        long long67 = serializableConsumerRecord65.checksum();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord65.value();
        java.lang.String str69 = serializableConsumerRecord65.toString();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord65.leaderEpoch();
        java.lang.Class<?> wildcardClass71 = intOptional70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.reflect.Type> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.reflect.Type>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 32, 35L, (java.io.Serializable) (-1), (java.lang.reflect.Type) wildcardClass71);
        java.lang.Class<?> wildcardClass73 = serializableConsumerRecord72.getClass();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.partition();
        int int14 = serializableConsumerRecord12.partition();
        long long15 = serializableConsumerRecord12.offset();
        java.lang.String str16 = serializableConsumerRecord12.toString();
        long long17 = serializableConsumerRecord12.checksum();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        java.io.Serializable serializable41 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord39.timestampType();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord39.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType53, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass43, timestampType53);
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType64, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence71 = serializableConsumerRecord70.value();
        java.io.Serializable serializable72 = serializableConsumerRecord70.key();
        org.apache.kafka.common.record.TimestampType timestampType73 = serializableConsumerRecord70.timestampType();
        java.lang.Class<?> wildcardClass74 = serializableConsumerRecord70.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType53, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass74, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType77 = serializableConsumerRecord76.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType18, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType77, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 1, (long) 100, (java.io.Serializable) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType82 = serializableConsumerRecord81.timestampType();
        java.util.Optional<java.lang.Integer> intOptional83 = serializableConsumerRecord81.leaderEpoch();
        java.lang.String str84 = serializableConsumerRecord81.topic();
        java.io.Serializable serializable85 = serializableConsumerRecord81.key();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertEquals("'" + serializable41 + "' != '" + (short) 1 + "'", serializable41, (short) 1);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (short) 1 + "'", serializable72, (short) 1);
        org.junit.Assert.assertNull(timestampType73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + timestampType77 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType77.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType82 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType82.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str84, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable85 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", serializable85, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        org.apache.kafka.common.record.TimestampType timestampType15 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType15, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence22 = serializableConsumerRecord21.value();
        java.io.Serializable serializable23 = serializableConsumerRecord21.key();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord21.timestampType();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType35, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass25, timestampType35);
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType46, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence53 = serializableConsumerRecord52.value();
        java.io.Serializable serializable54 = serializableConsumerRecord52.key();
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord52.timestampType();
        java.lang.Class<?> wildcardClass56 = serializableConsumerRecord52.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType35, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass56, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType67 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType67, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable74 = serializableConsumerRecord73.key();
        java.lang.CharSequence charSequence75 = serializableConsumerRecord73.value();
        java.io.Serializable serializable76 = serializableConsumerRecord73.key();
        java.lang.String str77 = serializableConsumerRecord73.toString();
        java.lang.Class<?> wildcardClass78 = serializableConsumerRecord73.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, 52L, 35L, timestampType59, 100L, (int) (short) 100, 10, (java.io.Serializable) wildcardClass78, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence22 + "' != '" + "hi!" + "'", charSequence22, "hi!");
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "hi!" + "'", charSequence53, "hi!");
        org.junit.Assert.assertEquals("'" + serializable54 + "' != '" + (short) 1 + "'", serializable54, (short) 1);
        org.junit.Assert.assertNull(timestampType55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable74 + "' != '" + (short) 1 + "'", serializable74, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + serializable76 + "' != '" + (short) 1 + "'", serializable76, (short) 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str77, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        int int16 = serializableConsumerRecord14.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord14.leaderEpoch();
        java.io.Serializable serializable18 = serializableConsumerRecord14.key();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord14.leaderEpoch();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", (int) (byte) -1, (long) (byte) 1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers20);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        long long20 = serializableConsumerRecord13.offset();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) (-1), (java.io.Serializable) wildcardClass21, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        int int95 = serializableConsumerRecord92.serializedKeySize();
        long long96 = serializableConsumerRecord92.timestamp();
        java.lang.CharSequence charSequence97 = serializableConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence97 + "' != '" + "hi!" + "'", charSequence97, "hi!");
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int18 = serializableConsumerRecord17.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int29 = serializableConsumerRecord28.partition();
        java.lang.String str30 = serializableConsumerRecord28.topic();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) 10, (long) (short) 10, timestampType19, 1L, 100, (int) (byte) 0, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord47.headers();
        java.lang.String str50 = serializableConsumerRecord47.toString();
        int int51 = serializableConsumerRecord47.serializedValueSize();
        long long52 = serializableConsumerRecord47.checksum();
        int int53 = serializableConsumerRecord47.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str62 = serializableConsumerRecord61.topic();
        int int63 = serializableConsumerRecord61.partition();
        java.io.Serializable serializable64 = serializableConsumerRecord61.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord61.timestampType();
        java.io.Serializable serializable66 = serializableConsumerRecord61.key();
        long long67 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", 0, 35L, 0L, timestampType31, (java.lang.Long) 97L, (int) 'a', (int) (byte) 0, intOptional54, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", headers68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) (short) -1, (long) (short) 1, timestampType31, (long) '#', 0, 100, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str30, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str50, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(intOptional54);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (-1.0d) + "'", serializable64, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType65 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType65.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (-1.0d) + "'", serializable66, (-1.0d));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(headers68);
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        long long24 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + (short) 1 + "'", serializable23, (short) 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        java.io.Serializable serializable93 = serializableConsumerRecord92.key();
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord92.headers();
        java.lang.String str96 = serializableConsumerRecord92.topic();
        long long97 = serializableConsumerRecord92.timestamp();
        java.lang.String str98 = serializableConsumerRecord92.topic();
        long long99 = serializableConsumerRecord92.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertEquals("'" + serializable93 + "' != '" + 0 + "'", serializable93, 0);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + 1L + "'", long99 == 1L);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence7 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + charSequence7 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence7, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertNotNull(headers9);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        long long16 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType29, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers47);
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType66, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers84);
        java.util.Optional<java.lang.Integer> intOptional86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType21, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47, headers61, headers84, intOptional86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int94 = serializableConsumerRecord93.partition();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 10, (long) 'a', (long) 100, timestampType11, (java.lang.Long) 100L, (int) (byte) 10, (int) (byte) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", headers61, intOptional95);
        long long97 = serializableConsumerRecord96.checksum();
        java.lang.String str98 = serializableConsumerRecord96.topic();
        int int99 = serializableConsumerRecord96.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 100L + "'", long97 == 100L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "hi!" + "'", str98, "hi!");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 100 + "'", int99 == 100);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType64 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType64, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional82);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType64, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType21, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, 52L, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        long long94 = serializableConsumerRecord93.offset();
        int int95 = serializableConsumerRecord93.serializedValueSize();
        int int96 = serializableConsumerRecord93.serializedValueSize();
        org.apache.kafka.common.header.Headers headers97 = serializableConsumerRecord93.headers();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertTrue("'" + timestampType64 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType64.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 52L + "'", long94 == 52L);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(headers97);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.checksum();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord13.headers();
        java.io.Serializable serializable89 = serializableConsumerRecord13.key();
        java.lang.CharSequence charSequence90 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord13.headers();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + (short) 1 + "'", serializable89, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "hi!" + "'", charSequence90, "hi!");
        org.junit.Assert.assertNotNull(headers91);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        int int60 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord57.timestampType();
        int int62 = serializableConsumerRecord57.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(headers20);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord9.key();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType21, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int28 = serializableConsumerRecord27.serializedValueSize();
        int int29 = serializableConsumerRecord27.serializedKeySize();
        long long30 = serializableConsumerRecord27.checksum();
        int int31 = serializableConsumerRecord27.partition();
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord27.getClass();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        int int46 = serializableConsumerRecord44.serializedKeySize();
        long long47 = serializableConsumerRecord44.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord44.headers();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType54, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence61 = serializableConsumerRecord60.value();
        org.apache.kafka.common.header.Headers headers62 = serializableConsumerRecord60.headers();
        java.lang.String str63 = serializableConsumerRecord60.toString();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord60.value();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord60.timestampType();
        int int66 = serializableConsumerRecord60.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord60.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 0, (long) 97, 0L, timestampType13, (java.lang.Long) 35L, (int) (short) -1, (int) (byte) -1, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", headers49, intOptional67);
        java.io.Serializable serializable69 = serializableConsumerRecord68.key();
        long long70 = serializableConsumerRecord68.offset();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(timestampType48);
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "hi!" + "'", charSequence61, "hi!");
        org.junit.Assert.assertNotNull(headers62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertNotNull(serializable69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 97L + "'", long70 == 97L);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        java.io.Serializable serializable44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType21, (long) 0, 0, 0, serializable44, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass47 = timestampType21.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord49.timestampType();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord49.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable62 = serializableConsumerRecord61.key();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType69 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType69, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int76 = serializableConsumerRecord75.partition();
        java.util.Optional<java.lang.Integer> intOptional77 = serializableConsumerRecord75.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord75.leaderEpoch();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord75.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)", (int) (byte) 10, (long) (byte) 0, 10L, timestampType52, (java.lang.Long) 52L, 0, (int) (short) 0, (java.io.Serializable) timestampType63, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers79);
        java.io.Serializable serializable81 = serializableConsumerRecord80.key();
        int int82 = serializableConsumerRecord80.partition();
        int int83 = serializableConsumerRecord80.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord80.leaderEpoch();
        int int85 = serializableConsumerRecord80.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable62 + "' != '" + 100.0f + "'", serializable62, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType63 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType63.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intOptional77);
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + serializable81 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable81.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.partition();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord23.headers();
        int int26 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNull(timestampType24);
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        int int19 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) -1, (long) '#', timestampType22, (long) 10, (-1), (int) (short) 0, (java.io.Serializable) 100.0d, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord40.headers();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType59, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) (byte) 10, (long) 1, timestampType22, (long) (-1), 0, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.io.Serializable) timestampType59);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (byte) -1, (long) (short) 0, (long) 10, timestampType59, 97L, 52, (int) (short) 1, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.header.Headers headers73 = serializableConsumerRecord72.headers();
        long long74 = serializableConsumerRecord72.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + 1.0f + "'", serializable43, 1.0f);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord67.headers();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("hi!", (int) 'a', 0L, serializableConsumerRecord67, (java.lang.Comparable<java.lang.String>) "");
        java.io.Serializable serializable72 = serializableConsumerRecord67.key();
        java.lang.String str73 = serializableConsumerRecord67.toString();
        java.lang.String str74 = serializableConsumerRecord67.toString();
        java.lang.String str75 = serializableConsumerRecord67.toString();
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + serializable72 + "' != '" + (byte) 10 + "'", serializable72, (byte) 10);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str73, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str74, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str75, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.String str19 = serializableConsumerRecord13.topic();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord41.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType25, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers43);
        long long45 = serializableConsumerRecord44.timestamp();
        long long46 = serializableConsumerRecord44.timestamp();
        long long47 = serializableConsumerRecord44.offset();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord44.value();
        int int49 = serializableConsumerRecord44.serializedKeySize();
        java.io.Serializable serializable50 = serializableConsumerRecord44.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord44.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord44.timestampType();
        java.io.Serializable serializable53 = serializableConsumerRecord44.key();
        java.util.Optional<java.lang.Integer> intOptional54 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", 100, (long) '#', serializableConsumerRecord13, intOptional54);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + 10 + "'", serializable50, 10);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNull(timestampType52);
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + 10 + "'", serializable53, 10);
        org.junit.Assert.assertNotNull(intOptional54);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', 100L, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        long long67 = serializableConsumerRecord64.offset();
        java.util.Optional<java.lang.Integer> intOptional68 = serializableConsumerRecord64.leaderEpoch();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord64.value();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord64.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 100L + "'", long67 == 100L);
        org.junit.Assert.assertNotNull(intOptional68);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", charSequence69, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intOptional71);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        int int7 = serializableConsumerRecord5.serializedKeySize();
        long long8 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable20 = serializableConsumerRecord19.key();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord19.headers();
        java.lang.String str22 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        long long46 = serializableConsumerRecord43.offset();
        java.lang.Class<?> wildcardClass47 = serializableConsumerRecord43.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (short) -1, (long) (byte) 100, (java.io.Serializable) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence> annotatedElementConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, (long) 1, (java.lang.reflect.AnnotatedElement) wildcardClass47, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (short) 0, 97L, (long) (short) -1, timestampType23, 97L, (int) (byte) 1, (int) (byte) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '4', (long) '4', (java.io.Serializable) timestampType23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType64 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType64, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int71 = serializableConsumerRecord70.serializedValueSize();
        int int72 = serializableConsumerRecord70.serializedKeySize();
        long long73 = serializableConsumerRecord70.timestamp();
        java.lang.String str74 = serializableConsumerRecord70.toString();
        long long75 = serializableConsumerRecord70.offset();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord70.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 97, (long) '#', (long) 35, timestampType23, (long) (-1), 0, (int) (byte) -1, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers76);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        long long84 = serializableConsumerRecord83.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord83.timestampType();
        long long86 = serializableConsumerRecord83.offset();
        java.util.Optional<java.lang.Integer> intOptional87 = serializableConsumerRecord83.leaderEpoch();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord83.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 100, (long) 97, timestampType23, headers88);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + 100.0f + "'", serializable20, 100.0f);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str22, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str74, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1L + "'", long75 == 1L);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertNotNull(intOptional87);
        org.junit.Assert.assertNotNull(headers88);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.offset();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        int int8 = serializableConsumerRecord5.partition();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        java.lang.String str11 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable9, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str11, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass7 = timestampType6.getClass();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        java.io.Serializable serializable17 = serializableConsumerRecord13.key();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        int int19 = serializableConsumerRecord13.partition();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord13.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>> objConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (short) 1, (long) (byte) 0, (java.lang.Object) charSequence20, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.partition();
        java.lang.String str21 = serializableConsumerRecord19.topic();
        java.lang.String str22 = serializableConsumerRecord19.toString();
        long long23 = serializableConsumerRecord19.checksum();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) (byte) 1, 32L, (java.io.Serializable) timestampType24, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        int int40 = serializableConsumerRecord38.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType46, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int53 = serializableConsumerRecord52.serializedValueSize();
        int int54 = serializableConsumerRecord52.serializedValueSize();
        long long55 = serializableConsumerRecord52.offset();
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord52.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType41, serializableConsumerRecord52);
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord52.getClass();
        java.lang.Comparable<java.lang.String> strComparable59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) (byte) -1, 52L, timestampType24, (long) 1, (int) (byte) 1, (int) (short) 0, (java.io.Serializable) wildcardClass58, strComparable59);
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        int int76 = serializableConsumerRecord74.serializedKeySize();
        long long77 = serializableConsumerRecord74.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord74.timestampType();
        long long79 = serializableConsumerRecord74.timestamp();
        java.lang.Class<?> wildcardClass80 = serializableConsumerRecord74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, 1L, (long) (short) 10, timestampType24, 0L, (int) (short) 1, (int) (short) 100, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 100, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', (long) 100, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord84.timestampType();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str22, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNull(timestampType78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + timestampType85 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType85.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        long long8 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        long long11 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str10, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.partition();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        int int96 = serializableConsumerRecord92.serializedKeySize();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional98 = serializableConsumerRecord92.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType99 = serializableConsumerRecord92.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertNotNull(intOptional98);
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        long long10 = serializableConsumerRecord5.timestamp();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord5.leaderEpoch();
        long long13 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "hi!" + "'", charSequence9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(intOptional19);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        long long7 = serializableConsumerRecord5.offset();
        long long8 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        java.lang.String str94 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str94, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.io.Serializable serializable15 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        long long17 = serializableConsumerRecord12.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, (long) 100, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        long long40 = serializableConsumerRecord37.offset();
        int int41 = serializableConsumerRecord37.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord37.timestampType();
        int int43 = serializableConsumerRecord37.serializedKeySize();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord37.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) (byte) 10, (java.io.Serializable) wildcardClass44, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )");
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        java.lang.Class<?> wildcardClass63 = serializableConsumerRecord61.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass63, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        long long67 = serializableConsumerRecord65.timestamp();
        long long68 = serializableConsumerRecord65.timestamp();
        long long69 = serializableConsumerRecord65.checksum();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord65.headers();
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        java.io.Serializable serializable83 = serializableConsumerRecord81.key();
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord81.timestampType();
        long long85 = serializableConsumerRecord81.offset();
        java.lang.String str86 = serializableConsumerRecord81.topic();
        long long87 = serializableConsumerRecord81.checksum();
        org.apache.kafka.common.record.TimestampType timestampType88 = serializableConsumerRecord81.timestampType();
        java.util.Optional<java.lang.Integer> intOptional89 = serializableConsumerRecord81.leaderEpoch();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord81.headers();
        java.io.Serializable serializable91 = serializableConsumerRecord81.key();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord81.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 32, 52L, (long) 1, timestampType18, (java.lang.Long) 52L, 52, (int) (short) 0, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", headers70, intOptional92);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 1.0f + "'", serializable15, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "" + "'", charSequence66, "");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNull(timestampType84);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNull(timestampType88);
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertEquals("'" + serializable91 + "' != '" + (short) 1 + "'", serializable91, (short) 1);
        org.junit.Assert.assertNotNull(intOptional92);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        int int18 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        java.io.Serializable serializable20 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType27, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int34 = serializableConsumerRecord33.serializedValueSize();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        int int36 = serializableConsumerRecord33.serializedKeySize();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord33.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int44 = serializableConsumerRecord43.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord43.leaderEpoch();
        long long46 = serializableConsumerRecord43.checksum();
        int int47 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 10, (long) 32, (long) 'a', timestampType7, (java.lang.Long) 0L, (int) (byte) 1, (int) ' ', (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", headers37, intOptional48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 52, (long) 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers37, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (-1.0d) + "'", serializable20, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intOptional48);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNull(timestampType17);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.String str59 = serializableConsumerRecord57.topic();
        java.lang.CharSequence charSequence60 = serializableConsumerRecord57.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        int int68 = serializableConsumerRecord66.partition();
        java.lang.String str69 = serializableConsumerRecord66.topic();
        java.lang.String str70 = serializableConsumerRecord66.topic();
        int int71 = serializableConsumerRecord66.serializedValueSize();
        int int72 = serializableConsumerRecord66.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", (int) (byte) -1, (long) 'a', (long) (short) 10, timestampType18, (long) 'a', 10, (int) (short) 100, serializableConsumerRecord57, serializableConsumerRecord66);
        int int74 = serializableConsumerRecord66.serializedKeySize();
        int int75 = serializableConsumerRecord66.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord5.headers();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(headers10);
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        java.lang.CharSequence charSequence14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence14);
        java.io.Serializable serializable16 = serializableConsumerRecord15.key();
        int int17 = serializableConsumerRecord15.partition();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord15.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence26);
        java.io.Serializable serializable28 = serializableConsumerRecord27.key();
        int int29 = serializableConsumerRecord27.serializedValueSize();
        int int30 = serializableConsumerRecord27.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType36, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int43 = serializableConsumerRecord42.partition();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord42.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, 97L, 52L, timestampType18, (java.lang.Long) (-1L), 1, 35, serializableConsumerRecord27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers46);
        org.apache.kafka.common.header.Headers headers48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers> timestampTypeConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 0, 97L, timestampType18, headers48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", 1, (long) (byte) -1, (java.io.Serializable) 97L, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        int int52 = serializableConsumerRecord51.partition();
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable28, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType28, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional46);
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        int int61 = serializableConsumerRecord59.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord59.leaderEpoch();
        java.io.Serializable serializable63 = serializableConsumerRecord59.key();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType14, (java.lang.Long) 10L, (int) '#', 35, timestampType28, "hi!", headers64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord74.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '#', (long) 100, (long) 52, timestampType28, (long) 1, 1, (int) (byte) 100, (java.io.Serializable) timestampType75, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long78 = serializableConsumerRecord77.timestamp();
        int int79 = serializableConsumerRecord77.partition();
        int int80 = serializableConsumerRecord77.partition();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertEquals("'" + serializable63 + "' != '" + (short) 1 + "'", serializable63, (short) 1);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 52L + "'", long78 == 52L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        int int60 = serializableConsumerRecord57.serializedValueSize();
        long long61 = serializableConsumerRecord57.timestamp();
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord57.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        int int19 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord17.headers();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (short) -1, (long) '#', timestampType22, (long) 10, (-1), (int) (short) 0, (java.io.Serializable) 100.0d, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord40.timestampType();
        java.io.Serializable serializable43 = serializableConsumerRecord40.key();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord40.headers();
        int int45 = serializableConsumerRecord40.serializedValueSize();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 32, (long) 32, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord58.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType59, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 52, (long) (byte) 10, (long) 1, timestampType22, (long) (-1), 0, (-1), (java.lang.reflect.GenericDeclaration) wildcardClass46, (java.io.Serializable) timestampType59);
        org.apache.kafka.common.record.TimestampType timestampType77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType77, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence84 = serializableConsumerRecord83.value();
        int int85 = serializableConsumerRecord83.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional86 = serializableConsumerRecord83.leaderEpoch();
        java.io.Serializable serializable87 = serializableConsumerRecord83.key();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord83.leaderEpoch();
        java.lang.String str89 = serializableConsumerRecord83.topic();
        long long90 = serializableConsumerRecord83.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord83.timestampType();
        long long92 = serializableConsumerRecord83.checksum();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord83.headers();
        java.io.Serializable serializable94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.io.Serializable> headersConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.io.Serializable>("", (int) '4', 1L, headers93, serializable94);
        java.lang.Class<?> wildcardClass96 = headers93.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) ' ', timestampType22, (long) 0, 0, (int) 'a', (java.io.Serializable) wildcardClass96, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        java.lang.Class<?> wildcardClass99 = timestampType22.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + 1.0f + "'", serializable43, 1.0f);
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence84 + "' != '" + "hi!" + "'", charSequence84, "hi!");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 52 + "'", int85 == 52);
        org.junit.Assert.assertNotNull(intOptional86);
        org.junit.Assert.assertEquals("'" + serializable87 + "' != '" + (short) 1 + "'", serializable87, (short) 1);
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNull(timestampType91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-1L) + "'", long92 == (-1L));
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        int int20 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str23 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        long long19 = serializableConsumerRecord10.offset();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str22 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        long long63 = serializableConsumerRecord59.offset();
        java.lang.String str64 = serializableConsumerRecord59.topic();
        long long65 = serializableConsumerRecord59.timestamp();
        java.lang.String str66 = serializableConsumerRecord59.topic();
        int int67 = serializableConsumerRecord59.partition();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord59.headers();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord59.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 10L + "'", long65 == 10L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(headers70);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.String str46 = serializableConsumerRecord45.toString();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord45.leaderEpoch();
        int int48 = serializableConsumerRecord45.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertNull(timestampType15);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers85 = serializableConsumerRecord84.headers();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        long long87 = serializableConsumerRecord84.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 10L + "'", long87 == 10L);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        long long27 = serializableConsumerRecord23.timestamp();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord23.value();
        java.lang.String str29 = serializableConsumerRecord23.topic();
        long long30 = serializableConsumerRecord23.checksum();
        java.lang.String str31 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.header.Headers headers32 = serializableConsumerRecord23.headers();
        java.io.Serializable serializable33 = serializableConsumerRecord23.key();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNotNull(headers32);
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + 10 + "'", serializable33, 10);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable23 = serializableConsumerRecord10.key();
        int int24 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str21, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertEquals("'" + serializable23 + "' != '" + 10.0f + "'", serializable23, 10.0f);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional9 = serializableConsumerRecord5.leaderEpoch();
        long long10 = serializableConsumerRecord5.offset();
        int int11 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intOptional9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.partition();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        int int87 = serializableConsumerRecord84.partition();
        int int88 = serializableConsumerRecord84.serializedKeySize();
        int int89 = serializableConsumerRecord84.partition();
        java.lang.String str90 = serializableConsumerRecord84.topic();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str86, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str90, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord8.timestampType();
        int int10 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType16, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int23 = serializableConsumerRecord22.serializedValueSize();
        int int24 = serializableConsumerRecord22.serializedValueSize();
        long long25 = serializableConsumerRecord22.offset();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord22.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType11, serializableConsumerRecord22);
        int int28 = serializableConsumerRecord22.serializedKeySize();
        int int29 = serializableConsumerRecord22.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 0, 0L, serializable3, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intOptional17);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord13.headers();
        java.io.Serializable serializable89 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord13.headers();
        int int92 = serializableConsumerRecord13.serializedKeySize();
        int int93 = serializableConsumerRecord13.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + serializable89 + "' != '" + (short) 1 + "'", serializable89, (short) 1);
        org.junit.Assert.assertNull(timestampType90);
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable27 = serializableConsumerRecord26.key();
        long long28 = serializableConsumerRecord26.checksum();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord26.value();
        int int30 = serializableConsumerRecord26.partition();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.io.Serializable serializable43 = serializableConsumerRecord41.key();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord41.timestampType();
        long long45 = serializableConsumerRecord41.offset();
        long long46 = serializableConsumerRecord41.checksum();
        long long47 = serializableConsumerRecord41.checksum();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) '4', (long) (byte) 1, 32L, timestampType12, (long) 0, (int) (byte) 1, (int) (byte) 10, (java.lang.Object) int30, (java.lang.Object) serializableConsumerRecord41);
        java.io.Serializable serializable49 = serializableConsumerRecord41.key();
        java.lang.CharSequence charSequence50 = serializableConsumerRecord41.value();
        java.io.Serializable serializable51 = serializableConsumerRecord41.key();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + (short) 1 + "'", serializable27, (short) 1);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNull(timestampType44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence50 + "' != '" + "hi!" + "'", charSequence50, "hi!");
        org.junit.Assert.assertEquals("'" + serializable51 + "' != '" + (short) 1 + "'", serializable51, (short) 1);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType10, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.serializedValueSize();
        int int18 = serializableConsumerRecord16.serializedValueSize();
        long long19 = serializableConsumerRecord16.checksum();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 97, (long) 52, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", 97, 52L, (java.io.Serializable) 97, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        int int25 = serializableConsumerRecord24.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.timestamp();
        long long23 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', 0L, (long) '4', timestampType25, (long) (byte) 10, (int) (short) 0, 100, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int78 = serializableConsumerRecord77.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType79 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) (byte) 1, 1L, (java.io.Serializable) timestampType79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + timestampType79 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType79.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        int int96 = serializableConsumerRecord92.serializedKeySize();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        int int98 = serializableConsumerRecord92.partition();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord50.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        int int68 = serializableConsumerRecord66.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType51, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional69, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass73 = intOptionalConsumerRecord72.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("", (int) (byte) 10, (long) 0, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.reflect.AnnotatedElement) wildcardClass73);
        org.apache.kafka.common.record.TimestampType timestampType80 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType80, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long87 = serializableConsumerRecord86.timestamp();
        int int88 = serializableConsumerRecord86.serializedKeySize();
        long long89 = serializableConsumerRecord86.timestamp();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord86.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable> genericDeclarationConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.io.Serializable>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (short) 0, (long) (short) 100, timestampType28, (java.lang.Long) 0L, (int) (short) -1, (int) (byte) -1, (java.lang.reflect.GenericDeclaration) wildcardClass73, (java.io.Serializable) (short) 0, headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, 0L, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional94 = serializableConsumerRecord93.leaderEpoch();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord93.value();
        java.io.Serializable serializable96 = serializableConsumerRecord93.key();
        org.apache.kafka.common.record.TimestampType timestampType97 = serializableConsumerRecord93.timestampType();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 52 + "'", int88 == 52);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-1L) + "'", long89 == (-1L));
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional94);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence95, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable96 + "' != '" + (short) 0 + "'", serializable96, (short) 0);
        org.junit.Assert.assertTrue("'" + timestampType97 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType97.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType39, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType39, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType74, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence81 = serializableConsumerRecord80.value();
        java.io.Serializable serializable82 = serializableConsumerRecord80.key();
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord80.timestampType();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord80.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType39, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, (long) (short) 10, 97L, timestampType15, (java.lang.Long) 0L, (int) ' ', (int) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) (byte) 0, (long) ' ', (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers84);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
        org.junit.Assert.assertEquals("'" + serializable82 + "' != '" + (short) 1 + "'", serializable82, (short) 1);
        org.junit.Assert.assertNull(timestampType83);
        org.junit.Assert.assertNotNull(headers84);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.io.Serializable serializable93 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) 0, (long) (short) 100, timestampType17, (long) (-1), (-1), 52, serializable93, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence96 = serializableConsumerRecord95.value();
        long long97 = serializableConsumerRecord95.offset();
        java.lang.String str98 = serializableConsumerRecord95.topic();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "hi!" + "'", charSequence96, "hi!");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType17, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord23.timestampType();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType37 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType37, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass27, timestampType37);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int43 = serializableConsumerRecord42.serializedKeySize();
        java.lang.String str44 = serializableConsumerRecord42.topic();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord42.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", 0, (long) (byte) 100, (java.io.Serializable) wildcardClass46, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord48.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        long long67 = serializableConsumerRecord63.offset();
        java.lang.String str68 = serializableConsumerRecord63.topic();
        long long69 = serializableConsumerRecord63.offset();
        int int70 = serializableConsumerRecord63.partition();
        int int71 = serializableConsumerRecord63.serializedValueSize();
        long long72 = serializableConsumerRecord63.checksum();
        java.lang.Class<?> wildcardClass73 = serializableConsumerRecord63.getClass();
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        int int87 = serializableConsumerRecord85.serializedKeySize();
        long long88 = serializableConsumerRecord85.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord85.timestampType();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord85.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) (byte) 100, (long) ' ', timestampType49, (java.lang.Long) 35L, 100, (int) (byte) 1, (java.io.Serializable) wildcardClass73, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers90, intOptional91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = serializableConsumerRecord92.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (short) 1 + "'", serializable25, (short) 1);
        org.junit.Assert.assertNull(timestampType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + timestampType37 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType37.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str44, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable45, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertNotNull(headers90);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int24 = serializableConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        long long44 = serializableConsumerRecord40.offset();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord40.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers45, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType14, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType25, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers45);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) (byte) -1, 97L, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(headers45);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord28.timestampType();
        int int30 = serializableConsumerRecord28.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) '#', (long) 10, timestampType19, (long) (short) 100, (int) (byte) 1, 1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str43 = serializableConsumerRecord42.topic();
        int int44 = serializableConsumerRecord42.partition();
        java.io.Serializable serializable45 = serializableConsumerRecord42.key();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        java.lang.CharSequence charSequence47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) ' ', (long) ' ', (long) 1, timestampType19, 32L, 97, (-1), (java.io.Serializable) timestampType46, charSequence47);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord61.timestampType();
        int int63 = serializableConsumerRecord61.partition();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord61.headers();
        long long65 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord61.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType74 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType74, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence81 = serializableConsumerRecord80.value();
        int int82 = serializableConsumerRecord80.serializedKeySize();
        java.lang.Class<?> wildcardClass83 = serializableConsumerRecord80.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", 100, (long) (short) 100, (long) (byte) 100, timestampType66, (long) 10, (int) (short) 100, (int) (short) 0, (java.io.Serializable) wildcardClass83, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) (-1), (long) (short) 0, timestampType46, (long) 0, (int) ' ', 10, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord87.leaderEpoch();
        java.lang.Class<?> wildcardClass89 = serializableConsumerRecord87.getClass();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType29 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType29.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + serializable45 + "' != '" + (-1.0d) + "'", serializable45, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 52 + "'", int82 == 52);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        java.io.Serializable serializable48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType25, (long) 0, 0, 0, serializable48, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord65.value();
        long long68 = serializableConsumerRecord65.timestamp();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType25, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType25, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass77 = serializableConsumerRecord76.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, 35L, (java.io.Serializable) wildcardClass77, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long80 = serializableConsumerRecord79.offset();
        long long81 = serializableConsumerRecord79.offset();
        int int82 = serializableConsumerRecord79.serializedKeySize();
        long long83 = serializableConsumerRecord79.checksum();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 35L + "'", long80 == 35L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 35L + "'", long81 == 35L);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        int int14 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.offset();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        int int15 = serializableConsumerRecord13.serializedKeySize();
        long long16 = serializableConsumerRecord13.offset();
        int int17 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord13.timestampType();
        int int19 = serializableConsumerRecord13.serializedKeySize();
        java.io.Serializable serializable20 = serializableConsumerRecord13.key();
        java.lang.Class<?> wildcardClass21 = serializable20.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        java.io.Serializable serializable34 = serializableConsumerRecord32.key();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord32.timestampType();
        long long36 = serializableConsumerRecord32.offset();
        java.lang.String str37 = serializableConsumerRecord32.topic();
        java.lang.CharSequence charSequence38 = serializableConsumerRecord32.value();
        int int39 = serializableConsumerRecord32.serializedKeySize();
        long long40 = serializableConsumerRecord32.offset();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> genericDeclarationConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, 32L, (java.lang.reflect.GenericDeclaration) wildcardClass21, serializableConsumerRecord32);
        java.lang.Class<?> wildcardClass42 = genericDeclarationConsumerRecord41.getClass();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertNull(timestampType35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.Class<?> wildcardClass18 = headers17.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertNull(timestampType18);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType13, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = serializableConsumerRecord19.value();
        java.io.Serializable serializable21 = serializableConsumerRecord19.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord19.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType33, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass23, timestampType33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 52L, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        java.lang.CharSequence charSequence39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, 0L, (java.io.Serializable) timestampType33, charSequence39);
        long long41 = serializableConsumerRecord40.timestamp();
        int int42 = serializableConsumerRecord40.serializedValueSize();
        java.lang.String str43 = serializableConsumerRecord40.topic();
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", str43, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        int int12 = serializableConsumerRecord5.partition();
        long long13 = serializableConsumerRecord5.offset();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        org.apache.kafka.common.record.TimestampType timestampType13 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType13, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence20 = serializableConsumerRecord19.value();
        java.io.Serializable serializable21 = serializableConsumerRecord19.key();
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord19.timestampType();
        java.lang.Class<?> wildcardClass23 = serializableConsumerRecord19.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType33, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass23, timestampType33);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 52L, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) '#', (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord40.timestampType();
        long long42 = serializableConsumerRecord40.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertNull(timestampType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.String str12 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str12, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.lang.String str69 = serializableConsumerRecord67.topic();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) '4', (long) '4', (java.io.Serializable) timestampType70, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass16 = timestampType15.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.io.Serializable serializable25 = serializableConsumerRecord23.key();
        long long26 = serializableConsumerRecord23.checksum();
        int int27 = serializableConsumerRecord23.serializedValueSize();
        long long28 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.lang.CharSequence charSequence20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType15, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence20);
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        int int40 = serializableConsumerRecord38.serializedKeySize();
        long long41 = serializableConsumerRecord38.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord38.headers();
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable55 = serializableConsumerRecord54.key();
        long long56 = serializableConsumerRecord54.checksum();
        java.util.Optional<java.lang.Integer> intOptional57 = serializableConsumerRecord54.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType22, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers43, intOptional57);
        long long59 = serializableConsumerRecord58.offset();
        long long60 = serializableConsumerRecord58.checksum();
        long long61 = serializableConsumerRecord58.offset();
        int int62 = serializableConsumerRecord58.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(intOptional57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType21, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord58.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType21, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass51, (java.lang.CharSequence) "hi!", headers59);
        int int61 = serializableConsumerRecord60.partition();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord60.timestampType();
        int int63 = serializableConsumerRecord60.serializedValueSize();
        int int64 = serializableConsumerRecord60.serializedKeySize();
        long long65 = serializableConsumerRecord60.checksum();
        java.io.Serializable serializable66 = serializableConsumerRecord60.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (int) (short) -1, (long) (short) 0, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertTrue("'" + timestampType62 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType62.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertNotNull(serializable66);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (byte) -1, (long) 100, (java.io.Serializable) timestampType13, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable25 = serializableConsumerRecord24.key();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord24.headers();
        java.lang.String str27 = serializableConsumerRecord24.topic();
        java.io.Serializable serializable28 = serializableConsumerRecord24.key();
        long long29 = serializableConsumerRecord24.checksum();
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord24.timestampType();
        java.lang.Class<?> wildcardClass31 = timestampType30.getClass();
        org.apache.kafka.common.header.Headers headers33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (byte) 10, (long) 'a', timestampType13, (java.lang.Long) 10L, 0, (-1), (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Headers cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + 100.0f + "'", serializable25, 100.0f);
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str27, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + 100.0f + "'", serializable28, 100.0f);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.String str21 = serializableConsumerRecord10.topic();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord13.headers();
        java.lang.Object obj19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)", (int) (byte) -1, (long) (byte) 0, (java.lang.Object) headers18, obj19);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        long long21 = serializableConsumerRecord17.offset();
        java.lang.Class<?> wildcardClass22 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type> charSequenceConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.reflect.Type>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, 52L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.reflect.Type) wildcardClass22);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) ' ', 35L, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        int int27 = serializableConsumerRecord25.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str29 = serializableConsumerRecord28.topic();
        int int30 = serializableConsumerRecord28.partition();
        java.lang.String str31 = serializableConsumerRecord28.topic();
        java.lang.String str32 = serializableConsumerRecord28.topic();
        int int33 = serializableConsumerRecord28.serializedValueSize();
        long long34 = serializableConsumerRecord28.timestamp();
        long long35 = serializableConsumerRecord28.checksum();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        java.io.Serializable serializable49 = serializableConsumerRecord47.key();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        long long51 = serializableConsumerRecord47.offset();
        java.lang.String str52 = serializableConsumerRecord47.topic();
        long long53 = serializableConsumerRecord47.offset();
        int int54 = serializableConsumerRecord47.partition();
        java.util.Optional<java.lang.Integer> intOptional55 = serializableConsumerRecord47.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>> genericDeclarationConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.GenericDeclaration, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)", (int) '#', 100L, 52L, timestampType19, (long) 32, (int) '4', 100, (java.lang.reflect.GenericDeclaration) wildcardClass36, intOptional55);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int66 = serializableConsumerRecord65.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType67 = serializableConsumerRecord65.timestampType();
        java.io.Serializable serializable68 = serializableConsumerRecord65.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord65.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord65.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str80 = serializableConsumerRecord79.topic();
        int int81 = serializableConsumerRecord79.serializedValueSize();
        java.lang.Class<?> wildcardClass82 = serializableConsumerRecord79.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) (short) 10, (java.io.Serializable) wildcardClass82, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 97, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.io.Serializable> headerIterableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.io.Serializable>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 1, (long) (short) -1, (long) '#', timestampType19, (long) 1, (int) (short) 0, 1, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers70, (java.io.Serializable) wildcardClass82);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNull(timestampType50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(intOptional55);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType67 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType67.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + 1.0f + "'", serializable68, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        int int18 = serializableConsumerRecord16.serializedKeySize();
        long long19 = serializableConsumerRecord16.offset();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, 100L, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers23 = serializableConsumerRecord22.headers();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) '#', (long) (short) 100, (java.io.Serializable) wildcardClass24, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        long long27 = serializableConsumerRecord26.offset();
        long long28 = serializableConsumerRecord26.checksum();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(headers23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L + "'", long27 == 100L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        long long17 = serializableConsumerRecord13.offset();
        java.lang.String str18 = serializableConsumerRecord13.topic();
        long long19 = serializableConsumerRecord13.checksum();
        long long20 = serializableConsumerRecord13.timestamp();
        long long21 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        org.apache.kafka.common.header.Headers headers34 = serializableConsumerRecord32.headers();
        org.apache.kafka.common.header.Headers headers35 = serializableConsumerRecord32.headers();
        java.io.Serializable serializable36 = serializableConsumerRecord32.key();
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>> objConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.util.Optional<java.lang.Integer>>("", 52, (long) (short) 1, (java.lang.Object) serializableConsumerRecord13, intOptional37);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertNotNull(headers34);
        org.junit.Assert.assertNotNull(headers35);
        org.junit.Assert.assertEquals("'" + serializable36 + "' != '" + (short) 1 + "'", serializable36, (short) 1);
        org.junit.Assert.assertNotNull(intOptional37);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        java.io.Serializable serializable49 = serializableConsumerRecord47.key();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        long long51 = serializableConsumerRecord47.offset();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers52, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType21, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        long long68 = serializableConsumerRecord66.offset();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord66.headers();
        long long70 = serializableConsumerRecord66.checksum();
        int int71 = serializableConsumerRecord66.partition();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType21, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.CharSequence charSequence75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (java.io.Serializable) wildcardClass72, charSequence75);
        java.lang.String str77 = serializableConsumerRecord76.toString();
        long long78 = serializableConsumerRecord76.timestamp();
        java.lang.CharSequence charSequence79 = serializableConsumerRecord76.value();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNull(timestampType50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)" + "'", str77, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-1L) + "'", long78 == (-1L));
        org.junit.Assert.assertNull(charSequence79);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        int int16 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType19, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence24);
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType39, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType26, (long) '#', 1, 0, (java.io.Serializable) timestampType39, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("hi!", (int) (byte) 0, (long) 1, (long) 1, timestampType39, 10L, (int) (byte) 0, (int) (short) -1, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", serializableConsumerRecord58);
        int int62 = serializableConsumerRecord58.partition();
        org.apache.kafka.common.record.TimestampType timestampType63 = serializableConsumerRecord58.timestampType();
        java.lang.String str64 = serializableConsumerRecord58.topic();
        int int65 = serializableConsumerRecord58.partition();
        java.io.Serializable serializable66 = serializableConsumerRecord58.key();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType39 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType39.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNull(timestampType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType23, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) 1, (long) 0, timestampType14, 10L, (int) (short) 100, (int) (short) 1, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord45.timestampType();
        int int47 = serializableConsumerRecord45.partition();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord45.headers();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord45.leaderEpoch();
        java.io.Serializable serializable50 = serializableConsumerRecord45.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType52 = serializableConsumerRecord45.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> strConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) 1, (long) 35, (long) 32, timestampType35, 10L, (int) '4', (int) (short) -1, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (byte) 1, 35L, (java.io.Serializable) 32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (-1.0d) + "'", serializable50, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType52 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType52.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        int int10 = serializableConsumerRecord5.serializedKeySize();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        java.lang.String str96 = serializableConsumerRecord92.toString();
        java.lang.String str97 = serializableConsumerRecord92.toString();
        int int98 = serializableConsumerRecord92.partition();
        org.apache.kafka.common.record.TimestampType timestampType99 = serializableConsumerRecord92.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str96, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str97, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.lang.String str22 = serializableConsumerRecord20.topic();
        java.lang.String str23 = serializableConsumerRecord20.toString();
        long long24 = serializableConsumerRecord20.checksum();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) 32, (java.io.Serializable) timestampType25, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int37 = serializableConsumerRecord36.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional38 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord44.headers();
        java.lang.Class<?> wildcardClass46 = serializableConsumerRecord44.getClass();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.io.Serializable serializable59 = serializableConsumerRecord57.key();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord57.timestampType();
        long long61 = serializableConsumerRecord57.offset();
        java.lang.String str62 = serializableConsumerRecord57.topic();
        long long63 = serializableConsumerRecord57.offset();
        int int64 = serializableConsumerRecord57.serializedValueSize();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement> serializableConsumerRecordConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement>("", (int) (byte) 0, (long) (byte) -1, (long) (short) 1, timestampType25, (java.lang.Long) 10L, (int) 'a', (-1), serializableConsumerRecord36, (java.lang.reflect.AnnotatedElement) wildcardClass46, headers66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType73, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int80 = serializableConsumerRecord79.partition();
        java.util.Optional<java.lang.Integer> intOptional81 = serializableConsumerRecord79.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>> typeConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 97, serialized key size = 100, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 10, (long) (-1), 100L, timestampType4, (java.lang.Long) 97L, (int) (short) 1, (int) '4', (java.lang.reflect.Type) wildcardClass46, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 97, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)))", headers83);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str22, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str23, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intOptional38);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertNull(timestampType60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertNotNull(headers66);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intOptional81);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertNotNull(headers83);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord23.timestampType();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        int int30 = serializableConsumerRecord23.partition();
        java.lang.String str31 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNull(timestampType28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str31, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.checksum();
        long long19 = serializableConsumerRecord10.checksum();
        long long20 = serializableConsumerRecord10.timestamp();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        java.lang.String str36 = serializableConsumerRecord34.topic();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord34.getClass();
        java.lang.CharSequence charSequence38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType18, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass37, charSequence38);
        java.util.Optional<java.lang.Integer> intOptional44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>> charSequenceConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.util.Optional<java.lang.Integer>>("hi!", (int) (byte) 10, (long) 'a', (long) (byte) 10, timestampType18, 0L, 52, (int) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", intOptional44);
        java.lang.Class<?> wildcardClass46 = timestampType18.getClass();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable21 = serializableConsumerRecord20.key();
        long long22 = serializableConsumerRecord20.checksum();
        java.lang.CharSequence charSequence23 = serializableConsumerRecord20.value();
        int int24 = serializableConsumerRecord20.partition();
        java.util.Optional<java.lang.Integer> intOptional25 = serializableConsumerRecord20.leaderEpoch();
        int int26 = serializableConsumerRecord20.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 0, (long) (byte) 10, serializableConsumerRecord20, timestampType33);
        java.lang.CharSequence charSequence35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) 'a', 0L, (java.io.Serializable) timestampType33, charSequence35);
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType44, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int51 = serializableConsumerRecord50.serializedValueSize();
        int int52 = serializableConsumerRecord50.serializedValueSize();
        long long53 = serializableConsumerRecord50.checksum();
        int int54 = serializableConsumerRecord50.serializedValueSize();
        long long55 = serializableConsumerRecord50.checksum();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord50.value();
        int int57 = serializableConsumerRecord50.partition();
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord50.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) ' ', 52L, (long) (byte) -1, timestampType33, (long) 52, (int) (byte) 1, (int) '4', (java.io.Serializable) wildcardClass58, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord60.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence23 + "' != '" + "hi!" + "'", charSequence23, "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(intOptional25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1L + "'", long55 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(intOptional61);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.lang.String str8 = serializableConsumerRecord5.toString();
        long long9 = serializableConsumerRecord5.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        long long11 = serializableConsumerRecord5.offset();
        long long12 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str8, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) -1, (java.io.Serializable) 0.0f, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str12 = serializableConsumerRecord11.topic();
        java.lang.Class<?> wildcardClass13 = serializableConsumerRecord11.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType31, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional49);
        java.io.Serializable serializable54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType31, (long) 0, 0, 0, serializable54, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass57 = timestampType31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass57, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type> annotatedElementConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.Type>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, 0L, (java.lang.reflect.AnnotatedElement) wildcardClass13, (java.lang.reflect.Type) wildcardClass57);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", 35, 0L, (java.io.Serializable) wildcardClass13, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int63 = serializableConsumerRecord62.partition();
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str12, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord15 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str16 = serializableConsumerRecord15.topic();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord15.timestampType();
        java.lang.CharSequence charSequence22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType17, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence22);
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord35.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        java.io.Serializable serializable55 = serializableConsumerRecord53.key();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord53.timestampType();
        long long57 = serializableConsumerRecord53.offset();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers58, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass61 = headerIterableConsumerRecord60.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord67.timestampType();
        int int69 = serializableConsumerRecord67.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord67.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 10, (long) (short) 1, (long) (byte) -1, timestampType36, (java.lang.Long) 32L, (int) (byte) 10, (int) 'a', (java.lang.reflect.Type) wildcardClass61, intOptional71, headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>> annotatedElementConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.Enum<org.apache.kafka.common.record.TimestampType>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 0L, (java.lang.reflect.AnnotatedElement) wildcardClass25, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType36);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("", 1, (-1L), timestampType36, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertEquals("'" + serializable55 + "' != '" + (short) 1 + "'", serializable55, (short) 1);
        org.junit.Assert.assertNull(timestampType56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNotNull(headers84);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(headers16);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNull(timestampType21);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.partition();
        int int15 = serializableConsumerRecord10.partition();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        int int32 = serializableConsumerRecord29.serializedKeySize();
        int int33 = serializableConsumerRecord29.partition();
        java.io.Serializable serializable34 = serializableConsumerRecord29.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType14, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) -1, (long) (short) 100, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int38 = serializableConsumerRecord37.serializedKeySize();
        int int39 = serializableConsumerRecord37.serializedValueSize();
        long long40 = serializableConsumerRecord37.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long9 = serializableConsumerRecord8.checksum();
        long long10 = serializableConsumerRecord8.checksum();
        long long11 = serializableConsumerRecord8.checksum();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (-1), (long) (short) 10, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord14.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord14.leaderEpoch();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord14.value();
        java.lang.Class<?> wildcardClass18 = serializableConsumerRecord14.getClass();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)" + "'", charSequence17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.partition();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord12.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord12.timestampType();
        int int16 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType17, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int24 = serializableConsumerRecord23.serializedKeySize();
        java.lang.Class<?> wildcardClass25 = serializableConsumerRecord23.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', (long) 0, (java.io.Serializable) wildcardClass25, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long28 = serializableConsumerRecord27.offset();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType> charSequenceConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (-1), (long) '4', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", timestampType11);
        java.lang.Class<?> wildcardClass13 = charSequenceConsumerRecord12.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        long long65 = serializableConsumerRecord64.offset();
        long long66 = serializableConsumerRecord64.offset();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord64.headers();
        long long68 = serializableConsumerRecord64.timestamp();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord64.leaderEpoch();
        java.lang.Class<?> wildcardClass70 = serializableConsumerRecord64.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int17 = serializableConsumerRecord16.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord16.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        int int20 = serializableConsumerRecord16.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 0, 52L, (long) (-1), timestampType21, (long) '4', 0, (-1), (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str40 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType41, (java.lang.CharSequence) "hi!");
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord43.leaderEpoch();
        java.io.Serializable serializable45 = serializableConsumerRecord43.key();
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType55, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence62 = serializableConsumerRecord61.value();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord61.headers();
        java.lang.String str64 = serializableConsumerRecord61.toString();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord61.value();
        long long66 = serializableConsumerRecord61.timestamp();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>> strComparableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("hi!", 1, (long) (short) 10, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 100, 52L, timestampType21, (java.lang.Long) 35L, (int) ' ', (int) (short) 0, serializable45, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 0, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord71.headers();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertTrue("'" + serializable45 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable45.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence62 + "' != '" + "hi!" + "'", charSequence62, "hi!");
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertNotNull(headers72);
        org.junit.Assert.assertTrue("'" + serializable73 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable73.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(headers21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertNotNull(headers24);
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        long long63 = serializableConsumerRecord62.offset();
        java.lang.String str64 = serializableConsumerRecord62.topic();
        long long65 = serializableConsumerRecord62.checksum();
        long long66 = serializableConsumerRecord62.offset();
        java.lang.String str67 = serializableConsumerRecord62.topic();
        java.lang.Class<?> wildcardClass68 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) '4', (java.io.Serializable) wildcardClass68, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord70.leaderEpoch();
        long long72 = serializableConsumerRecord70.offset();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L + "'", long63 == 100L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L + "'", long66 == 100L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str67, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 52L + "'", long72 == 52L);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        long long21 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        int int94 = serializableConsumerRecord92.partition();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        java.lang.String str96 = serializableConsumerRecord92.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str96, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        long long66 = serializableConsumerRecord64.checksum();
        int int67 = serializableConsumerRecord64.serializedValueSize();
        java.lang.String str68 = serializableConsumerRecord64.toString();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord64.headers();
        int int70 = serializableConsumerRecord64.serializedValueSize();
        java.lang.String str71 = serializableConsumerRecord64.toString();
        org.apache.kafka.common.header.Headers headers72 = serializableConsumerRecord64.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 32 + "'", int67 == 32);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str68, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 32 + "'", int70 == 32);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str71, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers72);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        int int94 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord88.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertNotNull(headers95);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType17, (long) 0, 0, 0, serializable40, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass43 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord45.timestampType();
        long long47 = serializableConsumerRecord45.offset();
        int int48 = serializableConsumerRecord45.partition();
        long long49 = serializableConsumerRecord45.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + timestampType46 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType46.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-1L) + "'", long49 == (-1L));
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        java.lang.CharSequence charSequence8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence8);
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord20.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        org.apache.kafka.common.header.Headers headers37 = serializableConsumerRecord35.headers();
        java.lang.String str38 = serializableConsumerRecord35.toString();
        int int39 = serializableConsumerRecord35.serializedValueSize();
        long long40 = serializableConsumerRecord35.checksum();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord35.headers();
        java.lang.reflect.Type type45 = null;
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType50, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        java.lang.CharSequence charSequence58 = serializableConsumerRecord56.value();
        long long59 = serializableConsumerRecord56.timestamp();
        long long60 = serializableConsumerRecord56.checksum();
        int int61 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional62 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 1, type45, intOptional62);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, 52L, 97L, timestampType11, (java.lang.Long) 0L, (int) ' ', (-1), (java.io.Serializable) timestampType23, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", headers41, intOptional62);
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord64.leaderEpoch();
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (byte) 10 + "'", serializable10, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + timestampType23 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType23.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertNotNull(headers37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str38, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "hi!" + "'", charSequence57, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(intOptional62);
        org.junit.Assert.assertNotNull(intOptional65);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        java.io.Serializable serializable40 = null;
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.serializedValueSize();
        int int58 = serializableConsumerRecord56.serializedKeySize();
        int int59 = serializableConsumerRecord56.serializedKeySize();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord56.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("hi!", 52, (long) 35, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers60);
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType66, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable73 = serializableConsumerRecord72.key();
        long long74 = serializableConsumerRecord72.checksum();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord72.leaderEpoch();
        long long76 = serializableConsumerRecord72.offset();
        java.lang.String str77 = serializableConsumerRecord72.toString();
        java.util.Optional<java.lang.Integer> intOptional78 = serializableConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (int) (byte) -1, (long) (byte) 0, (long) 1, timestampType17, (java.lang.Long) 1L, (int) '#', (int) (byte) 10, serializable40, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers60, intOptional78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) '4', (long) (-1), (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long82 = serializableConsumerRecord81.timestamp();
        long long83 = serializableConsumerRecord81.offset();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str77, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.String str20 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str20, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (-1.0d) + "'", serializable7, (-1.0d));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.offset();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        long long14 = serializableConsumerRecord9.checksum();
        java.lang.String str15 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.partition();
        int int31 = serializableConsumerRecord29.partition();
        long long32 = serializableConsumerRecord29.timestamp();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord29.leaderEpoch();
        long long34 = serializableConsumerRecord29.checksum();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 10, 0L, timestampType35, (long) 52, 0, (int) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, 0L, (long) (byte) 1, timestampType16, 1L, (int) (byte) 10, 52, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        java.io.Serializable serializable44 = serializableConsumerRecord43.key();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (-1.0d) + "'", serializable12, (-1.0d));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", serializable44, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.io.Serializable serializable10 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + (-1.0d) + "'", serializable10, (-1.0d));
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord8.headers();
        java.lang.String str10 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        long long12 = serializableConsumerRecord8.timestamp();
        int int13 = serializableConsumerRecord8.serializedValueSize();
        int int14 = serializableConsumerRecord8.serializedKeySize();
        java.io.Serializable serializable15 = serializableConsumerRecord8.key();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord8.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        java.lang.CharSequence charSequence32 = serializableConsumerRecord30.value();
        long long33 = serializableConsumerRecord30.timestamp();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', (long) 52, (java.io.Serializable) wildcardClass34, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional37 = serializableConsumerRecord36.leaderEpoch();
        java.lang.Class<?> wildcardClass38 = serializableConsumerRecord36.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.io.Serializable> intOptionalConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.io.Serializable>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!), partition = 10, leaderEpoch = null, offset = 32, NoTimestampType = 35, serialized key size = 10, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 52, (long) 'a', intOptional16, (java.io.Serializable) wildcardClass38);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (byte) 10 + "'", serializable15, (byte) 10);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(intOptional37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.offset();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord9.headers();
        java.lang.String str13 = serializableConsumerRecord9.toString();
        int int14 = serializableConsumerRecord9.partition();
        java.lang.String str15 = serializableConsumerRecord9.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        int int33 = serializableConsumerRecord31.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord31.leaderEpoch();
        java.io.Serializable serializable35 = serializableConsumerRecord31.key();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord31.leaderEpoch();
        java.lang.String str37 = serializableConsumerRecord31.topic();
        long long38 = serializableConsumerRecord31.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord31.timestampType();
        long long40 = serializableConsumerRecord31.checksum();
        java.lang.String str41 = serializableConsumerRecord31.toString();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord31.headers();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord31.getClass();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType52, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str59 = serializableConsumerRecord58.toString();
        java.io.Serializable serializable60 = serializableConsumerRecord58.key();
        int int61 = serializableConsumerRecord58.serializedValueSize();
        java.lang.String str62 = serializableConsumerRecord58.toString();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>> serializableConsumerRecordConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) '4', (long) (short) 0, serializableConsumerRecord58, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable77 = serializableConsumerRecord76.key();
        java.lang.CharSequence charSequence78 = serializableConsumerRecord76.value();
        long long79 = serializableConsumerRecord76.timestamp();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord76.value();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord76.timestampType();
        long long82 = serializableConsumerRecord76.offset();
        int int83 = serializableConsumerRecord76.partition();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord76.headers();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 10, 10L, (long) (short) -1, timestampType17, (java.lang.Long) 0L, 0, (int) (short) -1, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers65, intOptional85);
        org.apache.kafka.common.record.TimestampType timestampType87 = serializableConsumerRecord86.timestampType();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str13, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(intOptional34);
        org.junit.Assert.assertEquals("'" + serializable35 + "' != '" + (short) 1 + "'", serializable35, (short) 1);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNull(timestampType39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str41, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str59, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + 10.0f + "'", serializable60, 10.0f);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str62, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertEquals("'" + serializable77 + "' != '" + (short) 1 + "'", serializable77, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-1L) + "'", long79 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertNull(timestampType81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertTrue("'" + timestampType87 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType87.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.toString();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)" + "'", str13, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)");
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + false + "'", serializable8, false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        long long79 = serializableConsumerRecord58.offset();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord58.leaderEpoch();
        int int81 = serializableConsumerRecord58.partition();
        int int82 = serializableConsumerRecord58.serializedValueSize();
        int int83 = serializableConsumerRecord58.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType22, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.io.Serializable serializable65 = serializableConsumerRecord63.key();
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord63.timestampType();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType22, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType22, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord74.timestampType();
        long long76 = serializableConsumerRecord74.offset();
        int int77 = serializableConsumerRecord74.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertNull(timestampType66);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 35L + "'", long76 == 35L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 32 + "'", int77 == 32);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        int int43 = serializableConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType26, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional44);
        java.io.Serializable serializable49 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType26, (long) 0, 0, 0, serializable49, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.lang.CharSequence charSequence68 = serializableConsumerRecord66.value();
        long long69 = serializableConsumerRecord66.timestamp();
        java.util.Optional<java.lang.Integer> intOptional70 = serializableConsumerRecord66.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType26, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord83.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType84, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType26, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType84, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", 52, (long) 100, (long) '#', timestampType84, 32L, (int) (short) -1, (int) (byte) 1, (java.io.Serializable) 97L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        java.lang.Class<?> wildcardClass95 = serializableConsumerRecord94.getClass();
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(intOptional70);
        org.junit.Assert.assertTrue("'" + timestampType84 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType84.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType10, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence17 = serializableConsumerRecord16.value();
        java.io.Serializable serializable18 = serializableConsumerRecord16.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord16.timestampType();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord16.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType30, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass20, timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 52L, (java.io.Serializable) timestampType30, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", charSequence36, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        long long15 = serializableConsumerRecord13.offset();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = serializableConsumerRecord26.value();
        java.lang.CharSequence charSequence28 = serializableConsumerRecord26.value();
        long long29 = serializableConsumerRecord26.timestamp();
        java.util.Optional<java.lang.Integer> intOptional30 = serializableConsumerRecord26.leaderEpoch();
        int int31 = serializableConsumerRecord26.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord26.leaderEpoch();
        java.lang.Class<?> wildcardClass33 = serializableConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement> serializableConsumerRecordConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (-1), (long) ' ', serializableConsumerRecord13, (java.lang.reflect.AnnotatedElement) wildcardClass33);
        int int35 = serializableConsumerRecord13.serializedKeySize();
        java.lang.CharSequence charSequence36 = serializableConsumerRecord13.value();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence28 + "' != '" + "hi!" + "'", charSequence28, "hi!");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(intOptional30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord26.timestampType();
        java.io.Serializable serializable31 = null;
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable44 = serializableConsumerRecord43.key();
        long long45 = serializableConsumerRecord43.checksum();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        int int47 = serializableConsumerRecord43.serializedKeySize();
        int int48 = serializableConsumerRecord43.serializedValueSize();
        org.apache.kafka.common.header.Headers headers49 = serializableConsumerRecord43.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 0, (long) 0, 52L, timestampType27, (java.lang.Long) 35L, 35, 10, serializable31, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers49);
        org.apache.kafka.common.record.TimestampType timestampType55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType55, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long62 = serializableConsumerRecord61.timestamp();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord61.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object> timestampTypeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Object>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 0, 0L, 32L, timestampType13, 10L, (int) (short) 10, 0, timestampType27, (java.lang.Object) serializableConsumerRecord61);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord61.value();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable44 + "' != '" + (short) 1 + "'", serializable44, (short) 1);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(headers49);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 10L + "'", long62 == 10L);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord88.timestampType();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.CharSequence charSequence91 = serializableConsumerRecord88.value();
        java.util.Optional<java.lang.Integer> intOptional92 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord88.headers();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord88.value();
        long long95 = serializableConsumerRecord88.offset();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + timestampType89 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType89.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence91, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional92);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence94, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence12);
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord23.timestampType();
        int int25 = serializableConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord23.timestampType();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord23.headers();
        org.apache.kafka.common.record.TimestampType timestampType32 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType32, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence39 = serializableConsumerRecord38.value();
        java.io.Serializable serializable40 = serializableConsumerRecord38.key();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord38.timestampType();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord38.headers();
        java.lang.CharSequence charSequence43 = serializableConsumerRecord38.value();
        java.lang.CharSequence charSequence44 = serializableConsumerRecord38.value();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord38.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (byte) 1, 0L, 0L, timestampType4, (java.lang.Long) 100L, (int) (short) 1, (int) (byte) 1, (java.io.Serializable) timestampType16, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", headers27, intOptional45);
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        java.lang.CharSequence charSequence48 = serializableConsumerRecord46.value();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers27);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertNull(timestampType41);
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence47, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", charSequence48, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        long long8 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        int int12 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str10, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        int int62 = serializableConsumerRecord59.serializedKeySize();
        long long63 = serializableConsumerRecord59.checksum();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord59.value();
        java.lang.String str65 = serializableConsumerRecord59.topic();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str18 = serializableConsumerRecord17.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType19, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence24);
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        long long45 = serializableConsumerRecord42.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType46 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        long long60 = serializableConsumerRecord58.checksum();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 100, 0L, (long) 0, timestampType26, (java.lang.Long) 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) '#', (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers47, intOptional61);
        java.io.Serializable serializable66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (byte) -1, (long) (short) 1, timestampType26, (long) (byte) 100, (int) (byte) 1, 97, serializable66, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.lang.String str69 = serializableConsumerRecord68.toString();
        long long70 = serializableConsumerRecord68.timestamp();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord68.headers();
        int int72 = serializableConsumerRecord68.serializedKeySize();
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNull(timestampType46);
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1L + "'", long70 == 1L);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str16, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)", 10, (long) 'a', "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 35, leaderEpoch = null, offset = 100, NoTimestampType = 52, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType55 = serializableConsumerRecord54.timestampType();
        java.lang.String str56 = serializableConsumerRecord54.topic();
        long long57 = serializableConsumerRecord54.checksum();
        org.apache.kafka.common.header.Headers headers58 = serializableConsumerRecord54.headers();
        java.lang.Class<?> wildcardClass59 = headers58.getClass();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + timestampType55 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType55.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str56, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(headers58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) 'a', 10L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        int int28 = serializableConsumerRecord23.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        int int30 = serializableConsumerRecord23.partition();
        java.lang.String str31 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord23.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "hi!" + "'", str31, "hi!");
        org.junit.Assert.assertNull(timestampType32);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        long long15 = serializableConsumerRecord10.offset();
        long long16 = serializableConsumerRecord10.timestamp();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord10.leaderEpoch();
        long long20 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.offset();
        int int13 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        long long18 = serializableConsumerRecord10.checksum();
        long long19 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int12 = serializableConsumerRecord11.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord11.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord11.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType15, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", (-1), (long) 10, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord19.value();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + 1.0f + "'", serializable14, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", str20, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))" + "'", charSequence21, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        long long9 = serializableConsumerRecord5.offset();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        java.lang.String str13 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.offset();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType63 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType63, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence70 = serializableConsumerRecord69.value();
        int int71 = serializableConsumerRecord69.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional72 = serializableConsumerRecord69.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType54, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional72);
        java.io.Serializable serializable77 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType54, (long) 0, 0, 0, serializable77, (java.lang.CharSequence) "");
        java.lang.Class<?> wildcardClass80 = timestampType54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 10, (long) (byte) 10, (java.io.Serializable) wildcardClass80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.CharSequence charSequence83 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) '#', (long) (short) -1, (long) (-1), timestampType14, 10L, (int) '4', 0, (java.io.Serializable) (byte) 10, charSequence83);
        long long85 = serializableConsumerRecord84.offset();
        int int86 = serializableConsumerRecord84.serializedValueSize();
        int int87 = serializableConsumerRecord84.serializedValueSize();
        long long88 = serializableConsumerRecord84.offset();
        int int89 = serializableConsumerRecord84.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence70 + "' != '" + "hi!" + "'", charSequence70, "hi!");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 52 + "'", int71 == 52);
        org.junit.Assert.assertNotNull(intOptional72);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence94 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 0, (long) (short) -1, (long) (byte) -1, timestampType34, (long) 'a', 32, (int) (byte) 0, (java.io.Serializable) (-1L), charSequence94);
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord95.leaderEpoch();
        long long97 = serializableConsumerRecord95.offset();
        org.apache.kafka.common.header.Headers headers98 = serializableConsumerRecord95.headers();
        long long99 = serializableConsumerRecord95.offset();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertNotNull(intOptional96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + (-1L) + "'", long97 == (-1L));
        org.junit.Assert.assertNotNull(headers98);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-1L) + "'", long99 == (-1L));
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "");
        long long24 = serializableConsumerRecord23.timestamp();
        java.lang.String str25 = serializableConsumerRecord23.toString();
        int int26 = serializableConsumerRecord23.serializedKeySize();
        long long27 = serializableConsumerRecord23.offset();
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str25, "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        int int19 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        long long21 = serializableConsumerRecord10.offset();
        int int22 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        int int38 = serializableConsumerRecord36.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional39 = serializableConsumerRecord36.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType21, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional39);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType21, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.io.Serializable serializable64 = serializableConsumerRecord62.key();
        org.apache.kafka.common.record.TimestampType timestampType65 = serializableConsumerRecord62.timestampType();
        org.apache.kafka.common.header.Headers headers66 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType21, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 97, NoTimestampType = 100, serialized key size = 10, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 97, (long) 52, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(intOptional39);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + serializable64 + "' != '" + (short) 1 + "'", serializable64, (short) 1);
        org.junit.Assert.assertNull(timestampType65);
        org.junit.Assert.assertNotNull(headers66);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord58.value();
        java.lang.String str81 = serializableConsumerRecord58.toString();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord58.leaderEpoch();
        int int83 = serializableConsumerRecord58.partition();
        int int84 = serializableConsumerRecord58.serializedKeySize();
        long long85 = serializableConsumerRecord58.timestamp();
        long long86 = serializableConsumerRecord58.offset();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str81, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-1L) + "'", long85 == (-1L));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        int int32 = serializableConsumerRecord29.serializedKeySize();
        int int33 = serializableConsumerRecord29.partition();
        java.io.Serializable serializable34 = serializableConsumerRecord29.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType14, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) -1, (long) (short) 100, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int38 = serializableConsumerRecord37.serializedKeySize();
        long long39 = serializableConsumerRecord37.timestamp();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        long long26 = serializableConsumerRecord23.timestamp();
        long long27 = serializableConsumerRecord23.offset();
        java.lang.String str28 = serializableConsumerRecord23.toString();
        java.io.Serializable serializable29 = serializableConsumerRecord23.key();
        int int30 = serializableConsumerRecord23.serializedValueSize();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str28, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable29 + "' != '" + 10 + "'", serializable29, 10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(headers31);
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional32 = serializableConsumerRecord29.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType14, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional32);
        java.io.Serializable serializable37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType14, (long) 0, 0, 0, serializable37, (java.lang.CharSequence) "");
        int int40 = serializableConsumerRecord39.serializedKeySize();
        int int41 = serializableConsumerRecord39.partition();
        java.lang.String str42 = serializableConsumerRecord39.toString();
        long long43 = serializableConsumerRecord39.checksum();
        int int44 = serializableConsumerRecord39.partition();
        long long45 = serializableConsumerRecord39.checksum();
        java.lang.CharSequence charSequence46 = serializableConsumerRecord39.value();
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNotNull(intOptional32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )" + "'", str42, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 100 + "'", int44 == 100);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "" + "'", charSequence46, "");
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.checksum();
        int int25 = serializableConsumerRecord23.serializedValueSize();
        int int26 = serializableConsumerRecord23.serializedKeySize();
        java.io.Serializable serializable27 = serializableConsumerRecord23.key();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + serializable27 + "' != '" + 10 + "'", serializable27, 10);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.checksum();
        int int16 = serializableConsumerRecord10.partition();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.checksum();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1L + "'", long60 == 1L);
        org.junit.Assert.assertNotNull(intOptional61);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        long long17 = serializableConsumerRecord10.checksum();
        int int18 = serializableConsumerRecord10.serializedKeySize();
        long long19 = serializableConsumerRecord10.checksum();
        org.apache.kafka.common.header.Headers headers20 = serializableConsumerRecord10.headers();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str23 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable24 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(headers20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str23, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable24 + "' != '" + (short) 1 + "'", serializable24, (short) 1);
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long10 = serializableConsumerRecord9.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType19, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.partition();
        long long27 = serializableConsumerRecord25.checksum();
        long long28 = serializableConsumerRecord25.timestamp();
        java.lang.String str29 = serializableConsumerRecord25.toString();
        long long30 = serializableConsumerRecord25.timestamp();
        java.util.Optional<java.lang.Integer> intOptional31 = serializableConsumerRecord25.leaderEpoch();
        java.lang.Class<?> wildcardClass32 = intOptional31.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        int int41 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord39.headers();
        java.lang.reflect.Type type46 = null;
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.CharSequence charSequence59 = serializableConsumerRecord57.value();
        long long60 = serializableConsumerRecord57.timestamp();
        long long61 = serializableConsumerRecord57.checksum();
        int int62 = serializableConsumerRecord57.partition();
        java.util.Optional<java.lang.Integer> intOptional63 = serializableConsumerRecord57.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>> typeConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 35, (long) (short) 1, type46, intOptional63);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )", 35, (long) (byte) 0, 100L, timestampType11, (java.lang.Long) 0L, 0, (int) (short) 0, (java.io.Serializable) wildcardClass32, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", headers42, intOptional63);
        java.lang.Class<?> wildcardClass66 = intOptional63.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str29, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertNotNull(intOptional31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(intOptional63);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType19, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) 1, (long) 0, timestampType10, 10L, (int) (short) 100, (int) (short) 1, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass27);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (short) -1, (java.io.Serializable) timestampType31, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        java.util.Optional<java.lang.Integer> intOptional34 = serializableConsumerRecord33.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional34);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        java.lang.CharSequence charSequence23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType18, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence23);
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord37.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType38, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType25, (long) '#', 1, 0, (java.io.Serializable) timestampType38, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) (short) 1, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        int int45 = serializableConsumerRecord44.serializedKeySize();
        long long46 = serializableConsumerRecord44.checksum();
        java.lang.String str47 = serializableConsumerRecord44.toString();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType38 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType38.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))" + "'", str47, "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))");
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.timestamp();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        long long8 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", charSequence10, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        long long15 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str18, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        long long31 = serializableConsumerRecord30.timestamp();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        long long33 = serializableConsumerRecord30.checksum();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 32, null = 97, serialized key size = 1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ))", (int) ' ', (long) (byte) -1, (java.io.Serializable) timestampType34, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        java.lang.CharSequence charSequence48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence48);
        java.io.Serializable serializable50 = serializableConsumerRecord49.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord49.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int62 = serializableConsumerRecord61.partition();
        long long63 = serializableConsumerRecord61.checksum();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord61.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, 1L, (long) 10, timestampType51, (long) 0, (int) '4', 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers64);
        java.lang.CharSequence charSequence66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '#', (long) 100, (long) '4', timestampType34, 0L, 35, 0, (java.io.Serializable) 0, charSequence66);
        long long68 = serializableConsumerRecord67.offset();
        long long69 = serializableConsumerRecord67.checksum();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + serializable32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", serializable32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (byte) 10 + "'", serializable50, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType51 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType51.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 100 + "'", int62 == 100);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L + "'", long68 == 100L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.offset();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.Class<?> wildcardClass17 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 1, (-1L), (java.io.Serializable) (-1L), (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence9 = serializableConsumerRecord8.value();
        int int10 = serializableConsumerRecord8.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)", 0, (long) (short) 100, (java.io.Serializable) timestampType11, (java.lang.CharSequence) "");
        long long14 = serializableConsumerRecord13.offset();
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "hi!" + "'", charSequence9, "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        java.io.Serializable serializable22 = serializableConsumerRecord20.key();
        org.apache.kafka.common.record.TimestampType timestampType23 = serializableConsumerRecord20.timestampType();
        java.lang.Class<?> wildcardClass24 = serializableConsumerRecord20.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType34, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass24, timestampType34);
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence52 = serializableConsumerRecord51.value();
        java.io.Serializable serializable53 = serializableConsumerRecord51.key();
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord51.timestampType();
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType34, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) 0, (java.io.Serializable) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        java.io.Serializable serializable60 = serializableConsumerRecord59.key();
        java.lang.CharSequence charSequence61 = serializableConsumerRecord59.value();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertNull(timestampType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence52 + "' != '" + "hi!" + "'", charSequence52, "hi!");
        org.junit.Assert.assertEquals("'" + serializable53 + "' != '" + (short) 1 + "'", serializable53, (short) 1);
        org.junit.Assert.assertNull(timestampType54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + serializable60 + "' != '" + 0 + "'", serializable60, 0);
        org.junit.Assert.assertEquals("'" + charSequence61 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", charSequence61, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        java.lang.String str18 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(intOptional20);
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.checksum();
        int int25 = serializableConsumerRecord23.serializedKeySize();
        long long26 = serializableConsumerRecord23.checksum();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord23.getClass();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable18 = serializableConsumerRecord17.key();
        long long19 = serializableConsumerRecord17.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord17.value();
        int int21 = serializableConsumerRecord17.partition();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord17.leaderEpoch();
        int int23 = serializableConsumerRecord17.serializedKeySize();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType> serializableConsumerRecordConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (short) 0, (long) (byte) 10, serializableConsumerRecord17, timestampType30);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType47 = serializableConsumerRecord46.timestampType();
        int int48 = serializableConsumerRecord46.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord46.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType54 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType54, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int61 = serializableConsumerRecord60.serializedValueSize();
        int int62 = serializableConsumerRecord60.serializedValueSize();
        long long63 = serializableConsumerRecord60.offset();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord60.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) 0, 1L, (java.io.Serializable) timestampType49, serializableConsumerRecord60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 35, (long) (byte) 1, (java.io.Serializable) timestampType49, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)", 1, (long) 1, 35L, timestampType30, 32L, 52, 52, (java.io.Serializable) "", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        java.lang.String str70 = serializableConsumerRecord69.topic();
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType47 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType47.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType49 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType49.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)" + "'", str70, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 35, value = hi!)");
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        java.io.Serializable serializable11 = serializableConsumerRecord5.key();
        long long12 = serializableConsumerRecord5.offset();
        long long13 = serializableConsumerRecord5.offset();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        java.lang.String str15 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (-1.0d) + "'", serializable11, (-1.0d));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType25, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType60, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence67 = serializableConsumerRecord66.value();
        java.io.Serializable serializable68 = serializableConsumerRecord66.key();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord66.timestampType();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord66.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType25, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', (long) '#', (long) 10, timestampType25, (long) 'a', (int) ' ', 0, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, 0L, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNull(timestampType69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord11 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int12 = serializableConsumerRecord11.partition();
        int int13 = serializableConsumerRecord11.partition();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord11.value();
        int int15 = serializableConsumerRecord11.serializedKeySize();
        java.io.Serializable serializable16 = serializableConsumerRecord11.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord11.timestampType();
        java.lang.Class<?> wildcardClass18 = timestampType17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) 32, (java.io.Serializable) wildcardClass18, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) (short) 1, (long) 100, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (-1.0d) + "'", serializable16, (-1.0d));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord24.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        int int42 = serializableConsumerRecord40.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional43 = serializableConsumerRecord40.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType25, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional43);
        java.io.Serializable serializable48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType25, (long) 0, 0, 0, serializable48, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType59 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType59, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence66 = serializableConsumerRecord65.value();
        java.lang.CharSequence charSequence67 = serializableConsumerRecord65.value();
        long long68 = serializableConsumerRecord65.timestamp();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord65.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord70 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType25, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional69);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType83 = serializableConsumerRecord82.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType83, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType25, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType83, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int88 = serializableConsumerRecord87.partition();
        int int89 = serializableConsumerRecord87.partition();
        java.lang.Class<?> wildcardClass90 = serializableConsumerRecord87.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 100, (long) '#', (java.io.Serializable) wildcardClass90, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
        java.lang.CharSequence charSequence93 = serializableConsumerRecord92.value();
        org.junit.Assert.assertTrue("'" + timestampType25 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType25.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(intOptional43);
        org.junit.Assert.assertEquals("'" + charSequence66 + "' != '" + "hi!" + "'", charSequence66, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence67 + "' != '" + "hi!" + "'", charSequence67, "hi!");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertTrue("'" + timestampType83 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType83.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertEquals("'" + charSequence93 + "' != '" + "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)" + "'", charSequence93, "ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)");
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        long long93 = serializableConsumerRecord88.offset();
        long long94 = serializableConsumerRecord88.timestamp();
        java.io.Serializable serializable95 = serializableConsumerRecord88.key();
        java.lang.String str96 = serializableConsumerRecord88.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 32L + "'", long94 == 32L);
        org.junit.Assert.assertEquals("'" + serializable95 + "' != '" + "hi!" + "'", serializable95, "hi!");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str96, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.checksum();
        long long25 = serializableConsumerRecord23.offset();
        java.util.Optional<java.lang.Integer> intOptional26 = serializableConsumerRecord23.leaderEpoch();
        long long27 = serializableConsumerRecord23.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(intOptional26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        long long7 = serializableConsumerRecord5.offset();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.checksum();
        int int10 = serializableConsumerRecord5.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord5.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord5.timestampType();
        java.lang.Class<?> wildcardClass13 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 52L + "'", long7 == 52L);
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord8.leaderEpoch();
        long long11 = serializableConsumerRecord8.checksum();
        int int12 = serializableConsumerRecord8.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord8.leaderEpoch();
        long long14 = serializableConsumerRecord8.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )", (int) '#', (long) (byte) 1, (java.io.Serializable) timestampType15, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int18 = serializableConsumerRecord17.serializedKeySize();
        int int19 = serializableConsumerRecord17.partition();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord9.value();
        int int13 = serializableConsumerRecord9.serializedKeySize();
        long long14 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType25, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence32 = serializableConsumerRecord31.value();
        java.io.Serializable serializable33 = serializableConsumerRecord31.key();
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord31.timestampType();
        long long35 = serializableConsumerRecord31.offset();
        java.lang.String str36 = serializableConsumerRecord31.topic();
        long long37 = serializableConsumerRecord31.checksum();
        org.apache.kafka.common.record.TimestampType timestampType38 = serializableConsumerRecord31.timestampType();
        java.lang.CharSequence charSequence39 = serializableConsumerRecord31.value();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord31.leaderEpoch();
        int int41 = serializableConsumerRecord31.serializedValueSize();
        org.apache.kafka.common.header.Headers headers42 = serializableConsumerRecord31.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) -1, 0L, 100L, timestampType15, (java.lang.Long) 35L, (-1), (int) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = 10, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = )", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", headers42);
        int int44 = serializableConsumerRecord43.partition();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence32 + "' != '" + "hi!" + "'", charSequence32, "hi!");
        org.junit.Assert.assertEquals("'" + serializable33 + "' != '" + (short) 1 + "'", serializable33, (short) 1);
        org.junit.Assert.assertNull(timestampType34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNull(timestampType38);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(headers42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional21 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNotNull(intOptional21);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType30 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType30, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence37 = serializableConsumerRecord36.value();
        java.io.Serializable serializable38 = serializableConsumerRecord36.key();
        org.apache.kafka.common.record.TimestampType timestampType39 = serializableConsumerRecord36.timestampType();
        long long40 = serializableConsumerRecord36.offset();
        org.apache.kafka.common.header.Headers headers41 = serializableConsumerRecord36.headers();
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord36.timestampType();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord36.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> headersConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (-1), (long) 10, 1L, timestampType22, 0L, 32, (int) (byte) 10, headers43, serializableConsumerRecord44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long55 = serializableConsumerRecord54.offset();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String> serializableConsumerRecordConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)", (int) ' ', (long) (byte) 100, (long) 32, timestampType22, (long) '#', 1, (int) (byte) 100, serializableConsumerRecord54, "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 100, NoTimestampType = 10, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) (short) 100, (long) (short) 10, timestampType4, 10L, (int) '4', (int) (byte) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence37 + "' != '" + "hi!" + "'", charSequence37, "hi!");
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertNull(timestampType39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(headers41);
        org.junit.Assert.assertNull(timestampType42);
        org.junit.Assert.assertNotNull(headers43);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence56, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int10 = serializableConsumerRecord9.partition();
        int int11 = serializableConsumerRecord9.partition();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord9.value();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence31 = serializableConsumerRecord30.value();
        java.io.Serializable serializable32 = serializableConsumerRecord30.key();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord30.timestampType();
        java.lang.Class<?> wildcardClass34 = serializableConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord43.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType44, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass34, timestampType44);
        java.lang.Class<?> wildcardClass48 = typeConsumerRecord47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) '4', (long) 10, (long) (byte) 1, timestampType13, (long) 10, (int) (short) 1, (int) (short) 100, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord50.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence31 + "' != '" + "hi!" + "'", charSequence31, "hi!");
        org.junit.Assert.assertEquals("'" + serializable32 + "' != '" + (short) 1 + "'", serializable32, (short) 1);
        org.junit.Assert.assertNull(timestampType33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)" + "'", charSequence51, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertNotNull(headers52);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord10.leaderEpoch();
        long long19 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        int int13 = serializableConsumerRecord10.partition();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        long long20 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord10.value();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        long long23 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        long long16 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.timestamp();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        java.lang.Class<?> wildcardClass11 = serializableConsumerRecord5.getClass();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int17 = serializableConsumerRecord16.partition();
        int int18 = serializableConsumerRecord16.partition();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord16.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord16.timestampType();
        java.lang.CharSequence charSequence25 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) (byte) 0, 100L, timestampType20, 52L, (int) 'a', (int) (short) 100, (java.io.Serializable) 1, charSequence25);
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.common.record.TimestampType timestampType47 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType47, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence54 = serializableConsumerRecord53.value();
        org.apache.kafka.common.header.Headers headers55 = serializableConsumerRecord53.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType37, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers55);
        long long57 = serializableConsumerRecord56.timestamp();
        long long58 = serializableConsumerRecord56.timestamp();
        long long59 = serializableConsumerRecord56.offset();
        long long60 = serializableConsumerRecord56.checksum();
        long long61 = serializableConsumerRecord56.checksum();
        java.lang.Class<?> wildcardClass62 = serializableConsumerRecord56.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) 'a', (long) (byte) 100, (java.io.Serializable) wildcardClass62, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long72 = serializableConsumerRecord71.timestamp();
        java.lang.String str73 = serializableConsumerRecord71.toString();
        org.apache.kafka.common.header.Headers headers74 = serializableConsumerRecord71.headers();
        org.apache.kafka.common.record.TimestampType timestampType79 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType79, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence86 = serializableConsumerRecord85.value();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord85.headers();
        java.lang.String str88 = serializableConsumerRecord85.topic();
        java.util.Optional<java.lang.Integer> intOptional89 = serializableConsumerRecord85.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 1, 52L, (long) (byte) -1, timestampType20, (java.lang.Long) 0L, (int) (byte) 100, 32, (java.io.Serializable) wildcardClass62, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers74, intOptional89);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (byte) 1, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = ), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = 1, serialized key size = 35, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence54 + "' != '" + "hi!" + "'", charSequence54, "hi!");
        org.junit.Assert.assertNotNull(headers55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str73, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertNotNull(headers74);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertNotNull(headers87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(intOptional89);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        org.apache.kafka.common.header.Headers headers9 = serializableConsumerRecord5.headers();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + 1.0f + "'", serializable8, 1.0f);
        org.junit.Assert.assertNotNull(headers9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable9 = serializableConsumerRecord8.key();
        org.apache.kafka.common.header.Headers headers10 = serializableConsumerRecord8.headers();
        java.lang.String str11 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord8.headers();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType29, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence36 = serializableConsumerRecord35.value();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord35.getClass();
        org.apache.kafka.common.record.TimestampType timestampType43 = null;
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType43, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType21, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass37, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers61);
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord75.headers();
        java.lang.String str77 = serializableConsumerRecord75.topic();
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord75.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = null;
        org.apache.kafka.common.record.TimestampType timestampType87 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType87, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int94 = serializableConsumerRecord93.serializedValueSize();
        java.lang.String str95 = serializableConsumerRecord93.topic();
        java.util.Optional<java.lang.Integer> intOptional96 = serializableConsumerRecord93.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>> serializableConsumerRecordConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 1, (long) 52, 1L, timestampType78, (long) '#', 0, (-1), serializableConsumerRecord82, intOptional96);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.common.record.TimestampType> headersConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (short) -1, (long) 100, headers65, timestampType78);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord99 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = null)", 100, (long) 'a', (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers13, headers65);
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + 100.0f + "'", serializable9, 100.0f);
        org.junit.Assert.assertNotNull(headers10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str11, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + charSequence36 + "' != '" + "hi!" + "'", charSequence36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hi!" + "'", str95, "hi!");
        org.junit.Assert.assertNotNull(intOptional96);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str10 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType21 = null;
        org.apache.kafka.common.record.TimestampType timestampType29 = null;
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        org.apache.kafka.common.header.Headers headers47 = serializableConsumerRecord45.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType29, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers47);
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord82.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType66, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers84);
        java.util.Optional<java.lang.Integer> intOptional86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType21, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers47, headers61, headers84, intOptional86);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int94 = serializableConsumerRecord93.partition();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord93.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord96 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 10, (long) 'a', (long) 100, timestampType11, (java.lang.Long) 100L, (int) (byte) 10, (int) (byte) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", headers61, intOptional95);
        long long97 = serializableConsumerRecord96.checksum();
        java.lang.Class<?> wildcardClass98 = serializableConsumerRecord96.getClass();
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertNotNull(headers47);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
        org.junit.Assert.assertNotNull(intOptional95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 100L + "'", long97 == 100L);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        java.io.Serializable serializable3 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 1, (long) (short) 10, serializable3, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        long long8 = serializableConsumerRecord5.offset();
        long long9 = serializableConsumerRecord5.timestamp();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)" + "'", str6, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        int int17 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + (short) 1 + "'", serializable15, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        long long9 = serializableConsumerRecord5.offset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        java.lang.String str22 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        int int18 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable20 = serializableConsumerRecord10.key();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + serializable20 + "' != '" + (short) 1 + "'", serializable20, (short) 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.partition();
        java.util.Optional<java.lang.Integer> intOptional11 = serializableConsumerRecord9.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int26 = serializableConsumerRecord25.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType27 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        java.lang.Class<?> wildcardClass43 = serializableConsumerRecord41.getClass();
        org.apache.kafka.common.record.TimestampType timestampType49 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType49, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence56 = serializableConsumerRecord55.value();
        int int57 = serializableConsumerRecord55.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord55.leaderEpoch();
        java.io.Serializable serializable59 = serializableConsumerRecord55.key();
        java.util.Optional<java.lang.Integer> intOptional60 = serializableConsumerRecord55.leaderEpoch();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord55.headers();
        org.apache.kafka.common.record.TimestampType timestampType66 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType66, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int73 = serializableConsumerRecord72.partition();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord72.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord75 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType27, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass43, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers61, intOptional74);
        org.apache.kafka.common.record.TimestampType timestampType84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType84, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence91 = serializableConsumerRecord90.value();
        java.io.Serializable serializable92 = serializableConsumerRecord90.key();
        org.apache.kafka.common.record.TimestampType timestampType93 = serializableConsumerRecord90.timestampType();
        long long94 = serializableConsumerRecord90.offset();
        org.apache.kafka.common.header.Headers headers95 = serializableConsumerRecord90.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers95, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord98 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '#', (long) (byte) 1, (long) 35, timestampType12, (java.lang.Long) 1L, (int) (short) 1, 10, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers95);
        org.apache.kafka.common.header.Headers headers99 = serializableConsumerRecord98.headers();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(intOptional11);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType27 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType27.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertNotNull(intOptional60);
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + charSequence91 + "' != '" + "hi!" + "'", charSequence91, "hi!");
        org.junit.Assert.assertEquals("'" + serializable92 + "' != '" + (short) 1 + "'", serializable92, (short) 1);
        org.junit.Assert.assertNull(timestampType93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(headers95);
        org.junit.Assert.assertNotNull(headers99);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        java.lang.CharSequence charSequence12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence12);
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int26 = serializableConsumerRecord25.partition();
        long long27 = serializableConsumerRecord25.checksum();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord25.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 1, 1L, (long) 10, timestampType15, (long) 0, (int) '4', 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers28);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable39 = serializableConsumerRecord38.key();
        org.apache.kafka.common.header.Headers headers40 = serializableConsumerRecord38.headers();
        java.lang.String str41 = serializableConsumerRecord38.topic();
        java.io.Serializable serializable42 = serializableConsumerRecord38.key();
        long long43 = serializableConsumerRecord38.checksum();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord38.timestampType();
        java.lang.Class<?> wildcardClass45 = timestampType44.getClass();
        java.lang.reflect.GenericDeclaration genericDeclaration46 = null;
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.io.Serializable serializable59 = serializableConsumerRecord57.key();
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord57.timestampType();
        long long61 = serializableConsumerRecord57.offset();
        java.lang.String str62 = serializableConsumerRecord57.topic();
        long long63 = serializableConsumerRecord57.checksum();
        long long64 = serializableConsumerRecord57.timestamp();
        long long65 = serializableConsumerRecord57.checksum();
        java.lang.String str66 = serializableConsumerRecord57.toString();
        long long67 = serializableConsumerRecord57.offset();
        long long68 = serializableConsumerRecord57.checksum();
        int int69 = serializableConsumerRecord57.serializedKeySize();
        int int70 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord57.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration> annotatedElementConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 100, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (short) 10, 52L, (long) (short) 0, timestampType15, (java.lang.Long) 97L, (int) (byte) 100, (-1), (java.lang.reflect.AnnotatedElement) wildcardClass45, genericDeclaration46, headers71);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (byte) 10 + "'", serializable14, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertEquals("'" + serializable39 + "' != '" + 100.0f + "'", serializable39, 100.0f);
        org.junit.Assert.assertNotNull(headers40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str41, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 100.0f + "'", serializable42, 100.0f);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertNull(timestampType60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 52 + "'", int69 == 52);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(headers71);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord13.headers();
        java.lang.Class<?> wildcardClass16 = headers15.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 1, (long) 35, (java.io.Serializable) wildcardClass16, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass44, timestampType54);
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType54, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType19, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int92 = serializableConsumerRecord91.partition();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) '#', (long) (byte) 0, timestampType19, (java.lang.Long) 52L, (int) (short) 0, (int) (short) 100, serializable84, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93);
        long long95 = serializableConsumerRecord94.timestamp();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.String str13 = serializableConsumerRecord10.topic();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str17 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        org.apache.kafka.common.header.Headers headers24 = serializableConsumerRecord23.headers();
        java.lang.String str25 = serializableConsumerRecord23.topic();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord23.headers();
        long long27 = serializableConsumerRecord23.offset();
        org.apache.kafka.common.header.Headers headers28 = serializableConsumerRecord23.headers();
        int int29 = serializableConsumerRecord23.serializedValueSize();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertNotNull(headers24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!" + "'", str25, "hi!");
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(headers28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType9 = serializableConsumerRecord5.timestampType();
        java.lang.CharSequence charSequence10 = serializableConsumerRecord5.value();
        long long11 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (-1.0d) + "'", serializable7, (-1.0d));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + timestampType9 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType9.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence10 + "' != '" + "hi!" + "'", charSequence10, "hi!");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.partition();
        long long18 = serializableConsumerRecord10.offset();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        org.apache.kafka.common.record.TimestampType timestampType10 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType37 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType37, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence44 = serializableConsumerRecord43.value();
        int int45 = serializableConsumerRecord43.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord43.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType28, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional46);
        java.io.Serializable serializable51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType28, (long) 0, 0, 0, serializable51, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable65 = serializableConsumerRecord64.key();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType71 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType71, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence78 = serializableConsumerRecord77.value();
        int int79 = serializableConsumerRecord77.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional80 = serializableConsumerRecord77.leaderEpoch();
        java.io.Serializable serializable81 = serializableConsumerRecord77.key();
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord77.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord83 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType10, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType28, serializableConsumerRecord64, headers82);
        java.io.Serializable serializable84 = serializableConsumerRecord64.key();
        java.util.Optional<java.lang.Integer> intOptional85 = serializableConsumerRecord64.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>> intOptionalConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 1, 0L, intOptional85, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Class<?> wildcardClass88 = intOptional85.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord90 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) 1, (long) 52, (java.io.Serializable) wildcardClass88, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType91 = serializableConsumerRecord90.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence44 + "' != '" + "hi!" + "'", charSequence44, "hi!");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertEquals("'" + serializable65 + "' != '" + (short) 1 + "'", serializable65, (short) 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + charSequence78 + "' != '" + "hi!" + "'", charSequence78, "hi!");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertNotNull(intOptional80);
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertNotNull(intOptional85);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + timestampType91 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType91.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        int int11 = serializableConsumerRecord9.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord9.topic();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str34 = serializableConsumerRecord33.topic();
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord33.timestampType();
        java.lang.CharSequence charSequence40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType35, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence40);
        org.apache.kafka.common.record.TimestampType timestampType42 = serializableConsumerRecord41.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType42, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType52, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers70);
        java.lang.String str72 = serializableConsumerRecord71.toString();
        int int73 = serializableConsumerRecord71.serializedValueSize();
        long long74 = serializableConsumerRecord71.checksum();
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord71.leaderEpoch();
        java.lang.Class<?> wildcardClass76 = intOptional75.getClass();
        org.apache.kafka.common.record.TimestampType timestampType82 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType82, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.util.Optional<java.lang.Integer> intOptional89 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", 10, 100L, (long) 0, timestampType42, (java.lang.Long) 1L, (-1), (int) (short) 0, (java.io.Serializable) wildcardClass76, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = 1, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", headers90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 100, (long) (short) 0, 10L, timestampType13, (long) 'a', (-1), (int) (short) 0, (java.io.Serializable) (short) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType42 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType42.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str72, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(intOptional89);
        org.junit.Assert.assertNotNull(headers90);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        java.lang.String str66 = serializableConsumerRecord64.topic();
        int int67 = serializableConsumerRecord64.partition();
        org.apache.kafka.common.record.TimestampType timestampType68 = serializableConsumerRecord64.timestampType();
        int int69 = serializableConsumerRecord64.serializedKeySize();
        java.io.Serializable serializable70 = serializableConsumerRecord64.key();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence65, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hi!" + "'", str66, "hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + timestampType68 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType68.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + (byte) 10 + "'", serializable70, (byte) 10);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        java.lang.CharSequence charSequence16 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence16);
        java.io.Serializable serializable18 = serializableConsumerRecord17.key();
        int int19 = serializableConsumerRecord17.partition();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.CharSequence charSequence28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) -1, 32L, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", charSequence28);
        java.io.Serializable serializable30 = serializableConsumerRecord29.key();
        int int31 = serializableConsumerRecord29.serializedValueSize();
        int int32 = serializableConsumerRecord29.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType38, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int45 = serializableConsumerRecord44.partition();
        java.util.Optional<java.lang.Integer> intOptional46 = serializableConsumerRecord44.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord44.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence> serializableConsumerRecordConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, 97L, 52L, timestampType20, (java.lang.Long) (-1L), 1, 35, serializableConsumerRecord29, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers48);
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        long long65 = serializableConsumerRecord63.checksum();
        java.lang.String str66 = serializableConsumerRecord63.toString();
        int int67 = serializableConsumerRecord63.serializedValueSize();
        java.lang.String str68 = serializableConsumerRecord63.toString();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        long long81 = serializableConsumerRecord79.offset();
        java.lang.String str82 = serializableConsumerRecord79.topic();
        int int83 = serializableConsumerRecord79.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord89.headers();
        int int91 = serializableConsumerRecord89.serializedValueSize();
        org.apache.kafka.common.header.Headers headers92 = serializableConsumerRecord89.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object> objConsumerRecord93 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Object, java.lang.Object>("", 100, (long) '#', (long) (short) 0, timestampType20, (java.lang.Long) 35L, (int) (byte) 0, (int) (short) -1, (java.lang.Object) str68, (java.lang.Object) serializableConsumerRecord79, headers92);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = 100, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))", (int) (byte) -1, (long) 100, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers92);
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType20 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType20.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", serializable30, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(intOptional46);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str66, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str68, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNotNull(headers92);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType23, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int30 = serializableConsumerRecord29.serializedValueSize();
        java.lang.Class<?> wildcardClass31 = serializableConsumerRecord29.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement> strConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.reflect.AnnotatedElement>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 1, (long) 1, (long) 0, timestampType14, 10L, (int) (short) 100, (int) (short) 1, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.reflect.AnnotatedElement) wildcardClass31);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) 'a', (long) 0, (java.io.Serializable) 1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType35 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) 0, (long) (short) -1, (java.io.Serializable) timestampType35, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))");
        org.apache.kafka.common.record.TimestampType timestampType45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType45, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable52 = serializableConsumerRecord51.key();
        java.lang.CharSequence charSequence53 = serializableConsumerRecord51.value();
        long long54 = serializableConsumerRecord51.timestamp();
        java.lang.String str55 = serializableConsumerRecord51.topic();
        org.apache.kafka.common.record.TimestampType timestampType56 = serializableConsumerRecord51.timestampType();
        org.apache.kafka.common.header.Headers headers57 = serializableConsumerRecord51.headers();
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        long long70 = serializableConsumerRecord68.checksum();
        java.lang.CharSequence charSequence71 = serializableConsumerRecord68.value();
        long long72 = serializableConsumerRecord68.checksum();
        long long73 = serializableConsumerRecord68.offset();
        int int74 = serializableConsumerRecord68.serializedKeySize();
        org.apache.kafka.common.header.Headers headers75 = serializableConsumerRecord68.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.common.header.Headers> headersConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!), partition = -1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = hi!))", (int) (short) 0, 1L, (long) '4', timestampType35, (long) 35, 1, (int) (byte) 1, headers57, headers75);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + timestampType35 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType35.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable52 + "' != '" + (short) 1 + "'", serializable52, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence53 + "' != '" + "hi!" + "'", charSequence53, "hi!");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNull(timestampType56);
        org.junit.Assert.assertNotNull(headers57);
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence71 + "' != '" + "hi!" + "'", charSequence71, "hi!");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertNotNull(headers75);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 1, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        java.lang.String str7 = serializableConsumerRecord5.toString();
        long long8 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str7, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str15, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        long long11 = serializableConsumerRecord10.timestamp();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        long long18 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str19, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.common.record.TimestampType timestampType48 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType48, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence55 = serializableConsumerRecord54.value();
        java.lang.CharSequence charSequence56 = serializableConsumerRecord54.value();
        long long57 = serializableConsumerRecord54.timestamp();
        java.io.Serializable serializable58 = serializableConsumerRecord54.key();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord54.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers59, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int68 = serializableConsumerRecord67.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType69 = serializableConsumerRecord67.timestampType();
        java.io.Serializable serializable70 = serializableConsumerRecord67.key();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord67.headers();
        org.apache.kafka.common.record.TimestampType timestampType76 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType76, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence83 = serializableConsumerRecord82.value();
        java.io.Serializable serializable84 = serializableConsumerRecord82.key();
        org.apache.kafka.common.record.TimestampType timestampType85 = serializableConsumerRecord82.timestampType();
        long long86 = serializableConsumerRecord82.offset();
        java.lang.String str87 = serializableConsumerRecord82.topic();
        long long88 = serializableConsumerRecord82.checksum();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord82.timestampType();
        java.lang.CharSequence charSequence90 = serializableConsumerRecord82.value();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord82.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>> charSequenceConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", 97, (long) (byte) -1, (long) 100, timestampType17, (java.lang.Long) 0L, (int) 'a', (int) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, headers71, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) ' ', (long) 1, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        long long95 = serializableConsumerRecord94.checksum();
        long long96 = serializableConsumerRecord94.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertEquals("'" + charSequence55 + "' != '" + "hi!" + "'", charSequence55, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence56 + "' != '" + "hi!" + "'", charSequence56, "hi!");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable58 + "' != '" + (short) 1 + "'", serializable58, (short) 1);
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType69 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType69.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable70 + "' != '" + 1.0f + "'", serializable70, 1.0f);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertEquals("'" + charSequence83 + "' != '" + "hi!" + "'", charSequence83, "hi!");
        org.junit.Assert.assertEquals("'" + serializable84 + "' != '" + (short) 1 + "'", serializable84, (short) 1);
        org.junit.Assert.assertNull(timestampType85);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNull(timestampType89);
        org.junit.Assert.assertEquals("'" + charSequence90 + "' != '" + "hi!" + "'", charSequence90, "hi!");
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1L) + "'", long95 == (-1L));
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.partition();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord10.value();
        long long17 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int6 = serializableConsumerRecord5.serializedValueSize();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        int int10 = serializableConsumerRecord5.partition();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        int int12 = serializableConsumerRecord5.serializedValueSize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord5.value();
        long long14 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str9, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence13, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.offset();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.io.Serializable serializable15 = serializableConsumerRecord10.key();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        long long20 = serializableConsumerRecord10.offset();
        long long21 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        long long96 = serializableConsumerRecord92.checksum();
        int int97 = serializableConsumerRecord92.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType98 = serializableConsumerRecord92.timestampType();
        int int99 = serializableConsumerRecord92.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 10L + "'", long96 == 10L);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
        org.junit.Assert.assertTrue("'" + timestampType98 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType98.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType30 = serializableConsumerRecord29.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType39 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType39, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence46 = serializableConsumerRecord45.value();
        int int47 = serializableConsumerRecord45.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional48 = serializableConsumerRecord45.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord49 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType30, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional48);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional48, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass52 = intOptionalConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), (long) '#', (long) 10, timestampType13, (long) (byte) 100, 97, (-1), (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 0, (long) '4', (java.io.Serializable) 10, (java.lang.CharSequence) "");
        long long57 = serializableConsumerRecord56.checksum();
        java.lang.String str58 = serializableConsumerRecord56.toString();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType30 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType30.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence46 + "' != '" + "hi!" + "'", charSequence46, "hi!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(intOptional48);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )" + "'", str58, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 52, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType19, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence26 = serializableConsumerRecord25.value();
        java.lang.Class<?> wildcardClass27 = serializableConsumerRecord25.getClass();
        org.apache.kafka.common.record.TimestampType timestampType33 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType33, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence40 = serializableConsumerRecord39.value();
        int int41 = serializableConsumerRecord39.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional42 = serializableConsumerRecord39.leaderEpoch();
        java.io.Serializable serializable43 = serializableConsumerRecord39.key();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord39.leaderEpoch();
        org.apache.kafka.common.header.Headers headers45 = serializableConsumerRecord39.headers();
        org.apache.kafka.common.record.TimestampType timestampType50 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType50, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int57 = serializableConsumerRecord56.partition();
        java.util.Optional<java.lang.Integer> intOptional58 = serializableConsumerRecord56.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType11, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass27, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers45, intOptional58);
        long long60 = serializableConsumerRecord59.offset();
        java.lang.String str61 = serializableConsumerRecord59.topic();
        long long62 = serializableConsumerRecord59.checksum();
        java.lang.String str63 = serializableConsumerRecord59.topic();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord59.value();
        long long65 = serializableConsumerRecord59.checksum();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence26 + "' != '" + "hi!" + "'", charSequence26, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + charSequence40 + "' != '" + "hi!" + "'", charSequence40, "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(intOptional42);
        org.junit.Assert.assertEquals("'" + serializable43 + "' != '" + (short) 1 + "'", serializable43, (short) 1);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertNotNull(headers45);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intOptional58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L + "'", long60 == 100L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str61, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1L + "'", long62 == 1L);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str63, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        int int10 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        int int13 = serializableConsumerRecord5.serializedValueSize();
        java.lang.String str14 = serializableConsumerRecord5.topic();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        int int96 = serializableConsumerRecord95.serializedKeySize();
        int int97 = serializableConsumerRecord95.partition();
        long long98 = serializableConsumerRecord95.offset();
        org.apache.kafka.common.record.TimestampType timestampType99 = serializableConsumerRecord95.timestampType();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 0L + "'", long98 == 0L);
        org.junit.Assert.assertTrue("'" + timestampType99 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType99.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        int int9 = serializableConsumerRecord5.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        int int11 = serializableConsumerRecord5.partition();
        int int12 = serializableConsumerRecord5.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable14 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intOptional10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (-1.0d) + "'", serializable14, (-1.0d));
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        org.apache.kafka.common.record.TimestampType timestampType11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType11, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        java.io.Serializable serializable19 = serializableConsumerRecord17.key();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord17.timestampType();
        java.lang.Class<?> wildcardClass21 = serializableConsumerRecord17.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType31, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass21, timestampType31);
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        java.io.Serializable serializable50 = serializableConsumerRecord48.key();
        org.apache.kafka.common.record.TimestampType timestampType51 = serializableConsumerRecord48.timestampType();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord48.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType31, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "hi!");
        long long55 = serializableConsumerRecord54.checksum();
        int int56 = serializableConsumerRecord54.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertEquals("'" + serializable50 + "' != '" + (short) 1 + "'", serializable50, (short) 1);
        org.junit.Assert.assertNull(timestampType51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType8, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int15 = serializableConsumerRecord14.serializedValueSize();
        int int16 = serializableConsumerRecord14.serializedKeySize();
        long long17 = serializableConsumerRecord14.timestamp();
        long long18 = serializableConsumerRecord14.checksum();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord14.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> strComparableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", 52, 52L, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = -1, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", serializableConsumerRecord14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.checksum();
        int int17 = serializableConsumerRecord10.partition();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        org.apache.kafka.common.header.Headers headers61 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType72 = serializableConsumerRecord71.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType81 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType81, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence88 = serializableConsumerRecord87.value();
        int int89 = serializableConsumerRecord87.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional90 = serializableConsumerRecord87.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType72, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional90);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 0, (long) (short) 1, 1L, timestampType18, (java.lang.Long) 10L, 100, (int) (byte) -1, (java.io.Serializable) 0, (java.lang.CharSequence) "hi!", headers61, intOptional90);
        long long93 = serializableConsumerRecord92.offset();
        java.lang.String str94 = serializableConsumerRecord92.toString();
        java.lang.CharSequence charSequence95 = serializableConsumerRecord92.value();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord92.headers();
        long long97 = serializableConsumerRecord92.checksum();
        int int98 = serializableConsumerRecord92.partition();
        java.lang.String str99 = serializableConsumerRecord92.toString();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertNotNull(headers61);
        org.junit.Assert.assertTrue("'" + timestampType72 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType72.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence88 + "' != '" + "hi!" + "'", charSequence88, "hi!");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 52 + "'", int89 == 52);
        org.junit.Assert.assertNotNull(intOptional90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str94, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence95 + "' != '" + "hi!" + "'", charSequence95, "hi!");
        org.junit.Assert.assertNotNull(headers96);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 10L + "'", long97 == 10L);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", str99, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str13 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        java.lang.CharSequence charSequence19 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType14, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence19);
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord20.timestampType();
        int int22 = serializableConsumerRecord20.partition();
        int int23 = serializableConsumerRecord20.serializedKeySize();
        int int24 = serializableConsumerRecord20.partition();
        java.lang.String str25 = serializableConsumerRecord20.toString();
        org.apache.kafka.common.header.Headers headers26 = serializableConsumerRecord20.headers();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable38 = serializableConsumerRecord37.key();
        java.lang.CharSequence charSequence39 = serializableConsumerRecord37.value();
        java.io.Serializable serializable40 = serializableConsumerRecord37.key();
        java.lang.String str41 = serializableConsumerRecord37.topic();
        java.io.Serializable serializable42 = serializableConsumerRecord37.key();
        org.apache.kafka.common.header.Headers headers43 = serializableConsumerRecord37.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>> headerIterableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) (byte) 100, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers26, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers43);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)" + "'", str25, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)");
        org.junit.Assert.assertNotNull(headers26);
        org.junit.Assert.assertEquals("'" + serializable38 + "' != '" + (short) 1 + "'", serializable38, (short) 1);
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "hi!" + "'", charSequence39, "hi!");
        org.junit.Assert.assertEquals("'" + serializable40 + "' != '" + (short) 1 + "'", serializable40, (short) 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNotNull(headers43);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType18, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.header.Headers headers56 = serializableConsumerRecord55.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, 0L, (long) (byte) 0, timestampType18, (java.lang.Long) 100L, 0, 1, (java.io.Serializable) wildcardClass48, (java.lang.CharSequence) "hi!", headers56);
        int int58 = serializableConsumerRecord57.partition();
        org.apache.kafka.common.record.TimestampType timestampType59 = serializableConsumerRecord57.timestampType();
        int int60 = serializableConsumerRecord57.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord57.timestampType();
        long long62 = serializableConsumerRecord57.checksum();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(headers56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + timestampType59 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType59.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L + "'", long62 == 100L);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) (byte) 1, (java.io.Serializable) (short) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        int int65 = serializableConsumerRecord64.partition();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord58.leaderEpoch();
        org.apache.kafka.common.header.Headers headers80 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType81 = serializableConsumerRecord58.timestampType();
        long long82 = serializableConsumerRecord58.offset();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType84 = serializableConsumerRecord58.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertNotNull(headers80);
        org.junit.Assert.assertNull(timestampType81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNull(timestampType84);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        long long7 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers8 = serializableConsumerRecord5.headers();
        long long9 = serializableConsumerRecord5.timestamp();
        long long10 = serializableConsumerRecord5.offset();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord5.value();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(headers8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence12, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType17, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 32, (long) (byte) 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        java.lang.String str46 = serializableConsumerRecord44.topic();
        java.lang.CharSequence charSequence47 = serializableConsumerRecord44.value();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence45, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str46, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence47, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        org.apache.kafka.common.record.TimestampType timestampType25 = serializableConsumerRecord23.timestampType();
        java.io.Serializable serializable26 = serializableConsumerRecord23.key();
        org.apache.kafka.common.header.Headers headers27 = serializableConsumerRecord23.headers();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNull(timestampType25);
        org.junit.Assert.assertEquals("'" + serializable26 + "' != '" + 10 + "'", serializable26, 10);
        org.junit.Assert.assertNotNull(headers27);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long6 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.timestamp();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        int int12 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str10, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence11, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.common.header.Headers headers63 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType18, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers63);
        org.apache.kafka.common.header.Headers headers65 = serializableConsumerRecord64.headers();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord64.leaderEpoch();
        java.lang.String str67 = serializableConsumerRecord64.topic();
        int int68 = serializableConsumerRecord64.serializedKeySize();
        java.lang.CharSequence charSequence69 = serializableConsumerRecord64.value();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertNotNull(headers63);
        org.junit.Assert.assertNotNull(headers65);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hi!" + "'", str67, "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence69, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        long long17 = serializableConsumerRecord10.offset();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord10.timestampType();
        java.lang.String str17 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertNull(timestampType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        int int16 = serializableConsumerRecord13.serializedKeySize();
        int int17 = serializableConsumerRecord13.serializedKeySize();
        java.lang.String str18 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType24 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType24, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable31 = serializableConsumerRecord30.key();
        long long32 = serializableConsumerRecord30.checksum();
        java.util.Optional<java.lang.Integer> intOptional33 = serializableConsumerRecord30.leaderEpoch();
        long long34 = serializableConsumerRecord30.offset();
        java.lang.String str35 = serializableConsumerRecord30.toString();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord30.leaderEpoch();
        int int37 = serializableConsumerRecord30.serializedKeySize();
        java.lang.CharSequence charSequence38 = serializableConsumerRecord30.value();
        org.apache.kafka.common.header.Headers headers39 = serializableConsumerRecord30.headers();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord30.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.GenericDeclaration> headersConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.reflect.GenericDeclaration>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ), partition = 100, leaderEpoch = null, offset = 97, NoTimestampType = 10, serialized key size = 32, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) '#', 100L, headers19, (java.lang.reflect.GenericDeclaration) wildcardClass40);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertEquals("'" + serializable31 + "' != '" + (short) 1 + "'", serializable31, (short) 1);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(intOptional33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertNotNull(headers39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord10.leaderEpoch();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        long long15 = serializableConsumerRecord10.checksum();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        int int17 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 97L + "'", long15 == 97L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable59 = serializableConsumerRecord58.key();
        int int60 = serializableConsumerRecord58.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        int int73 = serializableConsumerRecord71.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord71.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord71.key();
        org.apache.kafka.common.header.Headers headers76 = serializableConsumerRecord71.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> timestampTypeEnumConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, 10L, timestampType4, (java.lang.Long) (-1L), (int) (byte) 1, 10, (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType22, serializableConsumerRecord58, headers76);
        java.io.Serializable serializable78 = serializableConsumerRecord58.key();
        java.io.Serializable serializable79 = serializableConsumerRecord58.key();
        int int80 = serializableConsumerRecord58.serializedValueSize();
        java.io.Serializable serializable81 = serializableConsumerRecord58.key();
        int int82 = serializableConsumerRecord58.serializedValueSize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + serializable59 + "' != '" + (short) 1 + "'", serializable59, (short) 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + (short) 1 + "'", serializable75, (short) 1);
        org.junit.Assert.assertNotNull(headers76);
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertEquals("'" + serializable79 + "' != '" + (short) 1 + "'", serializable79, (short) 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + serializable81 + "' != '" + (short) 1 + "'", serializable81, (short) 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        long long19 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.offset();
        long long23 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord10.leaderEpoch();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(intOptional24);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.partition();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord13.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 100, 35L, (long) (short) 1, timestampType16, (long) 100, 35, 35, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str40 = serializableConsumerRecord39.topic();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.lang.CharSequence charSequence46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType41, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence46);
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType61, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType48, (long) '#', 1, 0, (java.io.Serializable) timestampType61, (java.lang.CharSequence) "");
        int int66 = serializableConsumerRecord65.partition();
        java.lang.String str67 = serializableConsumerRecord65.toString();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord65.headers();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        java.util.Optional<java.lang.Integer> intOptional84 = serializableConsumerRecord79.leaderEpoch();
        java.lang.String str85 = serializableConsumerRecord79.topic();
        long long86 = serializableConsumerRecord79.timestamp();
        java.lang.String str87 = serializableConsumerRecord79.toString();
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord79.headers();
        java.lang.String str89 = serializableConsumerRecord79.topic();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord79.timestampType();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord79.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.Optional<java.lang.Integer>> headersConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '4', (long) 97, 97L, timestampType16, (long) (short) 10, 1, (int) (short) 10, headers68, intOptional91);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )" + "'", str67, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )");
        org.junit.Assert.assertNotNull(headers68);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(intOptional84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str87, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(timestampType90);
        org.junit.Assert.assertNotNull(intOptional91);
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.offset();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord23.value();
        java.util.Optional<java.lang.Integer> intOptional28 = serializableConsumerRecord23.leaderEpoch();
        java.util.Optional<java.lang.Integer> intOptional29 = serializableConsumerRecord23.leaderEpoch();
        java.lang.String str30 = serializableConsumerRecord23.toString();
        long long31 = serializableConsumerRecord23.timestamp();
        long long32 = serializableConsumerRecord23.offset();
        java.lang.String str33 = serializableConsumerRecord23.toString();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertNotNull(intOptional28);
        org.junit.Assert.assertNotNull(intOptional29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str30, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)" + "'", str33, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable14 = serializableConsumerRecord13.key();
        long long15 = serializableConsumerRecord13.checksum();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord13.leaderEpoch();
        long long17 = serializableConsumerRecord13.offset();
        java.lang.String str18 = serializableConsumerRecord13.toString();
        java.util.Optional<java.lang.Integer> intOptional19 = serializableConsumerRecord13.leaderEpoch();
        int int20 = serializableConsumerRecord13.serializedKeySize();
        java.lang.CharSequence charSequence21 = serializableConsumerRecord13.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord13.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>> headerIterableConsumerRecord24 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) (byte) -1, (-1L), (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers22, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))");
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str18, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str17 = serializableConsumerRecord16.topic();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType18, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType28, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        java.lang.String str36 = serializableConsumerRecord34.topic();
        java.lang.Class<?> wildcardClass37 = serializableConsumerRecord34.getClass();
        java.lang.CharSequence charSequence38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType18, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass37, charSequence38);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord51.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 0, 97L, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) 10, (long) (byte) 10, timestampType18, 1L, (int) (short) 1, 0, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        java.lang.CharSequence charSequence57 = serializableConsumerRecord56.value();
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + charSequence57 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )" + "'", charSequence57, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) '4', (long) 'a', (long) (byte) 1, timestampType22, 0L, (int) '#', 52, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.util.Optional<java.lang.Integer> intOptional74 = serializableConsumerRecord73.leaderEpoch();
        java.io.Serializable serializable75 = serializableConsumerRecord73.key();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord73.timestampType();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertNotNull(intOptional74);
        org.junit.Assert.assertEquals("'" + serializable75 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", serializable75, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.io.Serializable serializable25 = serializableConsumerRecord22.key();
        int int26 = serializableConsumerRecord22.partition();
        int int27 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType43, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int89 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, (long) (byte) 100, (long) 1, timestampType13, (java.lang.Long) 10L, (-1), 100, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers79, intOptional91);
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord92.headers();
        java.lang.CharSequence charSequence94 = serializableConsumerRecord92.value();
        java.util.Optional<java.lang.Integer> intOptional95 = serializableConsumerRecord92.leaderEpoch();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (-1.0d) + "'", serializable25, (-1.0d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 1.0f + "'", serializable42, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertEquals("'" + charSequence94 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence94, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertNotNull(intOptional95);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        int int15 = serializableConsumerRecord10.partition();
        long long16 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        long long20 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.partition();
        int int12 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNull(timestampType13);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        long long14 = serializableConsumerRecord10.checksum();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        long long16 = serializableConsumerRecord10.timestamp();
        long long17 = serializableConsumerRecord10.timestamp();
        long long18 = serializableConsumerRecord10.timestamp();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord10.timestampType();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNull(timestampType20);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        long long14 = serializableConsumerRecord10.offset();
        long long15 = serializableConsumerRecord10.checksum();
        long long16 = serializableConsumerRecord10.offset();
        int int17 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence14 = serializableConsumerRecord13.value();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord13.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (-1), (java.io.Serializable) wildcardClass15, (java.lang.CharSequence) "");
        java.lang.CharSequence charSequence18 = serializableConsumerRecord17.value();
        int int19 = serializableConsumerRecord17.serializedValueSize();
        java.io.Serializable serializable20 = serializableConsumerRecord17.key();
        java.lang.Class<?> wildcardClass21 = serializable20.getClass();
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "" + "'", charSequence18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(serializable20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType26 = serializableConsumerRecord25.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType35 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType35, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence42 = serializableConsumerRecord41.value();
        int int43 = serializableConsumerRecord41.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional44 = serializableConsumerRecord41.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType26, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord51 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType26, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType61, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence68 = serializableConsumerRecord67.value();
        java.io.Serializable serializable69 = serializableConsumerRecord67.key();
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord67.timestampType();
        org.apache.kafka.common.header.Headers headers71 = serializableConsumerRecord67.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 10, 100L, (long) (short) 0, timestampType26, (java.lang.Long) 0L, (int) (byte) -1, (int) ' ', (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers71);
        long long73 = serializableConsumerRecord72.offset();
        java.lang.String str74 = serializableConsumerRecord72.topic();
        org.apache.kafka.common.record.TimestampType timestampType75 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType76 = serializableConsumerRecord72.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence> strComparableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Comparable<java.lang.String>, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)", (int) ' ', (long) 10, (long) (short) 100, timestampType76, (long) (byte) 0, (int) '4', (-1), (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, null = 0, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable86 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 97, leaderEpoch = null, offset = -1, NoTimestampType = 0, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 52, 52L, (long) (short) 100, timestampType76, (long) 52, 10, (int) (byte) 100, serializable86, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + timestampType26 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType26.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence42 + "' != '" + "hi!" + "'", charSequence42, "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(intOptional44);
        org.junit.Assert.assertEquals("'" + charSequence68 + "' != '" + "hi!" + "'", charSequence68, "hi!");
        org.junit.Assert.assertEquals("'" + serializable69 + "' != '" + (short) 1 + "'", serializable69, (short) 1);
        org.junit.Assert.assertNull(timestampType70);
        org.junit.Assert.assertNotNull(headers71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L + "'", long73 == 100L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hi!" + "'", str74, "hi!");
        org.junit.Assert.assertTrue("'" + timestampType75 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType75.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType76 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType76.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) 'a', 100L, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        long long7 = serializableConsumerRecord5.offset();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L + "'", long7 == 100L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", 10, (long) (short) 1, (java.io.Serializable) (short) 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        org.apache.kafka.common.header.Headers headers7 = serializableConsumerRecord5.headers();
        int int8 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)" + "'", charSequence6, "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        org.junit.Assert.assertNotNull(headers7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int20 = serializableConsumerRecord19.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int31 = serializableConsumerRecord30.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType32 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType41, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence48 = serializableConsumerRecord47.value();
        java.io.Serializable serializable49 = serializableConsumerRecord47.key();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord47.timestampType();
        long long51 = serializableConsumerRecord47.offset();
        org.apache.kafka.common.header.Headers headers52 = serializableConsumerRecord47.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers52, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord55 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType21, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType32, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers52);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        long long68 = serializableConsumerRecord66.offset();
        org.apache.kafka.common.header.Headers headers69 = serializableConsumerRecord66.headers();
        long long70 = serializableConsumerRecord66.checksum();
        int int71 = serializableConsumerRecord66.partition();
        java.lang.Class<?> wildcardClass72 = serializableConsumerRecord66.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType21, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass72, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        java.lang.CharSequence charSequence75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (java.io.Serializable) wildcardClass72, charSequence75);
        java.lang.String str77 = serializableConsumerRecord76.toString();
        java.lang.String str78 = serializableConsumerRecord76.toString();
        int int79 = serializableConsumerRecord76.serializedValueSize();
        java.lang.CharSequence charSequence80 = serializableConsumerRecord76.value();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType32 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType32.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence48 + "' != '" + "hi!" + "'", charSequence48, "hi!");
        org.junit.Assert.assertEquals("'" + serializable49 + "' != '" + (short) 1 + "'", serializable49, (short) 1);
        org.junit.Assert.assertNull(timestampType50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(headers52);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
        org.junit.Assert.assertNotNull(headers69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)" + "'", str77, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)" + "'", str78, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNull(charSequence80);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        org.apache.kafka.common.header.Headers headers12 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers13 = serializableConsumerRecord10.headers();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        long long16 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(headers12);
        org.junit.Assert.assertNotNull(headers13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) (short) 10, (long) 10, timestampType4, (long) 97, (int) (byte) 1, 0, (java.io.Serializable) ' ', (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)");
        long long11 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord10.leaderEpoch();
        int int13 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.Class<?> wildcardClass15 = serializableConsumerRecord10.getClass();
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str14, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 10, null = 10, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key =  , value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) 100.0f, (java.lang.CharSequence) "");
        java.io.Serializable serializable10 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) 'a', (long) (short) 10, (java.io.Serializable) false, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int21 = serializableConsumerRecord20.partition();
        java.util.Optional<java.lang.Integer> intOptional22 = serializableConsumerRecord20.leaderEpoch();
        long long23 = serializableConsumerRecord20.checksum();
        java.util.Optional<java.lang.Integer> intOptional24 = serializableConsumerRecord20.leaderEpoch();
        java.lang.String str25 = serializableConsumerRecord20.topic();
        java.lang.String str26 = serializableConsumerRecord20.topic();
        java.lang.CharSequence charSequence27 = serializableConsumerRecord20.value();
        java.io.Serializable serializable28 = serializableConsumerRecord20.key();
        java.lang.String str29 = serializableConsumerRecord20.topic();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        java.io.Serializable serializable48 = serializableConsumerRecord46.key();
        org.apache.kafka.common.record.TimestampType timestampType49 = serializableConsumerRecord46.timestampType();
        java.lang.Class<?> wildcardClass50 = serializableConsumerRecord46.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType60 = serializableConsumerRecord59.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType60, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass50, timestampType60);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", (int) '#', (long) (short) 10, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        int int66 = serializableConsumerRecord65.serializedKeySize();
        java.lang.String str67 = serializableConsumerRecord65.topic();
        long long68 = serializableConsumerRecord65.checksum();
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        java.lang.CharSequence charSequence81 = serializableConsumerRecord79.value();
        long long82 = serializableConsumerRecord79.timestamp();
        long long83 = serializableConsumerRecord79.offset();
        long long84 = serializableConsumerRecord79.checksum();
        long long85 = serializableConsumerRecord79.offset();
        java.lang.CharSequence charSequence86 = serializableConsumerRecord79.value();
        org.apache.kafka.common.header.Headers headers87 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) (short) 10, (long) ' ', 32L, timestampType11, (java.lang.Long) 97L, 1, (int) 'a', serializableConsumerRecord20, serializableConsumerRecord65, headers87);
        org.junit.Assert.assertEquals("'" + serializable10 + "' != '" + 100.0f + "'", serializable10, 100.0f);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(intOptional22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(intOptional24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str25, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str26, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence27, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + false + "'", serializable28, false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str29, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertEquals("'" + serializable48 + "' != '" + (short) 1 + "'", serializable48, (short) 1);
        org.junit.Assert.assertNull(timestampType49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + timestampType60 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType60.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))" + "'", str67, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence81 + "' != '" + "hi!" + "'", charSequence81, "hi!");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-1L) + "'", long84 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertEquals("'" + charSequence86 + "' != '" + "hi!" + "'", charSequence86, "hi!");
        org.junit.Assert.assertNotNull(headers87);
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (byte) 100, (long) (byte) -1, (long) (byte) -1, timestampType10, 0L, (int) (short) -1, (int) (short) 1, (java.io.Serializable) 1.0d, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        int int17 = serializableConsumerRecord16.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional18 = serializableConsumerRecord16.leaderEpoch();
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(intOptional18);
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord28.getClass();
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        int int44 = serializableConsumerRecord42.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional45 = serializableConsumerRecord42.leaderEpoch();
        java.io.Serializable serializable46 = serializableConsumerRecord42.key();
        java.util.Optional<java.lang.Integer> intOptional47 = serializableConsumerRecord42.leaderEpoch();
        org.apache.kafka.common.header.Headers headers48 = serializableConsumerRecord42.headers();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType53, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int60 = serializableConsumerRecord59.partition();
        java.util.Optional<java.lang.Integer> intOptional61 = serializableConsumerRecord59.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType14, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass30, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers48, intOptional61);
        java.lang.Class<?> wildcardClass63 = serializableConsumerRecord62.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord65 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (int) ' ', (long) (byte) 0, (java.io.Serializable) wildcardClass63, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!))");
        org.apache.kafka.common.record.TimestampType timestampType66 = serializableConsumerRecord65.timestampType();
        long long67 = serializableConsumerRecord65.checksum();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertNotNull(intOptional45);
        org.junit.Assert.assertEquals("'" + serializable46 + "' != '" + (short) 1 + "'", serializable46, (short) 1);
        org.junit.Assert.assertNotNull(intOptional47);
        org.junit.Assert.assertNotNull(headers48);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intOptional61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + timestampType66 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType66.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        java.lang.CharSequence charSequence8 = serializableConsumerRecord5.value();
        java.lang.CharSequence charSequence9 = serializableConsumerRecord5.value();
        long long10 = serializableConsumerRecord5.timestamp();
        int int11 = serializableConsumerRecord5.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + charSequence8 + "' != '" + "hi!" + "'", charSequence8, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence9 + "' != '" + "hi!" + "'", charSequence9, "hi!");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType26, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence33 = serializableConsumerRecord32.value();
        int int34 = serializableConsumerRecord32.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional35 = serializableConsumerRecord32.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord36 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType17, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional35);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) 'a', (long) (-1), 0L, timestampType17, (long) (-1), 0, 100, (java.io.Serializable) 10L, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 0, leaderEpoch = null, offset = 32, null = 1, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)))", (int) (byte) 1, (long) (byte) 1, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))");
        long long45 = serializableConsumerRecord44.offset();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence33 + "' != '" + "hi!" + "'", charSequence33, "hi!");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(intOptional35);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 35, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = null)", (int) (byte) 0, (long) (byte) -1, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType18, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        java.lang.String str59 = serializableConsumerRecord57.topic();
        java.lang.CharSequence charSequence60 = serializableConsumerRecord57.value();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str67 = serializableConsumerRecord66.topic();
        int int68 = serializableConsumerRecord66.partition();
        java.lang.String str69 = serializableConsumerRecord66.topic();
        java.lang.String str70 = serializableConsumerRecord66.topic();
        int int71 = serializableConsumerRecord66.serializedValueSize();
        int int72 = serializableConsumerRecord66.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> serializableConsumerRecordConsumerRecord73 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("", (int) (byte) -1, (long) 'a', (long) (short) 10, timestampType18, (long) 'a', 10, (int) (short) 100, serializableConsumerRecord57, serializableConsumerRecord66);
        int int74 = serializableConsumerRecord66.serializedKeySize();
        long long75 = serializableConsumerRecord66.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType10, (java.lang.CharSequence) "hi!");
        int int13 = serializableConsumerRecord12.serializedKeySize();
        long long14 = serializableConsumerRecord12.checksum();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord12.value();
        long long17 = serializableConsumerRecord12.checksum();
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int13 = serializableConsumerRecord12.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType23 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord29 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType23, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence30 = serializableConsumerRecord29.value();
        int int31 = serializableConsumerRecord29.serializedKeySize();
        int int32 = serializableConsumerRecord29.serializedKeySize();
        int int33 = serializableConsumerRecord29.partition();
        java.io.Serializable serializable34 = serializableConsumerRecord29.key();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>> charSequenceConsumerRecord35 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (short) 1, (long) (short) 100, (long) '4', timestampType14, 0L, (int) (byte) 1, 100, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", serializableConsumerRecord29);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (byte) -1, (long) (short) 100, (java.io.Serializable) 0L, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        java.lang.CharSequence charSequence39 = serializableConsumerRecord37.value();
        long long40 = serializableConsumerRecord37.checksum();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence30 + "' != '" + "hi!" + "'", charSequence30, "hi!");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertEquals("'" + serializable34 + "' != '" + (short) 1 + "'", serializable34, (short) 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence39 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", charSequence39, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 35, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = , value = ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!))", 100, 10L, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.offset();
        java.lang.String str17 = serializableConsumerRecord13.toString();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType34, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence41 = serializableConsumerRecord40.value();
        java.io.Serializable serializable42 = serializableConsumerRecord40.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord40.timestampType();
        java.lang.Class<?> wildcardClass44 = serializableConsumerRecord40.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord53 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType54 = serializableConsumerRecord53.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType54, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass44, timestampType54);
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType65, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence72 = serializableConsumerRecord71.value();
        java.io.Serializable serializable73 = serializableConsumerRecord71.key();
        org.apache.kafka.common.record.TimestampType timestampType74 = serializableConsumerRecord71.timestampType();
        java.lang.Class<?> wildcardClass75 = serializableConsumerRecord71.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", 0, 0L, 52L, timestampType54, 0L, 1, (int) (short) 0, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", 52, (long) (byte) -1, (long) (short) -1, timestampType19, (long) 97, (int) (short) 100, (int) (short) 10, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable84 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord91 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int92 = serializableConsumerRecord91.partition();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord91.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 32, (long) '#', (long) (byte) 0, timestampType19, (java.lang.Long) 52L, (int) (short) 0, (int) (short) 100, serializable84, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers93);
        long long95 = serializableConsumerRecord94.checksum();
        int int96 = serializableConsumerRecord94.partition();
        org.apache.kafka.common.header.Headers headers97 = serializableConsumerRecord94.headers();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str17, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence41 + "' != '" + "hi!" + "'", charSequence41, "hi!");
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + (short) 1 + "'", serializable42, (short) 1);
        org.junit.Assert.assertNull(timestampType43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + timestampType54 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType54.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence72 + "' != '" + "hi!" + "'", charSequence72, "hi!");
        org.junit.Assert.assertEquals("'" + serializable73 + "' != '" + (short) 1 + "'", serializable73, (short) 1);
        org.junit.Assert.assertNull(timestampType74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(headers93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 52L + "'", long95 == 52L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 32 + "'", int96 == 32);
        org.junit.Assert.assertNotNull(headers97);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord10.timestampType();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        long long17 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(timestampType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        long long15 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        org.apache.kafka.common.header.Headers headers91 = serializableConsumerRecord88.headers();
        java.lang.String str92 = serializableConsumerRecord88.toString();
        org.apache.kafka.common.header.Headers headers93 = serializableConsumerRecord88.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(headers91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str92, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertNotNull(headers93);
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord16 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord16.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord30.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType40 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType40, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence47 = serializableConsumerRecord46.value();
        int int48 = serializableConsumerRecord46.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional49 = serializableConsumerRecord46.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType31, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional49);
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        int int64 = serializableConsumerRecord62.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional65 = serializableConsumerRecord62.leaderEpoch();
        java.io.Serializable serializable66 = serializableConsumerRecord62.key();
        org.apache.kafka.common.header.Headers headers67 = serializableConsumerRecord62.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType17, (java.lang.Long) 10L, (int) '#', 35, timestampType31, "hi!", headers67);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType78 = serializableConsumerRecord77.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '#', (long) 100, (long) 52, timestampType31, (long) 1, 1, (int) (byte) 100, (java.io.Serializable) timestampType78, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) (byte) -1, (long) 0, (java.io.Serializable) 52, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 35, leaderEpoch = null, offset = 52, NoTimestampType = 32, serialized key size = 0, serialized value size = 100, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        long long83 = serializableConsumerRecord82.timestamp();
        java.lang.String str84 = serializableConsumerRecord82.topic();
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType31 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType31.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence47 + "' != '" + "hi!" + "'", charSequence47, "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(intOptional49);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(intOptional65);
        org.junit.Assert.assertEquals("'" + serializable66 + "' != '" + (short) 1 + "'", serializable66, (short) 1);
        org.junit.Assert.assertNotNull(headers67);
        org.junit.Assert.assertTrue("'" + timestampType78 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType78.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str84, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType7, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        java.lang.String str14 = serializableConsumerRecord13.toString();
        java.io.Serializable serializable15 = serializableConsumerRecord13.key();
        java.lang.CharSequence charSequence16 = serializableConsumerRecord13.value();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        int int18 = serializableConsumerRecord13.serializedKeySize();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord13.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        int int34 = serializableConsumerRecord32.serializedValueSize();
        java.lang.String str35 = serializableConsumerRecord32.topic();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType53 = serializableConsumerRecord52.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType62 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord68 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType62, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence69 = serializableConsumerRecord68.value();
        int int70 = serializableConsumerRecord68.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional71 = serializableConsumerRecord68.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType53, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional71);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional71, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass75 = intOptionalConsumerRecord74.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord77 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 10, 0L, (long) (short) 10, timestampType36, (long) (short) -1, (int) '#', (int) (short) -1, (java.io.Serializable) wildcardClass75, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 52, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 0, (long) 1, (java.io.Serializable) (short) -1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 100, NoTimestampType = 100, serialized key size = 100, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        int int80 = serializableConsumerRecord79.partition();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Object> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.Object>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 10, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 10, (long) ' ', headers19, (java.lang.Object) serializableConsumerRecord79);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + serializable15 + "' != '" + 10.0f + "'", serializable15, 10.0f);
        org.junit.Assert.assertEquals("'" + charSequence16 + "' != '" + "hi!" + "'", charSequence16, "hi!");
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType53 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType53.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence69 + "' != '" + "hi!" + "'", charSequence69, "hi!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(intOptional71);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) (byte) 1, (java.io.Serializable) timestampType21, (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType31, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int38 = serializableConsumerRecord37.serializedValueSize();
        java.lang.String str39 = serializableConsumerRecord37.topic();
        java.lang.Class<?> wildcardClass40 = serializableConsumerRecord37.getClass();
        java.lang.CharSequence charSequence41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 97, (long) (byte) 0, (long) 0, timestampType21, (long) (short) -1, (int) (short) 10, (int) (short) 100, (java.io.Serializable) wildcardClass40, charSequence41);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) '4', 1L, (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        java.lang.Class<?> wildcardClass55 = serializableConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 0, 97L, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) ' ', (long) (byte) 10, (long) (byte) 10, timestampType21, 1L, (int) (short) 1, 0, (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 100, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100.0, value = )");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord61 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) ' ', (long) 32, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        long long62 = serializableConsumerRecord61.offset();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 32L + "'", long62 == 32L);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        int int90 = serializableConsumerRecord88.serializedKeySize();
        int int91 = serializableConsumerRecord88.serializedKeySize();
        java.lang.CharSequence charSequence92 = serializableConsumerRecord88.value();
        java.lang.String str93 = serializableConsumerRecord88.topic();
        long long94 = serializableConsumerRecord88.checksum();
        long long95 = serializableConsumerRecord88.offset();
        org.apache.kafka.common.header.Headers headers96 = serializableConsumerRecord88.headers();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + charSequence92 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", charSequence92, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 0L + "'", long95 == 0L);
        org.junit.Assert.assertNotNull(headers96);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (-1), (long) 100, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        long long10 = serializableConsumerRecord9.offset();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int32 = serializableConsumerRecord31.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord31.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int43 = serializableConsumerRecord42.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType44 = serializableConsumerRecord42.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType53 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord59 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType53, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence60 = serializableConsumerRecord59.value();
        java.io.Serializable serializable61 = serializableConsumerRecord59.key();
        org.apache.kafka.common.record.TimestampType timestampType62 = serializableConsumerRecord59.timestampType();
        long long63 = serializableConsumerRecord59.offset();
        org.apache.kafka.common.header.Headers headers64 = serializableConsumerRecord59.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord66 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("hi!", (int) (short) 1, 1L, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers64, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))", 35, (long) 52, (long) (short) 100, timestampType33, (java.lang.Long) (-1L), (int) (short) 100, (int) '#', (java.io.Serializable) timestampType44, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers64);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 32, (long) (byte) 1, (java.io.Serializable) timestampType33, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord78 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) '4', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        java.lang.String str79 = serializableConsumerRecord78.topic();
        long long80 = serializableConsumerRecord78.offset();
        org.apache.kafka.common.header.Headers headers81 = serializableConsumerRecord78.headers();
        long long82 = serializableConsumerRecord78.checksum();
        int int83 = serializableConsumerRecord78.partition();
        java.lang.Class<?> wildcardClass84 = serializableConsumerRecord78.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", (int) '4', (long) '4', (long) 1, timestampType33, 35L, 10, (int) (byte) 1, (java.io.Serializable) wildcardClass84, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (int) '#', (long) '4', (long) '#', timestampType11, 100L, (int) (short) -1, (int) (short) -1, (java.io.Serializable) 10, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 0, leaderEpoch = null, offset = 0, NoTimestampType = 52, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = hi!)");
        java.lang.String str89 = serializableConsumerRecord88.topic();
        java.lang.String str90 = serializableConsumerRecord88.topic();
        java.lang.Class<?> wildcardClass91 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType44 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType44.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence60 + "' != '" + "hi!" + "'", charSequence60, "hi!");
        org.junit.Assert.assertEquals("'" + serializable61 + "' != '" + (short) 1 + "'", serializable61, (short) 1);
        org.junit.Assert.assertNull(timestampType62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(headers64);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 52L + "'", long80 == 52L);
        org.junit.Assert.assertNotNull(headers81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-1L) + "'", long82 == (-1L));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 100 + "'", int83 == 100);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str89, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))" + "'", str90, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 1, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType8 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable9 = serializableConsumerRecord5.key();
        java.lang.String str10 = serializableConsumerRecord5.topic();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord5.value();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        java.io.Serializable serializable13 = serializableConsumerRecord5.key();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType8 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType8.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable9 + "' != '" + (-1.0d) + "'", serializable9, (-1.0d));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (-1.0d) + "'", serializable13, (-1.0d));
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        long long19 = serializableConsumerRecord10.checksum();
        int int20 = serializableConsumerRecord10.partition();
        int int21 = serializableConsumerRecord10.partition();
        long long22 = serializableConsumerRecord10.timestamp();
        long long23 = serializableConsumerRecord10.checksum();
        int int24 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.common.record.TimestampType timestampType17 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType17, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence24 = serializableConsumerRecord23.value();
        org.apache.kafka.common.header.Headers headers25 = serializableConsumerRecord23.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType7, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers25);
        long long27 = serializableConsumerRecord26.timestamp();
        long long28 = serializableConsumerRecord26.timestamp();
        java.lang.CharSequence charSequence29 = serializableConsumerRecord26.value();
        int int30 = serializableConsumerRecord26.partition();
        org.apache.kafka.common.header.Headers headers31 = serializableConsumerRecord26.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>> headerIterableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.Comparable<java.lang.String>>("", 1, (long) (short) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers31, (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        org.junit.Assert.assertEquals("'" + charSequence24 + "' != '" + "hi!" + "'", charSequence24, "hi!");
        org.junit.Assert.assertNotNull(headers25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(headers31);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.timestamp();
        java.lang.String str14 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        int int16 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str14, "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord13.timestampType();
        java.io.Serializable serializable16 = serializableConsumerRecord13.key();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType34 = serializableConsumerRecord33.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType48 = serializableConsumerRecord47.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        int int65 = serializableConsumerRecord63.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord63.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType48, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional66);
        org.apache.kafka.common.record.TimestampType timestampType73 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType73, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence80 = serializableConsumerRecord79.value();
        int int81 = serializableConsumerRecord79.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional82 = serializableConsumerRecord79.leaderEpoch();
        java.io.Serializable serializable83 = serializableConsumerRecord79.key();
        org.apache.kafka.common.header.Headers headers84 = serializableConsumerRecord79.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String> timestampTypeConsumerRecord85 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.String>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (short) 0, (long) (byte) 0, (long) (byte) 100, timestampType34, (java.lang.Long) 10L, (int) '#', 35, timestampType48, "hi!", headers84);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence> timestampTypeEnumConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", 100, (long) '#', (java.lang.Enum<org.apache.kafka.common.record.TimestampType>) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord89 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", (int) (byte) 10, (long) ' ', (long) 35, timestampType17, (long) (short) 1, (int) (byte) 10, (int) '#', (java.io.Serializable) timestampType34, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 10, (long) (byte) 0, (long) (short) 0, timestampType17, (long) ' ', (int) (byte) 1, (-1), (java.io.Serializable) (byte) 0, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)");
        int int96 = serializableConsumerRecord95.serializedKeySize();
        long long97 = serializableConsumerRecord95.timestamp();
        java.io.Serializable serializable98 = serializableConsumerRecord95.key();
        int int99 = serializableConsumerRecord95.serializedKeySize();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType15 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType15.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + 1.0f + "'", serializable16, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType34 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType34.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType48 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType48.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertEquals("'" + charSequence80 + "' != '" + "hi!" + "'", charSequence80, "hi!");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertNotNull(intOptional82);
        org.junit.Assert.assertEquals("'" + serializable83 + "' != '" + (short) 1 + "'", serializable83, (short) 1);
        org.junit.Assert.assertNotNull(headers84);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
        org.junit.Assert.assertEquals("'" + serializable98 + "' != '" + (byte) 0 + "'", serializable98, (byte) 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord17 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord17.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType27 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord33 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType27, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence34 = serializableConsumerRecord33.value();
        int int35 = serializableConsumerRecord33.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional36 = serializableConsumerRecord33.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType18, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional36);
        java.io.Serializable serializable41 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType18, (long) 0, 0, 0, serializable41, (java.lang.CharSequence) "");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType61 = serializableConsumerRecord60.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType70 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord76 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType70, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence77 = serializableConsumerRecord76.value();
        int int78 = serializableConsumerRecord76.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional79 = serializableConsumerRecord76.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord80 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType61, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) -1, (long) 1, (long) 10, timestampType61, (long) ' ', (int) (short) 0, (int) (byte) 1, (java.io.Serializable) (byte) 100, (java.lang.CharSequence) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, (long) (byte) 0, (long) ' ', timestampType18, (long) (byte) 0, (int) (byte) 0, 10, (java.io.Serializable) "hi!", (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int89 = serializableConsumerRecord88.serializedValueSize();
        long long90 = serializableConsumerRecord88.checksum();
        int int91 = serializableConsumerRecord88.serializedValueSize();
        java.lang.Class<?> wildcardClass92 = serializableConsumerRecord88.getClass();
        org.junit.Assert.assertTrue("'" + timestampType18 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType18.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence34 + "' != '" + "hi!" + "'", charSequence34, "hi!");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(intOptional36);
        org.junit.Assert.assertTrue("'" + timestampType61 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType61.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence77 + "' != '" + "hi!" + "'", charSequence77, "hi!");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNotNull(intOptional79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable8 = serializableConsumerRecord5.key();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        java.lang.String str11 = serializableConsumerRecord5.topic();
        java.lang.String str12 = serializableConsumerRecord5.topic();
        long long13 = serializableConsumerRecord5.checksum();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable8 + "' != '" + (-1.0d) + "'", serializable8, (-1.0d));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        long long13 = serializableConsumerRecord10.offset();
        int int14 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType15 = serializableConsumerRecord10.timestampType();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable17 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        java.lang.String str19 = serializableConsumerRecord10.toString();
        java.lang.CharSequence charSequence20 = serializableConsumerRecord10.value();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(timestampType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + serializable17 + "' != '" + (short) 1 + "'", serializable17, (short) 1);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str19, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence20 + "' != '" + "hi!" + "'", charSequence20, "hi!");
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        java.util.Optional<java.lang.Integer> intOptional12 = serializableConsumerRecord10.leaderEpoch();
        int int13 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(intOptional12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        long long14 = serializableConsumerRecord10.offset();
        java.lang.String str15 = serializableConsumerRecord10.topic();
        long long16 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence17 = serializableConsumerRecord10.value();
        int int18 = serializableConsumerRecord10.serializedValueSize();
        int int19 = serializableConsumerRecord10.partition();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence17 + "' != '" + "hi!" + "'", charSequence17, "hi!");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        int int12 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        java.io.Serializable serializable14 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        java.lang.String str16 = serializableConsumerRecord10.topic();
        long long17 = serializableConsumerRecord10.timestamp();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        java.lang.String str20 = serializableConsumerRecord10.topic();
        long long21 = serializableConsumerRecord10.offset();
        long long22 = serializableConsumerRecord10.timestamp();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertEquals("'" + serializable14 + "' != '" + (short) 1 + "'", serializable14, (short) 1);
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertNull(timestampType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType4, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        int int12 = serializableConsumerRecord10.serializedValueSize();
        long long13 = serializableConsumerRecord10.checksum();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional15 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.header.Headers headers16 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers17 = serializableConsumerRecord10.headers();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(intOptional15);
        org.junit.Assert.assertNotNull(headers16);
        org.junit.Assert.assertNotNull(headers17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.offset();
        java.lang.String str26 = serializableConsumerRecord23.topic();
        int int27 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        java.lang.CharSequence charSequence11 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence11);
        java.io.Serializable serializable13 = serializableConsumerRecord12.key();
        org.apache.kafka.common.record.TimestampType timestampType14 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType22 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord28 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType22, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence29 = serializableConsumerRecord28.value();
        java.io.Serializable serializable30 = serializableConsumerRecord28.key();
        org.apache.kafka.common.record.TimestampType timestampType31 = serializableConsumerRecord28.timestampType();
        long long32 = serializableConsumerRecord28.offset();
        org.apache.kafka.common.header.Headers headers33 = serializableConsumerRecord28.headers();
        java.lang.String str34 = serializableConsumerRecord28.toString();
        java.lang.String str35 = serializableConsumerRecord28.toString();
        java.lang.Class<?> wildcardClass36 = serializableConsumerRecord28.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord38 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", 100, 32L, (long) 'a', timestampType14, (long) (short) -1, 0, (int) (byte) 100, (java.io.Serializable) wildcardClass36, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord40 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = hi!)", (int) (short) 10, 100L, (java.io.Serializable) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)", (java.lang.CharSequence) "");
        int int41 = serializableConsumerRecord40.serializedValueSize();
        long long42 = serializableConsumerRecord40.offset();
        long long43 = serializableConsumerRecord40.timestamp();
        org.junit.Assert.assertEquals("'" + serializable13 + "' != '" + (byte) 10 + "'", serializable13, (byte) 10);
        org.junit.Assert.assertTrue("'" + timestampType14 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType14.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence29 + "' != '" + "hi!" + "'", charSequence29, "hi!");
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + (short) 1 + "'", serializable30, (short) 1);
        org.junit.Assert.assertNull(timestampType31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(headers33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str34, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str35, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L + "'", long42 == 100L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        java.lang.CharSequence charSequence4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) -1, (long) (short) -1, (java.io.Serializable) (byte) 10, charSequence4);
        long long6 = serializableConsumerRecord5.offset();
        java.util.Optional<java.lang.Integer> intOptional7 = serializableConsumerRecord5.leaderEpoch();
        int int8 = serializableConsumerRecord5.partition();
        java.lang.String str9 = serializableConsumerRecord5.topic();
        int int10 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(intOptional7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.topic();
        org.apache.kafka.common.record.TimestampType timestampType7 = serializableConsumerRecord5.timestampType();
        java.util.Optional<java.lang.Integer> intOptional8 = serializableConsumerRecord5.leaderEpoch();
        int int9 = serializableConsumerRecord5.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord5.timestampType();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + timestampType7 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType7.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int9 = serializableConsumerRecord8.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType10 = serializableConsumerRecord8.timestampType();
        java.io.Serializable serializable11 = serializableConsumerRecord8.key();
        org.apache.kafka.common.record.TimestampType timestampType12 = serializableConsumerRecord8.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) ' ', (long) (byte) 1, (java.io.Serializable) timestampType12, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!))");
        long long15 = serializableConsumerRecord14.checksum();
        java.lang.String str16 = serializableConsumerRecord14.topic();
        long long17 = serializableConsumerRecord14.checksum();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord14.headers();
        int int19 = serializableConsumerRecord14.partition();
        int int20 = serializableConsumerRecord14.serializedValueSize();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType10 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType10.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + 1.0f + "'", serializable11, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType12 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType12.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))" + "'", str16, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 32 + "'", int19 == 32);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord26 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType20, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence27 = serializableConsumerRecord26.value();
        java.io.Serializable serializable28 = serializableConsumerRecord26.key();
        org.apache.kafka.common.record.TimestampType timestampType29 = serializableConsumerRecord26.timestampType();
        java.lang.Class<?> wildcardClass30 = serializableConsumerRecord26.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType40 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType40, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType> typeConsumerRecord43 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.reflect.Type, org.apache.kafka.common.record.TimestampType>("ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", (int) (byte) 1, (long) (byte) 1, (java.lang.reflect.Type) wildcardClass30, timestampType40);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)", (int) (byte) 10, 52L, (java.io.Serializable) timestampType40, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        java.lang.CharSequence charSequence46 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", 1, 0L, (java.io.Serializable) timestampType40, charSequence46);
        org.apache.kafka.common.record.TimestampType timestampType57 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord63 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType57, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence64 = serializableConsumerRecord63.value();
        java.lang.CharSequence charSequence65 = serializableConsumerRecord63.value();
        long long66 = serializableConsumerRecord63.timestamp();
        long long67 = serializableConsumerRecord63.checksum();
        org.apache.kafka.common.header.Headers headers68 = serializableConsumerRecord63.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>> strConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = 1, serialized key size = 100, serialized value size = 97, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (byte) -1, (long) 52, 0L, timestampType40, (java.lang.Long) 1L, (int) (short) 10, 10, "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.Comparable<java.lang.String>) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers68);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord71 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 35, (long) 35, (java.io.Serializable) "ConsumerRecord(topic = hi!, partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 0, serialized key size = 52, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 32, leaderEpoch = null, offset = 35, NoTimestampType = 1, serialized key size = 1, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class java.lang.Object, value = hi!)");
        org.junit.Assert.assertEquals("'" + charSequence27 + "' != '" + "hi!" + "'", charSequence27, "hi!");
        org.junit.Assert.assertEquals("'" + serializable28 + "' != '" + (short) 1 + "'", serializable28, (short) 1);
        org.junit.Assert.assertNull(timestampType29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + timestampType40 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType40.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(headers68);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence12 = serializableConsumerRecord10.value();
        long long13 = serializableConsumerRecord10.timestamp();
        java.util.Optional<java.lang.Integer> intOptional14 = serializableConsumerRecord10.leaderEpoch();
        int int15 = serializableConsumerRecord10.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional16 = serializableConsumerRecord10.leaderEpoch();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.CharSequence charSequence18 = serializableConsumerRecord10.value();
        java.io.Serializable serializable19 = serializableConsumerRecord10.key();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord10.timestampType();
        java.io.Serializable serializable22 = serializableConsumerRecord10.key();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence12 + "' != '" + "hi!" + "'", charSequence12, "hi!");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(intOptional14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(intOptional16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence18 + "' != '" + "hi!" + "'", charSequence18, "hi!");
        org.junit.Assert.assertEquals("'" + serializable19 + "' != '" + (short) 1 + "'", serializable19, (short) 1);
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertNull(timestampType21);
        org.junit.Assert.assertEquals("'" + serializable22 + "' != '" + (short) 1 + "'", serializable22, (short) 1);
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType6 = serializableConsumerRecord5.timestampType();
        java.io.Serializable serializable7 = serializableConsumerRecord5.key();
        java.lang.String str8 = serializableConsumerRecord5.topic();
        long long9 = serializableConsumerRecord5.timestamp();
        org.junit.Assert.assertTrue("'" + timestampType6 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType6.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable7 + "' != '" + (-1.0d) + "'", serializable7, (-1.0d));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.partition();
        int int15 = serializableConsumerRecord13.partition();
        long long16 = serializableConsumerRecord13.timestamp();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord13.leaderEpoch();
        long long18 = serializableConsumerRecord13.checksum();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord13.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord25 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (int) '4', (long) (byte) 10, 0L, timestampType19, (long) 52, 0, (int) (byte) 100, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.io.Serializable serializable29 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord31 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 1, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = NoTimestampType, value = )", 1, (long) 'a', (long) 1, timestampType19, (long) 10, 97, 0, serializable29, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass32 = serializableConsumerRecord31.getClass();
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType19 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType19.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord19 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str20 = serializableConsumerRecord19.topic();
        org.apache.kafka.common.record.TimestampType timestampType21 = serializableConsumerRecord19.timestampType();
        java.lang.CharSequence charSequence26 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord27 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType21, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence26);
        org.apache.kafka.common.record.TimestampType timestampType28 = serializableConsumerRecord27.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord30 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (byte) 0, 0L, (java.io.Serializable) timestampType28, (java.lang.CharSequence) "");
        java.lang.Enum<org.apache.kafka.common.record.TimestampType> timestampTypeEnum34 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str49 = serializableConsumerRecord48.topic();
        org.apache.kafka.common.record.TimestampType timestampType50 = serializableConsumerRecord48.timestampType();
        java.lang.CharSequence charSequence55 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord56 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) 'a', (long) (byte) 10, 0L, timestampType50, (long) (-1), (int) 'a', (int) (short) 1, (java.io.Serializable) 100, charSequence55);
        org.apache.kafka.common.record.TimestampType timestampType57 = serializableConsumerRecord56.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord69 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType70 = serializableConsumerRecord69.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord72 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType70, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, (long) 52, (long) 1, timestampType57, (long) '#', 1, 0, (java.io.Serializable) timestampType70, (java.lang.CharSequence) "");
        java.util.Optional<java.lang.Integer> intOptional75 = serializableConsumerRecord74.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.common.header.Headers headers82 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str89 = serializableConsumerRecord88.topic();
        org.apache.kafka.common.record.TimestampType timestampType90 = serializableConsumerRecord88.timestampType();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>> timestampTypeEnumConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Enum<org.apache.kafka.common.record.TimestampType>, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) (-1), (long) (short) 1, timestampType28, (java.lang.Long) 0L, (int) (short) 1, 0, timestampTypeEnum34, intOptional75, headers82, intOptional91);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord94 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 100, NoTimestampType = 0, serialized key size = -1, serialized value size = 32, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = -1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = null)", (int) (byte) 100, (long) (byte) 100, (java.io.Serializable) (-1), (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = hi!)");
        org.apache.kafka.common.record.TimestampType timestampType95 = serializableConsumerRecord94.timestampType();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + timestampType21 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType21.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType28 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType28.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + timestampType50 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType50.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType57 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType57.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType70 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType70.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional75);
        org.junit.Assert.assertNotNull(headers82);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + timestampType90 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType90.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + timestampType95 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType95.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType14 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord20 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType14, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence21 = serializableConsumerRecord20.value();
        org.apache.kafka.common.header.Headers headers22 = serializableConsumerRecord20.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord23 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType4, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers22);
        long long24 = serializableConsumerRecord23.timestamp();
        long long25 = serializableConsumerRecord23.timestamp();
        long long26 = serializableConsumerRecord23.timestamp();
        long long27 = serializableConsumerRecord23.timestamp();
        int int28 = serializableConsumerRecord23.serializedKeySize();
        long long29 = serializableConsumerRecord23.checksum();
        int int30 = serializableConsumerRecord23.partition();
        org.junit.Assert.assertEquals("'" + charSequence21 + "' != '" + "hi!" + "'", charSequence21, "hi!");
        org.junit.Assert.assertNotNull(headers22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.partition();
        org.apache.kafka.common.header.Headers headers15 = serializableConsumerRecord12.headers();
        int int16 = serializableConsumerRecord12.serializedKeySize();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord34 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int35 = serializableConsumerRecord34.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType36 = serializableConsumerRecord34.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType44 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord50 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType44, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence51 = serializableConsumerRecord50.value();
        java.lang.Class<?> wildcardClass52 = serializableConsumerRecord50.getClass();
        org.apache.kafka.common.record.TimestampType timestampType58 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord64 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType58, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence65 = serializableConsumerRecord64.value();
        int int66 = serializableConsumerRecord64.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional67 = serializableConsumerRecord64.leaderEpoch();
        java.io.Serializable serializable68 = serializableConsumerRecord64.key();
        java.util.Optional<java.lang.Integer> intOptional69 = serializableConsumerRecord64.leaderEpoch();
        org.apache.kafka.common.header.Headers headers70 = serializableConsumerRecord64.headers();
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) '#', 1L, (-1L), timestampType75, (long) 1, 0, 0, (java.io.Serializable) 10.0f, (java.lang.CharSequence) "hi!");
        int int82 = serializableConsumerRecord81.partition();
        java.util.Optional<java.lang.Integer> intOptional83 = serializableConsumerRecord81.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 97, 100L, (long) (short) 10, timestampType36, (java.lang.Long) 1L, 52, (int) (byte) 0, (java.io.Serializable) wildcardClass52, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers70, intOptional83);
        long long85 = serializableConsumerRecord84.offset();
        java.lang.String str86 = serializableConsumerRecord84.topic();
        long long87 = serializableConsumerRecord84.checksum();
        long long88 = serializableConsumerRecord84.offset();
        java.lang.String str89 = serializableConsumerRecord84.topic();
        java.lang.Class<?> wildcardClass90 = serializableConsumerRecord84.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 10, (long) '4', (java.io.Serializable) wildcardClass90, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        long long93 = serializableConsumerRecord92.offset();
        org.apache.kafka.common.header.Headers headers94 = serializableConsumerRecord92.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers> charSequenceConsumerRecord95 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.CharSequence, org.apache.kafka.common.header.Headers>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '4', (long) 10, 32L, timestampType17, (long) (byte) 1, (int) (byte) 1, (int) (byte) 10, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", headers94);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord97 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = 0, serialized key size = 97, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = null)", (int) ' ', (long) (short) 100, (java.io.Serializable) (byte) 1, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
        int int98 = serializableConsumerRecord97.serializedKeySize();
        java.lang.CharSequence charSequence99 = serializableConsumerRecord97.value();
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(headers15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType17 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType17.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType36 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType36.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence51 + "' != '" + "hi!" + "'", charSequence51, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + charSequence65 + "' != '" + "hi!" + "'", charSequence65, "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertNotNull(intOptional67);
        org.junit.Assert.assertEquals("'" + serializable68 + "' != '" + (short) 1 + "'", serializable68, (short) 1);
        org.junit.Assert.assertNotNull(intOptional69);
        org.junit.Assert.assertNotNull(headers70);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(intOptional83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 100L + "'", long85 == 100L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str86, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1L + "'", long87 == 1L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 100L + "'", long88 == 100L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str89, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 52L + "'", long93 == 52L);
        org.junit.Assert.assertNotNull(headers94);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
        org.junit.Assert.assertEquals("'" + charSequence99 + "' != '" + "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )" + "'", charSequence99, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 52, NoTimestampType = 1, serialized key size = 10, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 52, value = )");
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord9 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int10 = serializableConsumerRecord9.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord9.timestampType();
        java.io.Serializable serializable12 = serializableConsumerRecord9.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord9.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str23 = serializableConsumerRecord22.topic();
        org.apache.kafka.common.record.TimestampType timestampType24 = serializableConsumerRecord22.timestampType();
        java.io.Serializable serializable25 = serializableConsumerRecord22.key();
        int int26 = serializableConsumerRecord22.partition();
        int int27 = serializableConsumerRecord22.serializedValueSize();
        java.lang.Class<?> wildcardClass28 = serializableConsumerRecord22.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord39 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) '4', 0L, (java.io.Serializable) 1.0f, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int40 = serializableConsumerRecord39.serializedValueSize();
        org.apache.kafka.common.record.TimestampType timestampType41 = serializableConsumerRecord39.timestampType();
        java.io.Serializable serializable42 = serializableConsumerRecord39.key();
        org.apache.kafka.common.record.TimestampType timestampType43 = serializableConsumerRecord39.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType51 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType51, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence58 = serializableConsumerRecord57.value();
        org.apache.kafka.common.header.Headers headers59 = serializableConsumerRecord57.headers();
        org.apache.kafka.common.record.TimestampType timestampType68 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord74 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType68, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence75 = serializableConsumerRecord74.value();
        java.lang.CharSequence charSequence76 = serializableConsumerRecord74.value();
        long long77 = serializableConsumerRecord74.timestamp();
        java.io.Serializable serializable78 = serializableConsumerRecord74.key();
        org.apache.kafka.common.header.Headers headers79 = serializableConsumerRecord74.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence> headersConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.header.Headers, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)", (int) (short) 0, (long) (byte) 0, headers79, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String> headerIterableConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, java.lang.String>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", 100, (long) 0, (long) (short) 0, timestampType43, (java.lang.Long) 1L, (int) ' ', (int) (byte) 100, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers59, "ConsumerRecord(topic = hi!, partition = 1, leaderEpoch = null, offset = 0, null = -1, serialized key size = 1, serialized value size = 35, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = hi!)", headers79);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord88 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int89 = serializableConsumerRecord88.partition();
        org.apache.kafka.common.header.Headers headers90 = serializableConsumerRecord88.headers();
        java.util.Optional<java.lang.Integer> intOptional91 = serializableConsumerRecord88.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord92 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", 1, (long) (byte) 100, (long) 1, timestampType13, (java.lang.Long) 10L, (-1), 100, (java.io.Serializable) wildcardClass28, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)", headers79, intOptional91);
        long long93 = serializableConsumerRecord92.timestamp();
        long long94 = serializableConsumerRecord92.offset();
        long long95 = serializableConsumerRecord92.timestamp();
        java.lang.CharSequence charSequence96 = serializableConsumerRecord92.value();
        long long97 = serializableConsumerRecord92.offset();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + 1.0f + "'", serializable12, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + timestampType24 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType24.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable25 + "' != '" + (-1.0d) + "'", serializable25, (-1.0d));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + timestampType41 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType41.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + serializable42 + "' != '" + 1.0f + "'", serializable42, 1.0f);
        org.junit.Assert.assertTrue("'" + timestampType43 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType43.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence58 + "' != '" + "hi!" + "'", charSequence58, "hi!");
        org.junit.Assert.assertNotNull(headers59);
        org.junit.Assert.assertEquals("'" + charSequence75 + "' != '" + "hi!" + "'", charSequence75, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence76 + "' != '" + "hi!" + "'", charSequence76, "hi!");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable78 + "' != '" + (short) 1 + "'", serializable78, (short) 1);
        org.junit.Assert.assertNotNull(headers79);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(headers90);
        org.junit.Assert.assertNotNull(intOptional91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 1L + "'", long93 == 1L);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1L + "'", long95 == 1L);
        org.junit.Assert.assertEquals("'" + charSequence96 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", charSequence96, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 100L + "'", long97 == 100L);
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 52, (long) (short) 1, (java.io.Serializable) (byte) 10, (java.lang.CharSequence) "");
        long long6 = serializableConsumerRecord5.offset();
        long long7 = serializableConsumerRecord5.timestamp();
        int int8 = serializableConsumerRecord5.serializedKeySize();
        long long9 = serializableConsumerRecord5.checksum();
        java.lang.String str10 = serializableConsumerRecord5.toString();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )" + "'", str10, "ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10, value = )");
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.common.record.TimestampType timestampType12 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord18 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType12, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence19 = serializableConsumerRecord18.value();
        java.lang.Class<?> wildcardClass20 = serializableConsumerRecord18.getClass();
        org.apache.kafka.common.record.TimestampType timestampType26 = null;
        org.apache.kafka.common.record.TimestampType timestampType36 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord42 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType36, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence43 = serializableConsumerRecord42.value();
        org.apache.kafka.common.header.Headers headers44 = serializableConsumerRecord42.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord45 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType26, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers44);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord46 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 100, 0L, (long) 0, timestampType4, (java.lang.Long) 100L, 0, (int) (byte) 1, (java.io.Serializable) wildcardClass20, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", headers44);
        long long47 = serializableConsumerRecord46.checksum();
        java.io.Serializable serializable48 = serializableConsumerRecord46.key();
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertEquals("'" + charSequence43 + "' != '" + "hi!" + "'", charSequence43, "hi!");
        org.junit.Assert.assertNotNull(headers44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
        org.junit.Assert.assertNotNull(serializable48);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord21 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType22 = serializableConsumerRecord21.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType31 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord37 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType31, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence38 = serializableConsumerRecord37.value();
        int int39 = serializableConsumerRecord37.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional40 = serializableConsumerRecord37.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord41 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType22, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional40);
        java.io.Serializable serializable45 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", 100, (long) (short) -1, (long) (byte) 10, timestampType22, (long) 0, 0, 0, serializable45, (java.lang.CharSequence) "");
        org.apache.kafka.common.record.TimestampType timestampType56 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord62 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType56, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence63 = serializableConsumerRecord62.value();
        java.lang.CharSequence charSequence64 = serializableConsumerRecord62.value();
        long long65 = serializableConsumerRecord62.timestamp();
        java.util.Optional<java.lang.Integer> intOptional66 = serializableConsumerRecord62.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>> strConsumerRecord67 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.util.Optional<java.lang.Integer>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", 0, (long) (short) -1, (long) (short) 0, timestampType22, (long) 35, (int) (short) -1, (int) (byte) 1, "", intOptional66);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord79 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType80 = serializableConsumerRecord79.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>> timestampTypeConsumerRecord82 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.common.record.TimestampType, java.lang.Comparable<java.lang.String>>("ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)", (int) (short) 1, (long) 97, timestampType80, (java.lang.Comparable<java.lang.String>) "hi!");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 97, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = false, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))", (-1), 0L, (long) 10, timestampType22, (-1L), (int) (short) 10, (-1), (java.io.Serializable) timestampType80, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        int int85 = serializableConsumerRecord84.serializedValueSize();
        int int86 = serializableConsumerRecord84.partition();
        long long87 = serializableConsumerRecord84.checksum();
        java.util.Optional<java.lang.Integer> intOptional88 = serializableConsumerRecord84.leaderEpoch();
        int int89 = serializableConsumerRecord84.serializedKeySize();
        int int90 = serializableConsumerRecord84.serializedKeySize();
        org.junit.Assert.assertTrue("'" + timestampType22 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType22.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence38 + "' != '" + "hi!" + "'", charSequence38, "hi!");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(intOptional40);
        org.junit.Assert.assertEquals("'" + charSequence63 + "' != '" + "hi!" + "'", charSequence63, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence64 + "' != '" + "hi!" + "'", charSequence64, "hi!");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(intOptional66);
        org.junit.Assert.assertTrue("'" + timestampType80 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType80.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
        org.junit.Assert.assertNotNull(intOptional88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        org.apache.kafka.common.record.TimestampType timestampType7 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord13 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType7, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int14 = serializableConsumerRecord13.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord13.topic();
        org.apache.kafka.common.record.TimestampType timestampType20 = null;
        org.apache.kafka.common.record.TimestampType timestampType28 = null;
        org.apache.kafka.common.record.TimestampType timestampType38 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord44 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType38, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence45 = serializableConsumerRecord44.value();
        org.apache.kafka.common.header.Headers headers46 = serializableConsumerRecord44.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord47 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType28, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers46);
        org.apache.kafka.common.record.TimestampType timestampType52 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord58 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType52, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence59 = serializableConsumerRecord58.value();
        org.apache.kafka.common.header.Headers headers60 = serializableConsumerRecord58.headers();
        org.apache.kafka.common.record.TimestampType timestampType65 = null;
        org.apache.kafka.common.record.TimestampType timestampType75 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord81 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType75, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence82 = serializableConsumerRecord81.value();
        org.apache.kafka.common.header.Headers headers83 = serializableConsumerRecord81.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord84 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("hi!", (int) (short) 1, (long) 0, (long) (short) -1, timestampType65, (java.lang.Long) (-1L), (int) (short) 1, (int) '#', (java.io.Serializable) 10, (java.lang.CharSequence) "hi!", headers83);
        java.util.Optional<java.lang.Integer> intOptional85 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers> headerIterableConsumerRecord86 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.Iterable<org.apache.kafka.common.header.Header>, org.apache.kafka.common.header.Headers>("", 0, (long) 1, (long) (short) 10, timestampType20, (java.lang.Long) 10L, 52, (int) (short) 10, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers46, headers60, headers83, intOptional85);
        org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>> serializableConsumerRecordConsumerRecord87 = new org.apache.kafka.clients.consumer.ConsumerRecord<org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>, java.lang.Iterable<org.apache.kafka.common.header.Header>>("", (int) (byte) 100, (long) (-1), serializableConsumerRecord13, (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers60);
        org.apache.kafka.common.header.Headers headers88 = serializableConsumerRecord13.headers();
        org.apache.kafka.common.record.TimestampType timestampType89 = serializableConsumerRecord13.timestampType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass90 = timestampType89.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + charSequence45 + "' != '" + "hi!" + "'", charSequence45, "hi!");
        org.junit.Assert.assertNotNull(headers46);
        org.junit.Assert.assertEquals("'" + charSequence59 + "' != '" + "hi!" + "'", charSequence59, "hi!");
        org.junit.Assert.assertNotNull(headers60);
        org.junit.Assert.assertEquals("'" + charSequence82 + "' != '" + "hi!" + "'", charSequence82, "hi!");
        org.junit.Assert.assertNotNull(headers83);
        org.junit.Assert.assertNotNull(headers88);
        org.junit.Assert.assertNull(timestampType89);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        org.apache.kafka.common.record.TimestampType timestampType8 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType8, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence15 = serializableConsumerRecord14.value();
        int int16 = serializableConsumerRecord14.serializedKeySize();
        long long17 = serializableConsumerRecord14.offset();
        org.apache.kafka.common.record.TimestampType timestampType18 = serializableConsumerRecord14.timestampType();
        java.lang.CharSequence charSequence19 = serializableConsumerRecord14.value();
        org.apache.kafka.common.record.TimestampType timestampType20 = serializableConsumerRecord14.timestampType();
        org.apache.kafka.common.header.Headers headers21 = serializableConsumerRecord14.headers();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>> strConsumerRecord22 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.lang.String, java.lang.Iterable<org.apache.kafka.common.header.Header>>("ConsumerRecord(topic = hi!, partition = -1, leaderEpoch = null, offset = 1, NoTimestampType = 10, serialized key size = 0, serialized value size = 1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 100, value = hi!)", (int) '4', (long) (short) -1, "ConsumerRecord(topic = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!), partition = 1, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", (java.lang.Iterable<org.apache.kafka.common.header.Header>) headers21);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(timestampType18);
        org.junit.Assert.assertEquals("'" + charSequence19 + "' != '" + "hi!" + "'", charSequence19, "hi!");
        org.junit.Assert.assertNull(timestampType20);
        org.junit.Assert.assertNotNull(headers21);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        java.lang.String str14 = serializableConsumerRecord10.topic();
        long long15 = serializableConsumerRecord10.timestamp();
        int int16 = serializableConsumerRecord10.partition();
        org.apache.kafka.common.record.TimestampType timestampType17 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.apache.kafka.common.header.Headers headers19 = serializableConsumerRecord10.headers();
        int int20 = serializableConsumerRecord10.partition();
        java.lang.String str21 = serializableConsumerRecord10.toString();
        int int22 = serializableConsumerRecord10.serializedKeySize();
        long long23 = serializableConsumerRecord10.offset();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNull(timestampType17);
        org.junit.Assert.assertNotNull(headers18);
        org.junit.Assert.assertNotNull(headers19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str21, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.lang.String str12 = serializableConsumerRecord10.topic();
        java.lang.CharSequence charSequence13 = serializableConsumerRecord10.value();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        long long15 = serializableConsumerRecord10.timestamp();
        java.lang.String str16 = serializableConsumerRecord10.toString();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        java.lang.String str18 = serializableConsumerRecord10.topic();
        int int19 = serializableConsumerRecord10.serializedValueSize();
        int int20 = serializableConsumerRecord10.serializedKeySize();
        java.io.Serializable serializable21 = serializableConsumerRecord10.key();
        long long22 = serializableConsumerRecord10.offset();
        java.util.Optional<java.lang.Integer> intOptional23 = serializableConsumerRecord10.leaderEpoch();
        long long24 = serializableConsumerRecord10.checksum();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + charSequence13 + "' != '" + "hi!" + "'", charSequence13, "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)" + "'", str16, "ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + serializable21 + "' != '" + (short) 1 + "'", serializable21, (short) 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(intOptional23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.io.Serializable serializable11 = serializableConsumerRecord10.key();
        long long12 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional13 = serializableConsumerRecord10.leaderEpoch();
        int int14 = serializableConsumerRecord10.serializedKeySize();
        int int15 = serializableConsumerRecord10.serializedValueSize();
        int int16 = serializableConsumerRecord10.serializedKeySize();
        int int17 = serializableConsumerRecord10.serializedValueSize();
        org.apache.kafka.common.header.Headers headers18 = serializableConsumerRecord10.headers();
        org.junit.Assert.assertEquals("'" + serializable11 + "' != '" + (short) 1 + "'", serializable11, (short) 1);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(intOptional13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(headers18);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        int int6 = serializableConsumerRecord5.partition();
        int int7 = serializableConsumerRecord5.partition();
        long long8 = serializableConsumerRecord5.offset();
        java.lang.String str9 = serializableConsumerRecord5.toString();
        long long10 = serializableConsumerRecord5.checksum();
        org.apache.kafka.common.record.TimestampType timestampType11 = serializableConsumerRecord5.timestampType();
        int int12 = serializableConsumerRecord5.partition();
        long long13 = serializableConsumerRecord5.offset();
        int int14 = serializableConsumerRecord5.partition();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)" + "'", str9, "ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + timestampType11 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType11.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord12 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord12.timestampType();
        int int14 = serializableConsumerRecord12.serializedValueSize();
        java.lang.String str15 = serializableConsumerRecord12.topic();
        org.apache.kafka.common.record.TimestampType timestampType16 = serializableConsumerRecord12.timestampType();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord32 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        org.apache.kafka.common.record.TimestampType timestampType33 = serializableConsumerRecord32.timestampType();
        org.apache.kafka.common.record.TimestampType timestampType42 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord48 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType42, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence49 = serializableConsumerRecord48.value();
        int int50 = serializableConsumerRecord48.serializedKeySize();
        java.util.Optional<java.lang.Integer> intOptional51 = serializableConsumerRecord48.leaderEpoch();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>> serializableConsumerRecord52 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.util.Optional<java.lang.Integer>>("hi!", (int) (short) 0, (long) '#', (long) 'a', timestampType33, 10L, (int) (byte) 100, (int) (byte) 0, (java.io.Serializable) true, intOptional51);
        org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence> intOptionalConsumerRecord54 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.util.Optional<java.lang.Integer>, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!)", (int) '#', 1L, intOptional51, (java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass55 = intOptionalConsumerRecord54.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord57 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 52, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)), partition = 97, leaderEpoch = null, offset = 35, NoTimestampType = 10, serialized key size = 32, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1.0, value = )", (int) (short) 10, 0L, (long) (short) 10, timestampType16, (long) (short) -1, (int) '#', (int) (short) -1, (java.io.Serializable) wildcardClass55, (java.lang.CharSequence) "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 0, NoTimestampType = 32, serialized key size = 0, serialized value size = 10, headers = RecordHeaders(headers = [], isReadOnly = false), key = hi!, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!))");
        java.lang.Class<?> wildcardClass58 = serializableConsumerRecord57.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.String> serializableConsumerRecord60 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.String>("ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = 32, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))", (int) (short) 100, (long) (short) 10, (java.io.Serializable) wildcardClass58, "ConsumerRecord(topic = , partition = 100, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.clients.consumer.ConsumerRecord, value = )");
        org.junit.Assert.assertTrue("'" + timestampType13 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType13.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + timestampType16 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType16.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertTrue("'" + timestampType33 + "' != '" + org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE + "'", timestampType33.equals(org.apache.kafka.common.record.TimestampType.NO_TIMESTAMP_TYPE));
        org.junit.Assert.assertEquals("'" + charSequence49 + "' != '" + "hi!" + "'", charSequence49, "hi!");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertNotNull(intOptional51);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = , partition = 97, leaderEpoch = null, offset = 100, null = 0, serialized key size = -1, serialized value size = 52, headers = RecordHeaders(headers = [], isReadOnly = false), key = #, value = ConsumerRecord(topic = ConsumerRecord(topic = , partition = 1, leaderEpoch = null, offset = 0, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = -1.0, value = hi!), partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = class org.apache.kafka.common.record.TimestampType, value = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!)))", 52, (long) '#', (java.io.Serializable) (byte) -1, (java.lang.CharSequence) "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
        java.lang.CharSequence charSequence6 = serializableConsumerRecord5.value();
        org.junit.Assert.assertEquals("'" + charSequence6 + "' != '" + "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))" + "'", charSequence6, "ConsumerRecord(topic = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!), partition = 32, leaderEpoch = null, offset = -1, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0.0, value = ConsumerRecord(topic = hi!, partition = 35, leaderEpoch = null, offset = 1, null = -1, serialized key size = 0, serialized value size = 0, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!))");
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        int int11 = serializableConsumerRecord10.serializedValueSize();
        long long12 = serializableConsumerRecord10.checksum();
        int int13 = serializableConsumerRecord10.serializedKeySize();
        java.lang.CharSequence charSequence14 = serializableConsumerRecord10.value();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        java.io.Serializable serializable16 = serializableConsumerRecord10.key();
        long long17 = serializableConsumerRecord10.timestamp();
        java.io.Serializable serializable18 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType19 = serializableConsumerRecord10.timestampType();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = timestampType19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + charSequence14 + "' != '" + "hi!" + "'", charSequence14, "hi!");
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertEquals("'" + serializable16 + "' != '" + (short) 1 + "'", serializable16, (short) 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + serializable18 + "' != '" + (short) 1 + "'", serializable18, (short) 1);
        org.junit.Assert.assertNull(timestampType19);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord5 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) ' ', 10L, (java.io.Serializable) 10.0d, (java.lang.CharSequence) "hi!");
        java.lang.String str6 = serializableConsumerRecord5.toString();
        int int7 = serializableConsumerRecord5.serializedValueSize();
        int int8 = serializableConsumerRecord5.serializedValueSize();
        long long9 = serializableConsumerRecord5.checksum();
        java.util.Optional<java.lang.Integer> intOptional10 = serializableConsumerRecord5.leaderEpoch();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)" + "'", str6, "ConsumerRecord(topic = , partition = 32, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 10.0, value = hi!)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(intOptional10);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord8 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (short) 1, 0L, (java.io.Serializable) (-1.0d), (java.lang.CharSequence) "hi!");
        java.lang.String str9 = serializableConsumerRecord8.topic();
        int int10 = serializableConsumerRecord8.partition();
        java.lang.CharSequence charSequence11 = serializableConsumerRecord8.value();
        java.lang.Class<?> wildcardClass12 = serializableConsumerRecord8.getClass();
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord14 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("ConsumerRecord(topic = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), partition = 0, leaderEpoch = null, offset = 100, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))", 35, (long) 52, (java.io.Serializable) wildcardClass12, (java.lang.CharSequence) "ConsumerRecord(topic = hi!, partition = 10, leaderEpoch = null, offset = 10, NoTimestampType = -1, serialized key size = -1, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = ConsumerRecord(topic = , partition = 10, leaderEpoch = null, offset = 0, null = -1, serialized key size = 52, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 1, value = hi!), value = ConsumerRecord(topic = , partition = 0, leaderEpoch = null, offset = 1, NoTimestampType = 1, serialized key size = 100, serialized value size = -1, headers = RecordHeaders(headers = [], isReadOnly = false), key = 0, value = hi!))");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        org.apache.kafka.common.record.TimestampType timestampType4 = null;
        org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence> serializableConsumerRecord10 = new org.apache.kafka.clients.consumer.ConsumerRecord<java.io.Serializable, java.lang.CharSequence>("", (int) (byte) 10, (long) (short) 0, (long) (short) -1, timestampType4, (-1L), (int) '4', (int) (short) -1, (java.io.Serializable) (short) 1, (java.lang.CharSequence) "hi!");
        java.lang.CharSequence charSequence11 = serializableConsumerRecord10.value();
        java.io.Serializable serializable12 = serializableConsumerRecord10.key();
        org.apache.kafka.common.record.TimestampType timestampType13 = serializableConsumerRecord10.timestampType();
        org.apache.kafka.common.header.Headers headers14 = serializableConsumerRecord10.headers();
        java.lang.CharSequence charSequence15 = serializableConsumerRecord10.value();
        long long16 = serializableConsumerRecord10.checksum();
        java.util.Optional<java.lang.Integer> intOptional17 = serializableConsumerRecord10.leaderEpoch();
        long long18 = serializableConsumerRecord10.checksum();
        java.lang.String str19 = serializableConsumerRecord10.topic();
        java.util.Optional<java.lang.Integer> intOptional20 = serializableConsumerRecord10.leaderEpoch();
        int int21 = serializableConsumerRecord10.serializedKeySize();
        org.junit.Assert.assertEquals("'" + charSequence11 + "' != '" + "hi!" + "'", charSequence11, "hi!");
        org.junit.Assert.assertEquals("'" + serializable12 + "' != '" + (short) 1 + "'", serializable12, (short) 1);
        org.junit.Assert.assertNull(timestampType13);
        org.junit.Assert.assertNotNull(headers14);
        org.junit.Assert.assertEquals("'" + charSequence15 + "' != '" + "hi!" + "'", charSequence15, "hi!");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(intOptional17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(intOptional20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }
}

